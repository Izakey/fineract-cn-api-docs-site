// http://jekyll.tips/jekyll-casts/jekyll-search-using-lunr-js/

importScripts("/js/lunr.min.js");

var store = {

  
  "/best-practices/": {
    "title": "Best Practices for Maintainers",
    "content": "What does it mean to be a maintainer?If you maintain an open source project that a lot of people use, you may have noticed you’re coding less and responding to issues more.In the early stages of a project, you’re experimenting with new ideas and making decisions based on what you want. As your project increases in popularity, you’ll find yourself working with your users and contributors more.Maintaining a project requires more than code. These tasks are often unexpected, but they’re just as important to a growing project. We’ve gathered a few ways to make your life easier, from documenting processes to leveraging your community.Documenting your processesWriting things down is one of the most important things you can do as a maintainer.Documentation not only clarifies your own thinking, but it helps other people understand what you need or expect, before they even ask.Writing things down makes it easier to say no when something doesn’t fit into your scope. It also makes it easier for people to pitch in and help. You never know who might be reading or using your project.Even if you don’t use full paragraphs, jotting down bullet points is better than not writing at all.Remember to keep your documentation up-to-date. If you’re not able to always do this, delete your outdated documentation or indicate it is outdated so contributors know updates are welcome.Write down your project’s visionStart by writing down the goals of your project. Add them to your README, or create a separate file called VISION. If there are other artifacts that could help, like a project roadmap, make those public as well.Having a clear, documented vision keeps you focused and helps you avoid “scope creep” from others’ contributions.For example, @lord discovered that having a project vision helped him figure out which requests to spend time on. As a new maintainer, he regretted not sticking to his project’s scope when he got his first feature request for Slate.    I fumbled it. I didn’t put in the effort to come up with a complete solution. Instead of an half-assed solution, I wish I had said “I don’t have time for this right now, but I’ll add it to the long term nice-to-have list.”  — @lord, “Tips for new open source maintainers”  Communicate your expectationsRules can be nerve-wracking to write down. Sometimes you might feel like you’re policing other people’s behavior or killing all the fun.Written and enforced fairly, however, good rules empower maintainers. They prevent you from getting dragged into doing things you don’t want to do.Most people who come across your project don’t know anything about you or your circumstances. They may assume you get paid to work on it, especially if it’s something they regularly use and depend on. Maybe at one point you put a lot of time into your project, but now you’re busy with a new job or family member.All of this is perfectly okay! Just make sure other people know about it.If maintaining your project is part-time or purely volunteered, be honest about how much time you have. This is not the same as how much time you think the project requires, or how much time others want you to spend.Here are a few rules that are worth writing down:  How a contribution is reviewed and accepted (Do they need tests? An issue template?)  The types of contributions you’ll accept (Do you only want help with a certain part of your code?)  When it’s appropriate to follow up (for example, “You can expect a response from a maintainer within 7 days. If you haven’t heard anything by then, feel free to ping the thread.”)  How much time you spend on the project (for example, “We only spend about 5 hours per week on this project”)Jekyll, CocoaPods, and Homebrew are several examples of projects with ground rules for maintainers and contributors.Keep communication publicDon’t forget to document your interactions, too. Wherever you can, keep communication about your project public. If somebody tries to contact you privately to discuss a feature request or support need, politely direct them to a public communication channel, such as a mailing list or issue tracker.If you meet with other maintainers, or make a major decision in private, document these conversations in public, even if it’s just posting your notes.That way, anybody who joins your community will have access to the same information as someone who’s been there for years.Learning to say noYou’ve written things down. Ideally, everybody would read your documentation, but in reality, you’ll have to remind others that this knowledge exists.Having everything written down, however, helps depersonalize situations when you do need to enforce your rules.Saying no isn’t fun, but  “Your contribution doesn’t match this project’s criteria” feels less personal than “I don’t like your contribution”.Saying no applies to many situations you’ll come across as a maintainer: feature requests that don’t fit the scope, someone derailing a discussion, doing unnecessary work for others.Keep the conversation friendlyOne of the most important places you’ll practice saying no is on your issue and pull request queue. As a project maintainer, you’ll inevitably receive suggestions that you don’t want to accept.Maybe the contribution changes your project’s scope or doesn’t match your vision. Maybe the idea is good, but the implementation is poor.Regardless of the reason, it is possible to tactfully handle contributions that don’t meet your project’s standards.If you receive a contribution you don’t want to accept, your first reaction might be to ignore it or pretend you didn’t see it. Doing so could hurt the other person’s feelings and even demotivate other potential contributors in your community.    The key to handle support for large-scale open source projects is to keep issues moving. Try to avoid having issues stall. If you’re an iOS developer you know how frustrating it can be to submit radars. You might hear back 2 years later, and are told to try again with the latest version of iOS.  — @KrauseFx, “Scaling open source communities”  Don’t leave an unwanted contribution open because you feel guilty or want to be nice. Over time, your unanswered issues and PRs will make working on your project feel that much more stressful and intimidating.It’s better to immediately close the contributions you know you don’t want to accept. If your project already suffers from a large backlog, @steveklabnik has suggestions for how to triage issues efficiently.Secondly, ignoring contributions sends a negative signal to your community. Contributing to a project can be intimidating, especially if it’s someone’s first time. Even if you don’t accept their contribution, acknowledge the person behind it and thank them for their interest. It’s a big compliment!If you don’t want to accept a contribution:  Thank them for their contribution  Explain why it doesn’t fit into the scope of the project, and offer clear suggestions for improvement, if you’re able. Be kind, but firm.  Link to relevant documentation, if you have it. If you notice repeated requests for things you don’t want to accept, add them into your documentation to avoid repeating yourself.  Close the requestYou shouldn’t need more than 1-2 sentences to respond. For example, when a user of celery reported a Windows-related error, @berkerpeksag responded with:If the thought of saying no terrifies you, you’re not alone. As @jessfraz put it:  I’ve talked to maintainers from several different open source projects, Mesos, Kubernetes, Chromium, and they all agree one of the hardest parts of being a maintainer is saying “No” to patches you don’t want.Don’t feel guilty about not wanting to accept someone’s contribution. The first rule of open source, according to @shykes: “No is temporary, yes is forever.” While empathizing with another person’s enthusiasm is a good thing, rejecting a contribution is not the same as rejecting the person behind it.Ultimately, if a contribution isn’t good enough, you’re under no obligation to accept it. Be kind and responsive when people contribute to your project, but only accept changes that you truly believe will make your project better. The more often you practice saying no, the easier it becomes. Promise.Be proactiveTo reduce the volume of unwanted contributions in the first place, explain your project’s process for submitting and accepting contributions in your contributing guide.If you’re receiving too many low-quality contributions, require that contributors do a bit of work beforehand, for example:  Fill out a issue or PR template/checklist  Open an issue before submitting a PRIf they don’t follow your rules, close the issue immediately and point to your documentation.While this approach may feel unkind at first, being proactive is actually good for both parties. It reduces the chance that someone will put in many wasted hours of work into a pull request that you aren’t going to accept. And it makes your workload easier to manage.    Ideally, explain to them and in a CONTRIBUTING.md file how they can get a better indication in the future on what would or would not be accepted before they begin the work.  — @MikeMcQuaid, “Kindly Closing Pull Requests”  Sometimes, when you say no, your potential contributor may get upset or criticize your decision. If their behavior becomes hostile, take steps to defuse the situation or even remove them from your community, if they’re not willing to collaborate constructively.Embrace mentorshipMaybe someone in your community regularly submits contributions that don’t meet your project’s standards. It can be frustrating for both parties to repeatedly go through rejections.If you see that someone is enthusiastic about your project, but needs a bit of polish, be patient. Explain clearly in each situation why their contributions don’t meet the expectations of the project. Try pointing them to an easier or less ambiguous task, like an issue marked “good first issue,” to get their feet wet. If you have time, consider mentoring them through their first contribution, or find someone else in your community who might be willing to mentor them.Leverage your communityYou don’t have to do everything yourself. Your project’s community exists for a reason! Even if you don’t yet have an active contributor community, if you have a lot of users, put them to work.Share the workloadIf you’re looking for others to pitch in, start by asking around.When you see new contributors making repeated contributions, recognize their work by offering more responsibility. Document how others can grow into leadership roles if they wish.Encouraging others to share ownership of the project can greatly reduce your own workload, as @lmccart discovered on her project, p5.js.    I’d been saying, “Yeah, anyone can be involved, you don’t have to have a lot of coding expertise […].” We had people sign up to come [to an event] and that’s when I was really wondering: is this true, what I’ve been saying? There are gonna be 40 people who show up, and it’s not like I can sit with each of them…But people came together, and it just sort of worked. As soon as one person got it, they could teach their neighbor.  —  @lmccart, “What Does “Open Source” Even Mean? p5.js Edition”  If you need to step away from your project, either on hiatus or permanently, there’s no shame in asking someone else to take over for you.If other people are enthusiastic about its direction, give them commit access or formally hand over control to someone else. If someone forked your project and is actively maintaining it elsewhere, consider linking to the fork from your original project. It’s great that so many people want your project to live on!@progrium found that documenting the vision for his project, Dokku, helped those goals live on even after he stepped away from the project:  I wrote a wiki page describing what I wanted and why I wanted it. For some reason it came as a surprise to me that the maintainers started moving the project in that direction! Did it happen exactly how I’d do it? Not always. But it still brought the project closer to what I wrote down.Let others build the solutions they needIf a potential contributor has a different opinion on what your project should do, you may want to gently encourage them to work on their own fork.Forking a project doesn’t have to be a bad thing. Being able to copy and modify projects is one of the best things about open source. Encouraging your community members to work on their own fork can provide the creative outlet they need, without conflicting with your project’s vision.    I cater to the 80% use case. If you are one of the unicorns, please fork my work. I won’t get offended! My public projects are almost always meant to solve the most common problems; I try to make it easy to go deeper by either forking my work or extending it.  — @geerlingguy, “Why I Close PRs”  The same applies to a user who really wants a solution that you simply don’t have the bandwidth to build. Offering APIs and customization hooks can help others meet their own needs, without having to modify the source directly. @orta found that encouraging plugins for CocoaPods led to “some of the most interesting ideas”:  It’s almost inevitable that once a project becomes big, maintainers have to become a lot more conservative about how they introduce new code. You become good at saying “no”, but a lot of people have legitimate needs. So, instead you end up converting your tool into a platform.Bring in the robotsJust as there are tasks that other people can help you with, there are also tasks that no human should ever have to do. Robots are your friend. Use them to make your life as a maintainer easier.Require tests and other checks to improve the quality of your codeOne of the most important ways you can automate your project is by adding tests.Tests help contributors feel confident that they won’t break anything. They also make it easier for you to review and accept contributions quickly. The more responsive you are, the more engaged your community can be.Set up automatic tests that will run on all incoming contributions, and ensure that your tests can easily be run locally by contributors. Require that all code contributions pass your tests before they can be submitted. You’ll help set a minimum standard of quality for all submissions. Required status checks on GitHub can help ensure no change gets merged without your tests passing.If you add tests, make sure to explain how they work in your CONTRIBUTING file.    I believe that tests are necessary for all code that people work on. If the code was fully and perfectly correct, it wouldn’t need changes – we only write code when something is wrong, whether that’s “It crashes” or “It lacks such-and-such a feature”. And regardless of the changes you’re making, tests are essential for catching any regressions you might accidentally introduce.  — @edunham, “Rust’s Community Automation”  Use tools to automate basic maintenance tasksThe good news about maintaining a popular project is that other maintainers have probably faced similar issues and built a solution for it.There are a variety of tools available to help automate some aspects of maintenance work. A few examples:  semantic-release automates your releases  mention-bot mentions potential reviewers for pull requests  Danger helps automate code reviewFor bug reports and other common contributions, GitHub has Issue Templates and Pull Request Templates, which you can create to streamline the communication you receive. @TalAter made a Choose Your Own Adventure guide to help you write your issue and PR templates.To manage your email notifications, you can set up email filters to organize by priority.If you want to get a little more advanced, style guides and linters can standardize project contributions and make them easier to review and accept.However, if your standards are too complicated, they can increase the barriers to contribution. Make sure you’re only adding enough rules to make everyone’s lives easier.If you’re not sure which tools to use, look at what other popular projects do, especially those in your ecosystem. For example, what does the contribution process look like for other Node modules? Using similar tools and approaches will also make your process more familiar to your target contributors.It’s okay to hit pauseOpen source work once brought you joy. Maybe now it’s starting to make you feel avoidant or guilty.Perhaps you’re feeling overwhelmed or a growing sense of dread when you think about your projects. And meanwhile, the issues and pull requests pile up.Burnout is a real and pervasive issue in open source work, especially among maintainers. As a maintainer, your happiness is a non-negotiable requirement for the survival of any open source project.Although it should go without saying, take a break! You shouldn’t have to wait until you feel burned out to take a vacation. @brettcannon, a Python core developer, decided to take a month-long vacation after 14 years of volunteer OSS work.Just like any other type of work, taking regular breaks will keep you refreshed, happy, and excited about your work.    In maintaining WP-CLI, I’ve discovered I need to make myself happy first, and set clear boundaries on my involvement. The best balance I’ve found is 2-5 hours per week, as a part of my normal work schedule. This keeps my involvement a passion, and from feeling too much like work. Because I prioritize the issues I’m working on, I can make regular progress on what I think is most important.  — @danielbachhuber, “My condolences, you’re now the maintainer of a popular open source project”  Sometimes, it can be hard to take a break from open source work when it feels like everybody needs you. People may even try to make you feel guilty for stepping away.Do your best to find support for your users and community while you’re away from a project. If you can’t find the support you need, take a break anyway. Be sure to communicate when you’re not available, so people aren’t confused by your lack of responsiveness.Taking breaks applies to more than just vacations, too. If you don’t want to do open source work on weekends, or during work hours, communicate those expectations to others, so they know not to bother you.Take care of yourself first!Maintaining a popular project requires different skills than the earlier stages of growth, but it’s no less rewarding. As a maintainer, you’ll practice leadership and personal skills on a level that few people get to experience. While it’s not always easy to manage, setting clear boundaries and only taking on what you’re comfortable with will help you stay happy, refreshed, and productive.",
    "url": "/best-practices/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/best-practices/\">\n      Best Practices for Maintainers\n    </a>\n  </h2>\n  <h2 id=\"what-does-it-mean-to-be-a-maintainer\">What does it mean to be a maintainer?</h2>\n\n\n</div>\n"
  },

  
  "/building-community/": {
    "title": "Building Welcoming Communities",
    "content": "Setting your project up for successYou’ve launched your project, you’re spreading the word, and people are checking it out. Awesome! Now, how do you get them to stick around?A welcoming community is an investment into your project’s future and reputation. If your project is just starting to see its first contributions, start by giving early contributors a positive experience, and make it easy for them to keep coming back.Make people feel welcomeOne way to think about your project’s community is through what @MikeMcQuaid calls the contributor funnel:As you build your community, consider how someone at the top of the funnel (a potential user) might theoretically make their way to the bottom (an active maintainer). Your goal is to reduce friction at each stage of the contributor experience. When people have easy wins, they will feel incentivized to do more.Start with your documentation:  Make it easy for someone to use your project. A friendly README and clear code examples will make it easier for anyone who lands on your project to get started.  Clearly explain how to contribute, using your CONTRIBUTING file and keeping your issues up-to-date.GitHub’s 2017 Open Source Survey showed incomplete or confusing documentation is the biggest problem for open source users. Good documentation invites people to interact with your project. Eventually, someone will open an issue or pull request. Use these interactions as opportunities to move them down the funnel.  When someone new lands on your project, thank them for their interest! It only takes one negative experience to make someone not want to come back.  Be responsive. If you don’t respond to their issue for a month, chances are, they’ve already forgotten about your project.  Be open-minded about the types of contributions you’ll accept. Many contributors start with a bug report or small fix. There are many ways to contribute to a project. Let people help how they want to help.  If there’s a contribution you disagree with, thank them for their idea and explain why it doesn’t fit into the scope of the project, linking to relevant documentation if you have it.    Contributing to open source is easier for some than others. There’s a lot of fear of being yelled at for not doing something right or just not fitting in. (…) By giving contributors a place to contribute with very low technical proficiency (documentation, web content markdown, etc) you can greatly reduce those concerns.  — @mikeal, “Growing a contributor base in modern open source”  The majority of open source contributors are “casual contributors”: people who contribute to a project only occasionally. A casual contributor may not have time to get fully up to speed with your project, so your job is to make it easy for them to contribute.Encouraging other contributors is an investment in yourself, too. When you empower your biggest fans to run with the work they’re excited about, there’s less pressure to do everything yourself.Document everything    Have you ever been to a (tech-) event where you didn’t know anyone, but everyone else seemed to stand in groups and chat like old friends? (…) Now imagine you want to contribute to an open source project, but you don’t see why or how this is happening.  — @janl, “Sustainable Open Source”  When you start a new project, it may feel natural to keep your work private. But open source projects thrive when you document your process in public.When you write things down, more people can participate at every step of the way. You might get help on something you didn’t even know you needed.Writing things down means more than just technical documentation. Any time you feel the urge to write something down or privately discuss your project, ask yourself whether you can make it public.Be transparent about your project’s roadmap, the types of contributions you’re looking for, how contributions are reviewed, or why you made certain decisions.If you notice multiple users running into the same problem, document the answers in the README.For meetings, consider publishing your notes or takeaways in a relevant issue. The feedback you’ll get from this level of transparency may surprise you.Documenting everything applies to the work you do, too. If you’re working on a substantial update to your project, put it into a pull request and mark it as a work in progress (WIP). That way, other people can feel involved in the process early on.Be responsiveAs you promote your project, people will have feedback for you. They may have questions about how things work, or need help getting started.Try to be responsive when someone files an issue, submits a pull request, or asks a question about your project. When you respond quickly, people will feel they are part of a dialogue, and they’ll be more enthusiastic about participating.Even if you can’t review the request immediately, acknowledging it early helps increase engagement. Here’s how @tdreyno responded to a pull request on Middleman:A Mozilla study found that contributors who received code reviews within 48 hours had a much higher rate of return and repeat contribution.Conversations about your project could also be happening in other places around the internet, such as Stack Overflow, Twitter, or Reddit. You can set up notifications in some of these places so you are alerted when someone mentions your project.Give your community a place to congregateThere are two reasons to give your community a place to congregate.The first reason is for them. Help people get to know each other. People with common interests will inevitably want a place to talk about it. And when communication is public and accessible, anybody can read past archives to get up to speed and participate.The second reason is for you. If you don’t give people a public place to talk about your project, they will likely contact you directly. In the beginning, it may seem easy enough to respond to private messages “just this once”. But over time, especially if your project becomes popular, you will feel exhausted. Resist the temptation to communicate with people about your project in private. Instead, direct them to a designated public channel.Public communication can be as simple as directing people to open an issue instead of emailing you directly or commenting on your blog. You could also set up a mailing list, or create a Twitter account, Slack, or IRC channel for people to talk about your project. Or try all of the above!Kubernetes kops sets aside office hours every other week to help community members:  Kops also has time set aside every other week to offer help and guidance to the community. Kops maintainers have agreed to set aside time specifically dedicated to working with newcomers, helping with PRs, and discussing new features.Notable exceptions to public communication are: 1) security issues and 2) sensitive code of conduct violations. You should always have a way for people to report these issues privately. If you don’t want to use your personal email, set up a dedicated email address.Growing your communityCommunities are extremely powerful. That power can be a blessing or a curse, depending on how you wield it. As your project’s community grows, there are ways to help it become a force of construction, not destruction.Don’t tolerate bad actorsAny popular project will inevitably attract people who harm, rather than help, your community. They may start unnecessary debates, quibble over trivial features, or bully others.Do your best to adopt a zero-tolerance policy towards these types of people. If left unchecked, negative people will make other people in your community uncomfortable. They may even leave.    The truth is that having a supportive community is key. I’d never be able to do this work without the help of my colleagues, friendly internet strangers, and chatty IRC channels. (…) Don’t settle for less. Don’t settle for assholes.  — @karissa, “How to Run a FOSS Project”  Regular debates over trivial aspects of your project distracts others, including you, from focusing on important tasks. New people who arrive to your project may see these conversations and not want to participate.When you see negative behavior happening on your project, call it out publicly. Explain, in a kind but firm tone, why their behavior is not acceptable. If the problem persists, you may need to ask them to leave. Your code of conduct can be a constructive guide for these conversations.Meet contributors where they’re atGood documentation only becomes more important as your community grows. Casual contributors, who may not otherwise be familiar with your project, read your documentation to quickly get the context they need.In your CONTRIBUTING file, explicitly tell new contributors how to get started. You may even want to make a dedicated section for this purpose. Django, for example, has a special landing page to welcome new contributors.In your issue queue, label bugs that are suitable for different types of contributors: for example, “first timers only”, “good first issue”, or “documentation”. These labels make it easy for someone new to your project to quickly scan your issues and get started.Finally, use your documentation to make people feel welcome at every step of the way.You will never interact with most people who land on your project. There may be contributions you didn’t receive because somebody felt intimidated or didn’t know where to get started. Even a few kind words can keep someone from leaving your project in frustration.For example, here’s how Rubinius starts its contributing guide:  We want to start off by saying thank you for using Rubinius. This project is a labor of love, and we appreciate all of the users that catch bugs, make performance improvements, and help with documentation. Every contribution is meaningful, so thank you for participating. That being said, here are a few guidelines that we ask you to follow so we can successfully address your issue.Share ownership of your project    Your leaders will have different opinions, as all healthy communities should! However, you need to take steps to ensure the loudest voice doesn’t always win by tiring people out, and that less prominent and minority voices are heard.  — @sarahsharp, “What makes a good community?”  People are excited to contribute to projects when they feel a sense of ownership. That doesn’t mean you need to turn over your project’s vision or accept contributions you don’t want. But the more you give credit to others, the more they’ll stick around.See if you can find ways to share ownership with your community as much as possible. Here are some ideas:  Resist fixing easy (non-critical) bugs. Instead, use them as opportunities to recruit new contributors, or mentor someone who’d like to contribute. It may seem unnatural at first, but your investment will pay off over time. For example, @michaeljoseph asked a contributor to submit a pull request on a Cookiecutter issue below, rather than fix it himself.      Start a CONTRIBUTORS or AUTHORS file in your project that lists everyone who’s contributed to your project, like Sinatra does.        If you’ve got a sizable community, send out a newsletter or write a blog post thanking contributors. Rust’s This Week in Rust and Hoodie’s Shoutouts are two good examples.        Give every contributor commit access. @felixge found that this made people more excited to polish their patches, and he even found new maintainers for projects that he hadn’t worked on in awhile.        If your project is on GitHub, move your project from your personal account to an Organization and add at least one backup admin. Organizations make it easier to work on projects with external collaborators.  The reality is that most projects only have one or two maintainers who do most of the work. The bigger your project, and the bigger your community, the easier it is to find help.While you may not always find someone to answer the call, putting a signal out there increases the chances that other people will pitch in. And the earlier you start, the sooner people can help.    [It’s in your] best interest to recruit contributors who enjoy and who are capable of doing the things that you are not. Do you enjoy coding, but not answering issues? Then identify those individuals in your community who do and let them have it.  — @gr2m, “Welcoming Communities”  Resolving conflictsIn the early stages of your project, making major decisions is easy. When you want to do something, you just do it.As your project becomes more popular, more people will take interest in the decisions you make. Even if you don’t have a big community of contributors, if your project has a lot of users, you’ll find people weighing in on decisions or raising issues of their own.For the most part, if you’ve cultivated a friendly, respectful community and documented your processes openly, your community should be able to find resolution. But sometimes you run into an issue that’s a bit harder to address.Set the bar for kindnessWhen your community is grappling with a difficult issue, tempers may rise. People may become angry or frustrated and take it out on one another, or on you.Your job as a maintainer is to keep these situations from escalating. Even if you have a strong opinion on the topic, try to take the position of a moderator or facilitator, rather than jumping into the fight and pushing your views. If someone is being unkind or monopolizing the conversation, act immediately to keep discussions civil and productive.    As a project maintainer, it’s extremely important to be respectful to your contributors. They often take what you say very personally.  — @kennethreitz, “Be Cordial or Be on Your Way”  Other people are looking to you for guidance. Set a good example. You can still express disappointment, unhappiness, or concern, but do so calmly.Keeping your cool isn’t easy, but demonstrating leadership improves the health of your community. The internet thanks you.Treat your README as a constitutionYour README is more than just a set of instructions. It’s also a place to talk about your goals, product vision, and roadmap. If people are overly focused on debating the merit of a particular feature, it may help to revisit your README and talk about the higher vision of your project. Focusing on your README also depersonalizes the conversation, so you can have a constructive discussion.Focus on the journey, not the destinationSome projects use a voting process to make major decisions. While sensible at first glance, voting emphasizes getting to an “answer,” rather than listening to and addressing each other’s concerns.Voting can become political, where community members feel pressured to do each other favors or vote a certain way. Not everybody votes, either, whether it’s the silent majority in your community, or current users who didn’t know a vote was taking place.Sometimes, voting is a necessary tiebreaker. As much as you are able, however, emphasize “consensus seeking” rather than consensus.Under a consensus seeking process, community members discuss major concerns until they feel they have been adequately heard. When only minor concerns remain, the community moves forward. “Consensus seeking” acknowledges that a community may not be able to reach a perfect answer. Instead, it prioritizes listening and discussion.    Part of the reason why a voting system doesn’t exist for Atom Issues is because the Atom team isn’t going to follow a voting system in all cases. Sometimes we have to choose what we feel is right even if it is unpopular. (…) What I can offer and pledge to do…is that it is my job to listen to the community.  — @lee-dohm on Atom’s decisionmaking process  Even if you don’t actually adopt a consensus seeking process, as a project maintainer, it’s important that people know you are listening. Making other people feel heard, and committing to resolving their concerns, goes a long way to diffuse sensitive situations. Then, follow up on your words with actions.Don’t rush into a decision for the sake of having a resolution. Make sure that everybody feels heard and that all information has been made public before moving toward a resolution.Keep the conversation focused on actionDiscussion is important, but there is a difference between productive and unproductive conversations.Encourage discussion so long as it is actively moving towards resolution. If it’s clear that conversation is languishing or going off-topic, jabs are getting personal, or people are quibbling about minor details, it’s time to shut it down.Allowing these conversations to continue is not only bad for the issue at hand, but bad for the health of your community. It sends a message that these types of conversations are permitted or even encouraged, and it can discourage people from raising or resolving future issues.With every point made by you or by others, ask yourself, “How does this bring us closer to a resolution?”If the conversation is starting to unravel, ask the group, “Which steps should we take next?” to refocus the conversation.If a conversation clearly isn’t going anywhere, there are no clear actions to be taken, or the appropriate action has already been taken, close the issue and explain why you closed it.    Guiding a thread toward usefulness without being pushy is an art. It won’t work to simply admonish people to stop wasting their time, or to ask them not to post unless they have something constructive to say. (…) Instead, you have to suggest conditions for further progress: give people a route, a path to follow that leads to the results you want, yet without sounding like you’re dictating conduct.  — @kfogel, Producing OSS  Pick your battles wiselyContext is important. Consider who is involved in the discussion and how they represent the rest of the community.Is everybody in the community upset about, or even engaged with, this issue? Or is a lone troublemaker? Don’t forget to consider your silent community members, not just the active voices.If the issue does not represent the broader needs of your community, you may just need to acknowledge the concerns of a few people. If this is a recurring issue without a clear resolution, point them to previous discussions on the topic and close the thread.Identify a community tiebreakerWith a good attitude and clear communication, most difficult situations are resolvable. However, even in a productive conversation, there can simply be a difference in opinion on how to proceed. In these cases, identify an individual or group of people that can serve as a tiebreaker.A tiebreaker could be the primary maintainer of the project, or it could be a small group of people who make a decision based on voting. Ideally, you’ve identified a tiebreaker and the associated process in a GOVERNANCE file before you ever have to use it.Your tiebreaker should be a last resort. Divisive issues are an opportunity for your community to grow and learn. Embrace these opportunities and use a collaborative process to move to a resolution wherever possible.Community is the ❤️ of open sourceHealthy, thriving communities fuel the thousands of hours poured into open source every week. Many contributors point to other people as the reason for working - or not working - on open source. By learning how to tap into that power constructively, you’ll help someone out there have an unforgettable open source experience.",
    "url": "/building-community/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/building-community/\">\n      Building Welcoming Communities\n    </a>\n  </h2>\n  <h2 id=\"setting-your-project-up-for-success\">Setting your project up for success</h2>\n\n\n</div>\n"
  },

  
  "/code-of-conduct/": {
    "title": "Your Code of Conduct",
    "content": "Why do I need a code of conduct?A code of conduct is a document that establishes expectations for behavior for your project’s participants. Adopting, and enforcing, a code of conduct can help create a positive social atmosphere for your community.Codes of conduct help protect not just your participants, but yourself. If you maintain a project, you may find that unproductive attitudes from other participants can make you feel drained or unhappy about your work over time.A code of conduct empowers you to facilitate healthy, constructive community behavior. Being proactive reduces the likelihood that you, or others, will become fatigued with your project, and helps you take action when someone does something you don’t agree with.Establishing a code of conductTry to establish a code of conduct as early as possible: ideally, when you first create your project.In addition to communicating your expectations, a code of conduct describes the following:  Where the code of conduct takes effect (only on issues and pull requests, or community activities like events?)  Whom the code of conduct applies to (community members and maintainers, but what about sponsors?)  What happens if someone violates the code of conduct  How someone can report violationsWherever you can, use prior art. The Contributor Covenant is a drop-in code of conduct that is used by over 40,000 open source projects, including Kubernetes, Rails, and Swift.The Django Code of Conduct and the Citizen Code of Conduct are also two good code of conduct examples.Place a CODE_OF_CONDUCT file in your project’s root directory, and make it visible to your community by linking it from your CONTRIBUTING or README file.Deciding how you’ll enforce your code of conduct  A code of conduct that isn’t (or can’t be) enforced is worse than no code of conduct at all: it sends the message that the values in the code of conduct aren’t actually important or respected in your community.  — Ada Initiative  You should explain how your code of conduct will be enforced before a violation occurs. There are several reasons to do so:      It demonstrates that you are serious about taking action when it’s needed.        Your community will feel more reassured that complaints actually get reviewed.        You’ll reassure your community that the review process is fair and transparent, should they ever find themselves investigated for a violation.  You should give people a private way (such as an email address) to report a code of conduct violation and explain who receives that report. It could be a maintainer, a group of maintainers, or a code of conduct working group.Don’t forget that someone might want to report a violation about a person who receives those reports. In this case, give them an option to report violations to someone else. For example, @ctb and @mr-c explain on their project, khmer:  Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by emailing khmer-project@idyll.org which only goes to C. Titus Brown and Michael R. Crusoe. To report an issue involving either of them please email Judi Brown Clarke, Ph.D. the Diversity Director at the BEACON Center for the Study of Evolution in Action, an NSF Center for Science and Technology.*For inspiration, check out Django’s enforcement manual (though you may not need something this comprehensive, depending on the size of your project).Enforcing your code of conductSometimes, despite your best efforts, somebody will do something that violates this code. There are several ways to address negative or harmful behavior when it comes up.Gather information about the situationTreat each community member’s voice as important as your own. If you receive a report that someone violated the code of conduct, take it seriously and investigate the matter, even if it does not match your own experience with that person. Doing so signals to your community that you value their perspective and trust their judgment.The community member in question may be a repeat offender who consistently makes others feel uncomfortable, or they may have only said or done something once. Both can be grounds for taking action, depending on context.Before you respond, give yourself time to understand what happened. Read through the person’s past comments and conversations to better understand who they are and why they might have acted in such a way. Try to gather perspectives other than your own about this person and their behavior.  Don’t get pulled into an argument. Don’t get sidetracked into dealing with someone else’s behavior before you’ve finished dealing with the matter at hand. Focus on what you need.  — Stephanie Zvan, “So You’ve Got Yourself a Policy. Now What?”  Take appropriate actionAfter gathering and processing sufficient information, you’ll need to decide what to do. As you consider your next steps, remember that your goal as a moderator is to foster a safe, respectful, and collaborative environment. Consider not only how to deal with the situation in question, but how your response will affect the rest of your community’s behavior and expectations moving forward.When somebody reports a code of conduct violation, it is your, not their, job to handle it. Sometimes, the reporter is disclosing information at great risk to their career, reputation, or physical safety. Forcing them to confront their harasser could put the reporter in a compromising position. You should handle direct communication with the person in question, unless the reporter explicitly requests otherwise.There are a few ways you might respond to a code of conduct violation:      Give the person in question a public warning and explain how their behavior negatively impacted others, preferably in the channel where it occurred. Where possible, public communication conveys to the rest of the community that you take the code of conduct seriously. Be kind, but firm in your communication.        Privately reach out to the person in question to explain how their behavior negatively impacted others. You may want to use a private communication channel if the situation involves sensitive personal information. If you communicate with someone privately, it’s a good idea to CC those who first reported the situation, so they know you took action. Ask the reporting person for consent before CCing them.  Sometimes, a resolution cannot be reached. The person in question may become aggressive or hostile when confronted or does not change their behavior. In this situation, you may want to consider taking stronger action. For example:      Suspend the person in question from the project, enforced through a temporary ban on participating in any aspect of the project        Permanently ban the person from the project  Banning members should not be taken lightly and represents a permanent and irreconcilable difference of perspectives. You should only take these measures when it is clear that a resolution cannot be reached.Your responsibilities as a maintainerA code of conduct is not a law that is enforced arbitrarily. You are the enforcer of the code of conduct and it’s your responsibility to follow the rules that the code of conduct establishes.As a maintainer you establish the guidelines for your community and enforce those guidelines according to the rules set forth in your code of conduct. This means taking any report of a code of conduct violation seriously. The reporter is owed a thorough and fair review of their complaint. If you determine that the behavior that they reported is not a violation, communicate that clearly to them and explain why you’re not going to take action on it. What they do with that is up to them: tolerate the behavior that they had an issue with, or stop participating in the community.A report of behavior that doesn’t technically violate the code of conduct may still indicate that there is a problem in your community, and you should investigate this potential problem and act accordingly. This may include revising your code of conduct to clarify acceptable behavior and/or talking to the person whose behavior was reported and telling them that while they did not violate the code of conduct, they are skirting the edge of what is expected and are making certain participants feel uncomfortable.In the end, as a maintainer, you set and enforce the standards for acceptable behavior. You have the ability to shape the community values of the project, and participants expect you to enforce those values in a fair and even-handed way.Encourage the behavior you want to see in the world 🌎When a project seems hostile or unwelcoming, even if it’s just one person whose behavior is tolerated by others, you risk losing many more contributors, some of whom you may never even meet. It’s not always easy to adopt or enforce a code of conduct, but fostering a welcoming environment will help your community grow.",
    "url": "/code-of-conduct/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/code-of-conduct/\">\n      Your Code of Conduct\n    </a>\n  </h2>\n  <h2 id=\"why-do-i-need-a-code-of-conduct\">Why do I need a code of conduct?</h2>\n\n\n</div>\n"
  },

  
  "/es/best-practices/": {
    "title": "Buenas Pr&amp;aacute;cticas para Mantenedores de C&amp;oacute;digo.",
    "content": "¿Qué significa ser un mantenedor de código?Si tu trabajo es mantener un proyecto de código abierto que mucha gente usa, probablemente te hayas percatado que pasas más tiempo respondiendo issues que programando.En etapas tempranas de un proyecto, pasas tiempo experimentando con ideas nuevas y tomando decisiones en base a lo que te gusta. A medida que tu proyecto crece en popularidad, te encontrarás en una situación en la que trabajarás con tus usuarios y colaboradores cada vez más.Mantener un proyecto requiere más que solamente código. Estas tareas no suelen ser tenidas en cuenta, pero son igual de importantes para un proyecto en crecimiento. Hemos reunido algunas ideas que harán tu vida más fácil, desde el proceso de documentación hasta sacar el máximo provecho de la comunidad.Documentando tus procesosTomar nota de los procedimientos es una de las mejores prácticas que puedes llevar a cabo como mantenedor de código.Documentar no sólo aclara tu pensamiento, sino que también ayuda a otros a entender lo que necesitas o estás esperando, sin siquiera tener que preguntar.Tomar nota de los procesimientos facilita el hecho de decir que no cuando la propuesta de alguien no encaja en tu contexto. Asi como también hace más fácil que otras personas puedan sumarse y ayudar. Nunca sabes quien podría estar leyendo o usando tu proyecto.Aunque no seas del tipo de persona que escribe párrafos completos, tener los puntos claves anotados es mejor que no tener nada.Dejando en claro la visión de tu proyectoComienza escribiendo los objetivos de tu proyecto. Agrégalos a tu archivo README, o crea un archivo separado llamado VISION. Si existen otros artefactos que puedan ayudar, como un mapa del proyecto, házlos públicos tambiénLlevando una clara, documentada visión te mantiene en foco y ayuda a evitar el mal entendimiento del alcance por parte de otros colaboradores.Por ejemplo, @lord descubrió que tener la visión de un proyecto lo ayudó a darse cuenta que peticiones priorizar. Como un mantenedor de código novato, se lamentó de no ser fiel al alcance del proyecto cuando recibió su primer pedido de funcionalidad por Slate.    Lo intenté. No le puse el esfuerzo necesario para salir adelante con una solución completa. En lugar de una solución a medias, hubiera deseado haber dicho “En este momento no tengo tiempo para eso, pero voy a agregar la funcionalidad a la lista de pendientes a desarrollar en el futuro.”  — @lord, “Tips para mantenedores de código abierto”  Comunicar tus expectativasAlgunas veces puede que sea complicado detallar las reglas para que otra gente pueda contribuir. Puedes llegar a sentir que estás comportándote como un policia o arruinando la diversión para los demás.Escritas y aplicadas de manera justa, sin embargo, las buenas reglas dan poder a los mantenedores de código. Evitan que te arrastren a hacer cosas que no quieres hacer.La mayoría de las personas que se encuentran con tu proyecto no saben nada sobre ti o tus circunstancias. Pueden asumir que te pagan para trabajar en él, especialmente si es algo que usan y dependen regularmente. Tal vez en un momento ponías mucho tiempo en tu proyecto, pero ahora estás ocupado con un nuevo trabajo o algún miembro de la familia.¡Está perfectamente bien! Sólo asegúrate de que la gente lo sepa.Si el mantenimiento de tu proyecto es a tiempo parcial o simplemente ser voluntario, se honesto acerca de cuánto tiempo tienes. Esto no es lo mismo que cuánto tiempo piensas que el proyecto requiere, o cuánto tiempo otros quieren que gastes.Aquí hay algunas reglas que vale la pena anotar:  Cómo se revisa y acepta una contribución (¿Necesitan hacer testing? ¿Alguna plantilla que deban utilizar para las issues?)  Los tipos de contribuciones que acepatarás (¿Sólo quieres ayuda con una parte del código?)  Cuando es apropieado hacer seguimiento (eg. “Puede esperar una respuesta de un mantenedor de código dentro de los próximos 7 días. Si no ha oído nada para entonces, no dude en hacer ping al hilo.”)  Cuanto tiempo dedicas al proyecto (eg. “Sólo invertimos unas 5 horas semanales en este proyecto”)Jekyll, CocoaPods, y Homebrew son algunos ejemplos de proyectos con reglas claras para mantenedores y colaboradores.Mantener la comunicación públicaNo olvides documentar tus interacciones, también. Dondequiera que puedas, mantén la comunicación sobre tu proyecto pública. Si alguien intenta ponerse en contacto contigo en privado para discutir una solicitud de funcionalidad o una necesidad de soporte, hágalo dirigirse educadamente a un canal de comunicación público, como una lista de correo o un rastreador de issues.Si te reúnes con otros mantenedores, o tomas alguna decisión importante en privado, documenta estas conversaciones de manera pública, incluso si sólo estás publicando tus notas.De esa manera, cualquiera que se una a tu comunidad tendrá acceso a la misma información que alguien que ha estado allí durante años.Aprendiendo a decir noHas escrito las cosas. Lo ideal sería que todo el mundo lea tu documentación, pero en realidad, tendrás que recordar a los demás que este conocimiento existe.Tener todo escrito, sin embargo, ayuda a despersonalizar las situaciones cuando necesitas hacer cumplir tus reglas.Decir que no, no es divertido, pero  “Tu contribución no coincide con los criterios de este proyecto” se siente menos personal que “No me gusta tu contribución”.Decir que no, se aplica a muchas situaciones que encontrarás como un mantenedor de código: solicitudes de funcionalidades que no encajan en el alcance, alguien que descarrila una discusión, hacer algún trabajo innecesario para otros.Mantener la conversación amistosaUno de los lugares más importantes en los que practicarás el decir que no, es en tu cola de issues y pull request. Como responsable del proyecto, inevitablemente recibirás sugerencias que no desearás aceptar.Tal vez la contribución cambie el alcance de tu proyecto o no coincida con tu visión. Tal vez la idea es buena, pero la implementación es mala.Independientemente de la razón, es posible manejar con tacto las contribuciones que no cumplen con los estándares de tu proyecto.Si recibes una contribución que no deseas aceptar, tu primera reacción podría ser ignorarla o fingir que no la has visto. Hacerlo podría dañar los sentimientos de la otra persona e incluso desmotivar a otros posibles contribuyentes en tu comunidad.    La clave para manejar el soporte para proyectos de código abierto de gran escala es mantener las issues en movimiento. Intenta evitar tener issues quietas. Si eres un desarrollador de iOS sabes lo frustrante que puede ser enviar radares. Podrías recibir alguna noticia dos años despues, y se les pedirá que vuelvan a intentarlo con la última versión de iOS.  — @KrauseFx, “Escalando comunidades de código abierto”  No dejes abierta una contribución no deseada porque te sientas culpable o quieras ser amable. Con el tiempo, tus issues sin respuesta y PRs hará que trabajar en tu proyecto se sienta mucho más estresante e intimidante.Es mejor cerrar de inmediato las contribuciones que sabes que no quieres aceptar. Si tu proyecto ya sufre de un gran backlog o lista de funcionalidades a implementar, @steveklabnik tiene sugerencias para cómo elegir issues de manera eficiente.En segundo lugar, ignorar las contribuciones envía una señal negativa a tu comunidad. Contribuir a un proyecto puede ser intimidante, especialmente si es la primera vez de alguien. Incluso si no aceptas su contribución, reconocer a la persona detrás de ella y agradecerles por su interés. ¡Es un gran cumplido!Si no quieres aceptar una contribución:  Agradeceles por su contribución.  Explícales por qué no encaja en el alcance del proyecto, y ofrece sugerencias claras para mejorar, si es posible. Sé amable, pero firme.  Comparte información relevante, si la tienes. Si notas peticiones repetidas de cosas que no deseas aceptar, agrégalas a tu documentación para evitar explicar siempre lo mismo.  Cierra la solicitudno deberías necesitar más de 1-2 oraciones para responder. por ejemplo, cuando un usuario de celery reportó un error relacionado a Windows, @berkerpeksag respondió con:celery screenshotSi te aterra la idea de decir que no, no te sientas sólo. Como @jessfraz dice:  He hablado con los mantenedores de código de numerosos proyectos de código abierto diferentes, Mesos, Kubernetes, Chromium, y todos están de acuerdo en que una de las partes más difíciles de ser un mantenedor de código es decir “No” a los parches que no quieres.No te sientas culpable por no querer aceptar la contribución de alguien. La primera regla del código abierto, de acuerdo con @shykes: “No, es temporal; si, es para siempre.” Si bien la empatía con el entusiasmo de otra persona es algo bueno, rechazar una contribución no es lo mismo que rechazar a la persona detrás de ella.En última instancia, si una contribución no es lo suficientemente buena, no estás obligado a aceptarla. Sé amable y receptivo cuando las personas contribuyan a tu proyecto, pero sólo acepta cambios que realmente crees que harán que tu proyecto sea mejor. Cuanto más a menudo practiques diciendo no, más fácil se vuelve. Es una promesa.Sé proactivoPara reducir el volumen de las contribuciones no deseadas en primer lugar, explica el proceso de tu proyecto para presentar y aceptar contribuciones en tu guía de contribución.Si recibes demasiadas contribuciones de baja calidad, exija que los colaboradores hagan un poco de trabajo de antemano, por ejemplo:  Llenar una plantilla o checklist para issues o PRs  Abrir una issue antes de presentar un PRSi no siguen tus reglas, cierra la issue inmediatamente y dirígelos a tu documentación.Si bien este enfoque puede parecer desagradable al principio, ser proactivo es realmente bueno para ambas partes. Reduce la posibilidad de que alguien ponga muchas horas de trabajo desperdiciado en un pull request que no vas a aceptar. Y hace que tu carga de trabajo sea más fácil de manejar.    Idealmente, explícales y en un archivo CONTRIBUTING.md cómo pueden obtener una mejor indicación en el futuro de lo que sería o no aceptado antes de comenzar el trabajo.  — @MikeMcQuaid, “Cerrando Pull Requests amablemente”  A veces, cuando dices que no, tu contribuyente potencial puede molestarse o criticar tu decisión. Si su comportamiento se vuelve hostil, tomar medidas para desactivar la situación o incluso eliminarlos de tu comunidad, si no están dispuestos a colaborar constructivamente.Abrazar el mentoreoTal vez alguien en tu comunidad envíe regularmente contribuciones que no cumplen con los estándares de tu proyecto. Puede ser frustrante para ambas partes pasar repetidamente por el proceso de rechazo.Si ves que alguien está entusiasmado con tu proyecto, pero necesita un poco de práctica, ten paciencia. Explica claramente en cada situación por qué sus contribuciones no cumplen con las expectativas del proyecto. Trata de asignarles una tarea más fácil o menos ambigua, como una issue marcada como “good first issue,” , para entrar en calor. Si tienes tiempo, considera mentorearlos a través de su primera contribución, o encuentra a alguien más en tu comunidad que esté dispuesto a ser mentor de ellos.Aprovechando la comunidadNo tienes que hacer todo tu mismo. ¡La comunidad de tu proyecto existe por una razón! Incluso si aún no tienes una comunidad de contribuidores activa, si tienes muchos usuarios, que trabajen.Compartir la carga de trabajoSi estás buscando a otros para que se sumen, comienza por preguntar alrededor.Cuando veas nuevos contribuyentes haciendo contribuciones repetidas, deberías reconocer su trabajo ofreciéndoles más responsabilidades. Documenta cómo otros pueden alcanzar roles de liderazgo si lo desean.Alentar a otros a compartir la propiedad del proyecto puede reducir en gran medida tu carga de trabajo, como @lmccart descubrió en su proyecto, p5.js.    Estuve diciendo, “Si, cualquier persona puede formar parte, no necesitas tener mucha experiencia en programación […].” Hemos tenido personas incriptas [a eventos] y ahí fue cuando me pregunté: es esto cierto, lo que estuve diciendo? Habrán 40 personas que se presentarán, y no es como si pudiera sentarme con cada uno de ellos…Pero la gente se reunió, y funcionó. tan pronto como una persona lo consiguiera, podría enseñarle a sus vecinos.  —  @lmccart, “¿Qué significa, al fin y al cabo, “Código Abierto”? p5.js Edition”  Si necesitas alejarte de tu proyecto, ya sea por un tiempo o permanentemente, no hay vergüenza en pedirle a alguien más que se haga cargo por tí.Si otras personas son entusiastas acerca de la dirección del proyecto, dales permiso para relizar commits o formalmente entrégale el control a alguien más. Si alguien realizó un fork de tu proyecto y lo está manteniendo activamente en otro lugar, considera enlazar el fork desde tu proyecto original. ¡Es genial que tantas personas quieran que tu proyecto crezca!@progrium encontró que documentar la visión de su proyecto, Dokku, ayudó a esos objetivos a perdurar, incluso después de que se alejó del proyecto:  Escribí una página wiki describiendo lo que quería y por qué lo quería. ¡Por alguna razón me sorprendió que los mantenedores comenzaran a mover el proyecto en esa dirección! ¿Sucedió exactamente cómo lo haría? No siempre. Pero aún así acercó el proyecto a lo que quería.Permite a otros construir las soluciones que necesitanSi un contribuyente potencial tiene una opinión diferente sobre lo que tu proyecto debería hacer, es posible que debas animarlo suavemente a trabajar en su propio fork.Hacer fork de un proyecto no tiene por qué ser una cosa mala. Ser capaz de copiar y modificar proyectos es una de las mejores cosas sobre es código abierto. Alentar a los miembros de su comunidad a trabajar en su propio fork puede proporcionar la salida creativa que necesitan, sin entrar en conflicto con la visión de tu proyecto.    Yo atiendo el 80% de los casos de uso. Si eres uno de los unicornios, por favor, haz un fork de mi trabajo. ¡No me ofenderé! Mis proyectos públicos casi siempre están destinados a resolver los problemas más comunes; Trato de hacer que sea fácil ir más lejos ya sea con un fork de mi trabajo o extendiéndolo.  — @geerlingguy, “Por qué cierro PRs”  Lo mismo se aplica a un usuario que realmente quiere una solución que simplemente no tienes el alcance para construir. Ofrecer APIs y hooks personalizables puede ayudar a otros a satisfacer sus propias necesidades, sin tener que modificar la fuente directamente.@orta encontró que alentando plugins para CocoaPods llevó a “algunas de las ideas más interesantes”:  Es casi inevitable que una vez que un proyecto se hace grande, los mantenedores tienen que ser mucho más conservadores sobre cómo introducir nuevo código. Te vuelves bueno en decir “no”, pero muchas personas tienen necesidades legítimas. Por lo tanto, en su lugar terminas convirtiendo tu herramienta en una plataforma.Traigan a los robotsAsí como hay tareas en las que otras personas pueden ayudarte, también hay tareas que ningún ser humano debería tener que hacer. Los robots son tus amigo. úsalos para hacer tu vida como mantenedor de código más fácil.Exigir pruebas y otras comprobaciones para mejorar la calidad de tu códigoUna de las maneras más importantes de automatizar tu proyecto es realizando testing.El testing ayuda a los contribuyentes a sentirse seguros de que no romperán nada. También facilitan la revisión y aceptación de contribuciones rápidamente. Cuanto más receptivo seas, más comprometida podrá ser tu comunidad.Configura los tests automáticos que se ejecutarán en todas las contribuciones entrantes y asegúrate de que puedan ser ejecutados localmente por los contribuyentes. Requiere que todas las contribuciones de código pasen por los tests antes de que puedan ser enviadas. Ayudará a establecer un estándar mínimo de calidad para todas las solicitudes.Chequeos de estado requerido en GitHub pueden ayudar a asegurar que ningún cambio se fusione sin pasar primero por los tests.Si agregas testing, asegúrate de explicar cómo funcionan en su archivo CONTRIBUTING.    Creo que las pruebas son necesarias para todo código en el que la gente trabaja. Si el código era totalmente y perfectamente correcto, no necesitaría cambios - sólo escribimos código cuando algo está mal, ya sea “Se bloquea” o “Falta tal o cual característica”. Independientemente de los cambios que estés haciendo, las pruebas son esenciales para capturar cualquier regresión que pueda introducir accidentalmente.  — @edunham, “Automatización de la comunidad de Rust”  Utilizar herramientas para automatizar tareas básicas de mantenimientoLa buena noticia sobre el mantenimiento de un proyecto popular es que otros mantenedores probablemente han enfrentado problemas similares y han construido una solución para ello.Existen una variedad de herramientas disponibles para ayudar a automatizar algunos aspectos del trabajo de mantenimiento. Algunos ejemplos:  semantic-release automatiza tus versiones  mention-bot menciona posibles revisores para las rull requests  Danger ayuda a automatizar la revisión de códigoPara informes de errores y otras contribuciones comunes, GitHub posee Plantillas para Issues y Pull Requests, que puedes crear para agilizar la comunicación que recibes. también pueden configurar filtros de correo electrónico para adimistrar las notificaciones de tu correo.Si deseas volverte un poco más avanzado, las guías de estilo pueden estandarizar las contribuciones del proyecto y hacerlas más fáciles de revisar y aceptar.Sin embargo, si tus estándares son demasiado complicados, pueden aumentar las barreras a la contribución. Asegúrate de que sólo estás agregando reglas para facilitar la vida de todos.Si no estás seguro de qué herramientas usar, observe lo que hacen otros proyectos populares, especialmente los de tu ecosistema. Por ejemplo, ¿qué aspecto tiene el proceso de contribución para otros módulos de Node? El uso de herramientas y enfoques similares también hará que tu proceso sea más familiar para sus contribuyentes objetivo.Está bien poner pausaEl trabajo de código abierto una vez te trajo alegría. Tal vez ahora está empezando a hacer que te sientas evasivo o culpable.Tal vez te sientes abrumado o con un creciente sentimiento de temor cuando piensas en tus proyectos. Y mientras tanto, las issues y pull requests se acumulan.El agotamiento es un problema real y omnipresente en el trabajo de código abierto, especialmente entre los mantenedores. Como mantenedor, tu felicidad es un requisito no negociable para la supervivencia de cualquier proyecto de código abierto.Aunque debería darse por sabido, ¡Toma un descanso! No debes esperar hasta que te sientas quemado a tomar unas vacaciones. @brettcannon, un desarrollador de Python, decidió tomar [unas vacaciones de un mes de duración] (http://www.snarky.ca/why-i-took-october-off-from-oss-volunteering) después de 14 años de voluntariado OSS.Al igual que cualquier otro tipo de trabajo, tomar pausas regulares te mantendrá fresco, feliz y emocionado acerca de tu trabajo.    Durante el mantenimiento de WP-CLI, descubrí que tengo que preocuparme por mi felicidad primero, y establecer límites claros en mi participación. El mejor equilibrio que he encontrado es 2-5 horas por semana, como parte de mi horario de trabajo normal. Esto mantiene mi participación una pasión, y de sentirse demasiado como el trabajo. Como priorizo ​​las issues en las que estoy trabajando, puedo hacer progresos regulares en lo que creo que es lo más importante.  — @danielbachhuber, “Mis condolencias, ahora eres el mantenedor de un proyecto de código abierto popular”  A veces, puede ser difícil tomar un descanso del trabajo de código abierto cuando sientes como si todo el mundo te necesitara. La gente puede incluso tratar de hacerte sentir culpable por alejarte.Haz tu mejor esfuerzo para encontrar soporte para sus usuarios y comunidad mientras estés lejos de un proyecto. Si no puedes encontrar el apoyo que necesitas, toma un descanso de todos modos. Asegúrese de comunicar cuando no estés disponible, para que la gente no se sienta confundida por tu falta de capacidad de respuesta.Tomar descansos se aplica a más que sólo vacaciones, también. Si no deseas hacer trabajo de código abierto los fines de semana, o durante las horas de trabajo, comunica esas decisiones a los demás, para que sepan que no deben molestarte.¡Cuídate primero!Mantener un proyecto popular requiere habilidades diferentes que las primeras etapas de crecimiento, pero no es menos gratificante. Como mantenedor, practicarás liderazgo y habilidades personales en un nivel que pocas personas pueden experimentar. Aunque no siempre es fácil de manejar, el establecimiento de límites claros y sólo tomar lo que te hace sentir cómodo te ayudará a mantenerte feliz, actualizado y productivo.",
    "url": "/es/best-practices/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/es/best-practices/\">\n      Buenas Pr&aacute;cticas para Mantenedores de C&oacute;digo.\n    </a>\n  </h2>\n  <h2 id=\"qué-significa-ser-un-mantenedor-de-código\">¿Qué significa ser un mantenedor de código?</h2>\n\n\n</div>\n"
  },

  
  "/es/building-community/": {
    "title": "Construyendo Comunidades de Bienvenida",
    "content": "Configurando tu proyecto para el éxitoAcabas de lanzar tu proyecto, estás pasando la voz, y la gente lo está siguiendo. ¡Genial! Ahora, ¿cómo haces que se queden?Una comunidad de bienvenida es una inversión a futuro a tu proyecto y a tu reputación. Si tu proyecto está recién comenzando a ver sus primeras contribuciones, comienza por dar a los primeros colaboradores una experiencia positiva, y facilítales continuar regresando.Haz que la gente se sienta bienvenidaUna manera de pensar acerca de la comunidad del proyecto es a través de lo que @MikeMcQuaid llama contributor funnel:A medida que construyes tu comunidad, considera cómo álguien que se encuentra en la parte superior del embudo (un usuario potencial) puede teóricamente hacer su camino hacia abajo (un mantenedor activo). Tu objetivo es reducir la fricción en cada etapa de la experiencia del colaborador. Cuando las personas  obtienen victorias fáciles, se sentirán incentivadas a hacer más.Comienza con tu documentación:  Hazlo sencillo para quienes tienen que utilizar el proyecto. Un documento README amigable y códigos de ejemplo claros harán más fácil el comienzo para cualquiera que aterrice en tu proyecto.  Explica claramente cómo contribuir, utilizando un archivo CONTRIBUTING y manteniendo tus problemas al día.Una buena documentación invita a las personas a interactuar con tu proyecto. Eventualmente, álguien abrirá un problema o un pull request.  ¡Cuando álguien nuevo aterrice en tu proyecto, agradécele por su interés! Es suficiente una sola experiencia negativa para que álguien no quiera regresar.  Compórtate de manera sensible. Si no respondes a sus problemas por un mes, lo más probable es que ya se hayan olvidado de tu proyecto.  Tener la mente abierta acerca de los tipos de contribuciones que aceptará. Muchos colaboradores comienzan reportando un error o con un arreglo pequeño. Hay muchas maneras de contribuir con un proyecto. Permite que las personas ayuden de la manera que ellos quieran ayudar.  Si existe alguna contribución con la que estás en desacuerdo, agradécele por su idea y explícale porqué no encaja en la incumbencia del proyecto, enlazando con documentación relevante si la tienes.    Contribuir con código abierto es más fácil para algunos que para otros. Hay mucho miedo de recibir un alarido por no haber hecho algo bien o simplemente por no encajar. (…) Al dar a los colaboradores un lugar para contribuir con aspectos de muy baja competencia técnica (documentación, reducción del contenido web, etc) puedes ayudar a reducir esas preocupaciones significatívamente.  — @mikeal, “Growing a contributor base in modern open source”  La mayoría de los colaboradores con el código abierto son “colaboradores casuales”: personas que contribuyen con un proyecto solo ocasionalmente. Un colaborador casual probablemente no disponga del tiempo para dedicarse a tiempo completo a tu proyecto, por lo que tu trabajo es el de hacer que sea más sencillo para ellos contribuir.Animar a otros colaboradores es también invertir en tí mismo . Cuando brinda poder a sus más grandes seguidores paraa continuar con el trabajo que los mantiene entusiasmados, hay menos presión que si lo hicieras tu mismo.Documenta todo    ¿Alguna vez viste un evento (técnico) en donde no conozcas a nadie, pero todos los demás parece que se encuentran en grupos y conversan como viejos amigos? (…) Ahora imagínate queriendo contribuir con un proyecto de código abierto, pero no distingues porqué o cómo esto está sucediendo.  — @janl, “Código abierto sostenible”  Cuando comienzas un proyecto, mantener tu trabajo en privado puede sentirse natural. Pero los proyectos de código abierto avanzan mucho más cuando procesas tu documento en público.Cuando escribes las cosas, más personas pueden participar en cada paso del camino. Puedes necesitar ayuda o algo que todavía no sabes que necesitas.Escribir las cosas significa mucho más que documentación técnica. Cada vez que sientas la necesidad de escribir algo o de discutir tu proyecto de manera privada, pregúntate si puedes hacerlo públicamente.Mantente transparente acerca de la hoja de ruta de tu proyecto, los tipos de contribuciones que estás buscando, cómo se revisa el trabajo de quienes contribuyan o porqué tomas determinadas decisiones.Si ves que varios usuarios están trabajando en el mismo problema, documenta sus respuestas en el README.Para las reuniones, considera publicar tus notas o carteles en un asunto relevante. La retroalimentación que obtendrás de este nivel de transparencia te sorprenderáDocumentar todo también se aplica al trabajo que tu haces. Si estás trabajando en una actualización sustancial de tu proyecto, ponlo en un pull request y márcalo como trabajo en proceso (WIP, work in progress por sus siglas en inglés). De esa manera, otras personas se pueden sentir involucradas en el proceso desde tempranoCompórtate de manera sensibleA medida que promocionas tu proyecto,las personas te harán llegar sus comentarios. Pueden tener preguntas acerca de cómo funcionan las cosas, o necesitar ayuda para comenzarTrata de responder cuando álguien presenta un problema, envía un pull request o realiza una pregunta acerca de tu proyecto. Cuando respondes rápidamente, logras que las personas se sientan parte del diálogo, y estarán más entusiasmadas de participar.Incluso si no puedes revisar su solicitud inmediatamente, con solo agradecer su temprana ayuda incrementará su compromiso. Así es como @tdreyno respondió a un pull request en Middleman:Un estudio de Mozilla encontró que los colaboradores que reciben una revisión de su código dentro de las 48 horas tienen una significativa mayor tasa de retornar y de repetir alguna contribución.Las conversaciones acerca de tu proyecto pueden también ocurrir en otros lugares a lo largo de la internet, como en Stack Overflow, Twitter o reddit. Puedes configurar tus notificaciones en cualquiera de esos tres lugares de manera de ser alertado cuando álguien mencione tu proyecto.Brinda a tu comunidad un lugar para congregarseExisten dos razones para brindar a tu comunidad un lugar para congregarse.La primera razón es para ellos. Ayuda a las personas a conocerse. Las personas con intereses comunes querrán inevitablemente  un lugar para hablar de ello. Y cuando la comunicación es pública y accesible, cualquiera puede leer los archivos pasados para ponerse al día y participar.La segunda razón es para tí. Si no brindas a las personas un lugar público para conversar acerca de tu proyecto, probablemente te contactarán directamente. Al comienzo puede no parecer demasiado responder a mensajes privados “sólo por ésta vez”. Pero con el tiempo, especialmente si tu proyecto se hace conocido, te sentirás agotado. Evita la tentación de comunicarte con las personas acerca de tu proyecto en privado. En su lugar, dirígelos al canal público designado.La comunicación pública puede ser tan simple como dirigir a las personas a abrir un tema en lugar de enviarle un correo electrónico a usted directamente o comentar en su blog. Podrías incluso configurar una lista de correos electrónicos, o crear una cuenta en Twitter, Slack o un canal IRC para que las personas puedan comentar sobre tu proyecto. ¡O prueba todo lo anterior!Kubernetes kops tiene tiempo reservado de las horas de oficina para ayudar a los miembros de la comunidad cada dos semanas :  Kops también tiene tiempo reservado cada dos semanas para ofrecer ayuda y guía a la comunidad. Los mantenedores de Kops han acordado reservar tiempo dedicado específicamente a trabajar con los recién llegados, ayudando con PRs y discutiendo nuevas características.Las excepciones notables a la comunicación pública son: 1) cuestiones de seguridad y 2) infracciones sensibles al código de conducta. Siempre deberías encontrar la manera para que las personas reporten estos aspectos de manera privada. Si no quieres utilizar tu correo electrónico privado, configura una cuenta de correo electrónico dedicada.Haciendo crecer tu comunidadLas comunidades son extremadamente poderosas. Ese poder puede ser una bendición o una maldicióni, dependiendo de cómo lo maneje. A medida que la comunidad de tu proyecto crece, existen maneras para ayudar a que se convierta en una fuerza de construcción, no de destrucción.No toleres a los malos actoresCualquier proyecto popular inevitablemente atraerá a personas que perjudican a tu comunidad, en lugar de ayudarla. Pueden comenzar discusiones innecesarias, discutir sobre rasgos triviales o burlarse de otros.Haz todo lo posible para adoptar una política de tolerancia cero hacia este tipo de personas. Si no se controla, las personas negativas harán que otras personas de tu comunidad se sientan incómodas. Incluso pueden irse.    La verdad es que tener una comunidad de apoyo es clave. Nunca hubiera sido capaz de realizar este trabajo sin la ayuda de mis colegas, los extraños de internet que fueron amigables y los canales IRC de conversación. (…) No te conformes con menos. No te conformes con los idiotas.  — @karissa, “How to Run a FOSS Project”  Los debates regulares sobre aspectos triviales de tu proyecto distrae a otros, incluyéndote también a tí, de enfocarte en tareas importantes. Las nuevas personas que llegan a tu proyecto pueden ver estas conversaciones y pueden ó no querer participar.Cuando ves que ocurrre algún comportamiento negativo, haz la observación correspondiente de manera pública. Explícale, en un tono amable, porqué dicho comportamiento no es aceptable. Si el problema persiste, puedes necesitar solicitarle que se retire. Tu código de conducta puede ser una guía constructiva para estas conversaciones.Reúnete con los colaboradores donde ellos estánLa buena documentación solo se vuelve importante a medida que tu comunidad crece. Los colaboradores casuales, quienes no estarían familiarizados con tu proyecto de otra manera, leen tu documentación para entender rápidamente el contexto de lo que necesitas.En tu archivo CONTRIBUTING, indica de manera explícita a los nuevos colaboradores cómo pueden comenzar. Tal vez quieras dedicar incluso una sección para tal propósito. Django, por ejemplo, tiene una página especial para dar la bienvenida a los nuevos colaboradores.En tu cola de asuntos, etiqueta errores que son convenientes para diferentes tipos de colaboradores: por ejemplo, “solo principiantes”, “conveniente para quienes resuelven su primer bug”, o “documentación”. Estas etiquetas hacen que sea más fácil buscar problemas a resolver para alguien nuevo en el proyecto y así poder comenzar.Finalmente, utiliza tu documentación para hacer que las personas se sientan bienvenidas en cada etapa del camino.Nunca vas a interactuar con la mayoría de las personas que se acercan a tu proyecto. Puede haber colaboradores que no recibiste porque álguien se sintió intimidado o no supo cómo comenzar. Incluso algunas palabras amables pueden evitar que esas personas abandonen tu proyecto por verse frustradasPor ejemplo, así es como Rubinius comienza su  guía de contribuciones:/  Queremos comenzar agradeciendo por utilizar Rubinius. Este proyecto es un trabajo de amor, y apreciamos a todos los usuarios que detectan errores, hacen mejoras al rendimiento, y ayudan con su documentación. Cada contribución es significativa, así que gracias por participar. Dicho esto, aquí dejamos algunas pautas que pedimos que sigan para que podamos abordar con éxito su problema.Comparte la propiedad de tu proyecto   Los líderes tendrán diferentes opiniones, como debería ocurrir en todas las comunidades saludables. De todos modos, necesitas tomar algunas medidas para asegurar que las voces más potentes no ganen siempre por haber cansado a los demás, y que también se escuchen las voces menos potentes y minoritarias.  — @sarahsharp, “What makes a good community?”  Las personas se entusiasman por contribuir con proyectos cuando perciben un sentido de pertenencia. Eso no significa que tengas que cambiar la visión de tu proyecto o aceptar contribuciones que no quieres. Pero cuanto más crédito les des a los otros, más se quedarán.Observa si puedes encontrar maneras de compartir la propiedad de tu comunidad tanto como te sea posible. Aquí hay algunas ideas:  Evita corregir errores sencillos (no críticos). En su lugar, utilizalos como oportunidades para reclutar nuevos colaboradores, o mentorear a álguien que quiere contribuir. Puede parecer antinatural al principio, pero tu inversión se verá compensada en el tiempo. Por ejemplo,  @michaeljoseph le pidió a un colaborador que enviara un pull request de un problema detallado a continuación Cookiecutter en lugar de arreglarlo él mismo.      Inicia un archivo de COLABORADORES o AUTORES en tu proyecto que liste a todos los que colaboraron con tu proyecto, como lo hace Sinatra.        Si tienes una comunidad considerable, envía un boletín o escribe un post en un blog agradeciendo a los colaboradores. Rust’s This Week in Rust y Hoodie’s Shoutouts son dos buenos ejemplos.        Da a cada colaborador permiso para hacer commit. @felixge encontró con esto que las personas se entusiasmaran por pulir sus parches, e incluso encontró nuevas personas para mantener proyectos en los que no había trabajado hace tiempo.        Si tu proyecto está alojado en GitHub, mueve tu proyecto desde tu cuenta personal hacia una Organización y agrega al menos un administrador de respaldo. Las Organizaciones hacen que sea más fácil trabajar en proyectos con colaboradores externos.  La realidad es que la mayoría de los proyectos solo tienen una o dos personas que lo mantengan y que hacen la mayoría del trabajo. Mientras más grande sea tu proyecto, y mientras más grande sea tu comunidad, más fácil es encontrar ayuda.Aunque no siempre encuentres quien responda tu pedido, poner una señal por fuera incrementa las probabilidades de que otras personas se presenten. Y mientras más temprano comiences, más pronto las personas podrán ayudar.    [Está entre] tus mayores intereses se encuentra reclutar colaboradores que disfruten y que sean capaces de hacer las cosas que tu no puedes. ¿Te gusta escribir código, pero no responder a los problemas? Entonces identifica aquellos individuos en tu comunidad que lo hacen y permiteles hacer lo suyo.  — @gr2m, “Welcoming Communities”  Resolviendo conflictosEn las primeras etapas de tu proyecto, es bastante fácil tomar decisiones importantes. Cuando quieres hacer algo, simplemente lo haces.A medida que tu proyecto se hace más conocido, más personas tendrán interés en las decisiones que tomes. Incluso si no tienes una gran comunidad de colaboradores, si tu proyecto tiene muchos usuarios, encontrarás personas que pesan en las decisiones o plantean cuestiones propias.En su mayor parte, si has cultivado una comunidad amistosa y que se maneja con respeto y has documentado tu proceso de manera abierta, tu propia comunidad debería tener la habilidad para encontrar una solución. Pero algunas veces te encontrarás con problemas un poco más difíciles de abordar.Fijando la vara para la amabilidadCuando tu comunidad se encuentre lidiando con una cuestión difícil, los ánimos pueden subir. Las personas pueden enojarse o verse frustradas y tomar las críticas como algo personal, incluso provenientes de tí.Tu trabajo como encargado es evitar que estas situaciones escalen. Incluso si tienes una fuerte opinión sobre un tema, trata de mantener una posición de moderador o de facilitador, en lugar de ir a la lucha y empujar tus propios puntos de vista. Si álguien está comportándose de manera poco educada o monopolizando la conversación, actúa inmediatamente para mantener una discusión civilizada y productiva.    Como responsable de un proyecto, es extremadamente importante ser respetuoso con los colaboradores. A menudo toman lo que les dices de manera personal.  — @kennethreitz, “Be Cordial or Be on Your Way”  Otras personas te mirarán como un guía. Da un buen ejemplo. Todavía puedes expresar desacuerdo, tristeza o preocupación, pero de manera calmada.Mantener la calma no es fácil, pero demostrar liderazgo mejora la salud de tu comunidad. Internet te agradece.Trata a tu README como una constituciónTu README es más que un conjunto de instrucciones. También es un lugar para hablar acerca de tus objetivos, visión del producto, y un mapa de ruta. Si las personas están muy centradas en debatir el mérito de un aspecto en particular, puede revisar el README y conversar de una visión más alta de tu proyecto. Centrarse en el README también despersonaliza la conversación, para tener una discusión más constructiva.Enfócate en el viaje, no en el destinoAlgunos proyectos utilizan un proceso de votación para tomar decisiones importantes. Si bien parece sensato a primera vista, la votación pone hincapié en una “respuesta”, más que en escuchar y tratar las preocupaciones de cada uno.La votación se puede volver política, cuando los miembros de la comunidad se sienten presionados para hacerse favores entre ellos o a votar de determinada manera. No todos votan, si existe una mayoría silenciosa en tu comunidad, o existen usuarios que no se enteraron que se estaba llevando a cabo una votación.Algunas veces, la votación se vuelve un desempate necesario. La mayoría de las veces, sin embargo, pone énfasis en la “búsqueda de concenso” más que en concensuar.Bajo un proceso de búsqueda de concenso, los miembros de la comunidad discuten las principales preocupaciones hasta que sienten que fueron escuchadas adecuadamente. Cuando solo quedan preocupaciones menores, la comunidad avanza. La “Búsqueda de Concenso” reconoce que una comunidad puede no ser capaz de alcanzar una respuesta perfecta. En su lugar prioriza el escuchar y la discusión.    Parte de la razón por la que la votación no existe para Cuestiones Atómicas es porque un Grupo Atómico no llevará adelante un sistema de votacíon en todos los casos. Algunas veces tenemos que elegir lo que nos parece correcto incluso aunque no sea popular. (…) Lo que puedo ofrecer y prometo hacer… es escuchar a la comunidad.  — @lee-dohm on Atom’s decisionmaking process  Incluso si no adopta un proceso de búsqueda de concenso, como responsable del proyecto, es importante que las personas sepan que estás escuchando. Hacer que las personas se sientan escuchadas y comprometerte a resolver sus preocupaciones, facilita gran parte del camino para resolver situaciones delicadas. Luego, continúa tus palabras con acciones.No te apresures a tomar una decisión por el bien de tener una solución. Asegúrate de que todos se sientan escuchados y que toda la información se ha hecho pública antes de avanzar hacia una solución.Mantén la conversación centrada en la acciónLa discusión es importante, pero hay una diferencia entre conversaciones productivas e improductivas.Fomenta la discusión siempre y cuando se mueva hacia una solución. Si está claro que la conversación se está extinguiendo o yéndose por las ramas, que las cosas se están haciendo personales o que están discutiendo sobre detalles menores, es tiempo de cerrarla.Permitir que continúen estas conversaciones no solo es malo para un tema en cuestión, sino también para la salud de la comunidad. Esto envía el mensaje que este tipo de conversaciones están permitidas e incluso fomentadas, y puede desalentar a las personas a plantear o resolver problemas futuros.Con cada aspecto que hayas hecho o que hayan hecho otros, pregúntate, “¿Cómo nos acerca ésto a una solución?”Si la conversación comienza a desenredarse, pregunta al grupo, “¿Qué pasos deberíamos tomar?” para reorientar la conversación.Si la conversación claramente no va a ningún lado, no existen acciones claras para tomar, o las acciones correctas ya se llevaron adelante, cierra el tema y explica porqué lo cerraste.    Guiar un tópico hacia algo útil sin ser agresivo es un arte. No funcionará simplemente con llamar la atención a las personas para impedir que continúen perdiendo tiempo, ni pedirles que no publiquen a menos que tengan algo constructivo que decir. (…) En su lugar, debes sugerir condiciones para continuar progresando: brinda a las personas una ruta, un camino a seguir que los lleve al resultado que quieres, pero sin aparentar que les estás dictando una conducta.  — @kfogel, Producing OSS  Elige tus batallas sabiamenteEl contexto es importante. Considera quién está involucrado en una discusión y cómo representa ésta al resto de la comunidad.¿Están todos en la comunidad molestos, o incluso involucrados en un problema? ¿O es un provocador solitario? No te olvides de considerar a los miembros silenciosos de la comunidad, no solo a las voces activas.Si el problema no representa las necesidades más amplias de tu comunidad, tal vez solo necesites agradecer las preocupaciones de algunas personas. Si se trata de un problema recurrente sin una solución clara, dirige el foco a discusiones previas y cierra el hilo de discusión.Identifica a un decisor de la comunidadCon una buena actitud y una clara comunicación, es posible resolver la mayoría de las situaciones difíciles. Sin embargo, incluso en una discusión productiva, simplemente pueden haber diferencias de opinión sobre cómo proceder. En esos casos, identifica un individuo o un grupo de personas que puedan actuar como decisivas.Un decisor puede ser un responsable primario del proyecto, o podría ser un pequeño grupo de personas que toman una decisión en base a votación. Idealmente, habrás identificado un decisor y el proceso asociado en un archivo llamado GOVERNANCE antes de que necesites utilizarlo.Tu decisor debería ser tu último recurso. Los temas que dividen son una oportunidad de crecer y aprender para tu comunidad. Aprovecha esas oportunidades y utiliza un proceso colaborativo para moverte hacia una solución cada vez que sea posible.La comunidad es el ❤️ del código abiertoLas comunidades sanas y prósperas alimentan las miles de horas que se producen cada semana de código abierto. Muchos colaboradores señalan a otras personas como la razón para trabajar -o para no trabajar- en código abierto. Al aprender a aprovechar ese poder de manera constructiva, ayudarás a que álguien tenga una inolvidable experiencia con el código abierto.",
    "url": "/es/building-community/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/es/building-community/\">\n      Construyendo Comunidades de Bienvenida\n    </a>\n  </h2>\n  <h2 id=\"configurando-tu-proyecto-para-el-éxito\">Configurando tu proyecto para el éxito</h2>\n\n\n</div>\n"
  },

  
  "/es/code-of-conduct/": {
    "title": "Tu C&amp;oacute;digo de Conducta",
    "content": "Por qué es necesario un código de conductaUn código de conducta es un documento que establece expectativas de comportamiento para los participantes de tu proyecto. Adoptar, y aplicar, un código de conducta, ayuda a crear una atmosfera social positiva para la comunidad.Los códigos de conducta ayudan a proteger no solo a tus participantes, sino también a ti mismo. Si mantienes un proyecto, sabrás que las actitudes improductivas de otros participantes pueden hacerte sentir sin energía o infeliz acerca de tu trabajo.Un código de conducta te alienta a facilitar un comportamiento saludable y constructivo por parte de la comunidad. Ser proactivo reduce la probabilidad de que tanto tú, como otros, se sientan fatigados con el proyecto, y te ayuda a tomar acción cuando alguien hace algo con lo que no concuerdas.Estableciendo un código de conductaIntenta establecer un código de conducta tan tempranamente como sea posible: idealmente, cuando crees tú proyecto.Además de comunicar tus expectativas, un código de conducta describe lo siguiente:  Donde el código de conducta toma efecto (¿solamente en las issues y pull requests, o en actividades de la comunidad como eventos?)  A quien o quienes aplica el código de conducta (miembros de la comunidad y responsables de mantenimiento, pero ¿Qué hay acerca de los sponsors?)  Que sucede si alguien viola el código de conducta  De qué manera alguien puede reportar una violaciónSiempre que sea posible, haga uso del art. El Contributor Covenant es un código de conducta usado por más de 40,000 proyectos de software libre, incluyendo Kubernetes, Rails, and Swift.El Django Code of Conduct y el Citizen Code of Conduct son también dos ejemplos de buenos códigos de conducta.Ubica un archivo CODIGO_DE_CONDUCTA en el directorio raíz de tu proyecto, y enlázalo desde tu LEEME, así el mismo se encuentra visible a tu comunidad.Decidiendo de qué manera vas a aplicar tu código de conducta  Un código de conducta que no es (o no puede) ser aplicado, es incluso peor que no tener un código de conducta: Esto demostraría que los valores en el código de conducta no son importantes o no son respetados en tu comunidad.  — Ada Initiative  Deberías explicar de qué manera tu código de conducta va a ser aplicado antes de que una violación ocurra. Hay varios motivos para ello:      Esto demuestra que eres serio acerca de tomar acciones cuando sea necesario.        Tu comunidad se sentirá más segura de que sus reclamos son realmente revisados.        Brindaras a tu comunidad la seguridad de que el proceso de revisión es justo y transparente, en el caso en que se encuentren siendo investigados por una violación.  Deberías brindar a las personas, una manera privada (por ejemplo, mediante una dirección de email) de reportar una violación al código de conducta y explicar quién recibe dicho reporte. Puede ser un responsable de mantenimiento, un grupo de tales responsables, o un grupo de trabajo de código de conducta.Recuerda que alguien puede que desee reportar una violación acerca de la persona que recibe dichos reportes. En tal caso, bríndales la posibilidad de que dichos reportes, sean revisados por alguien más. Por ejemplo, @ctb y @mr-c explican en su proyecto, khmer:  Instancias de abuso, acoso o similares comportamientos inaceptables pueden ser reportados mandando un email a khmer-project@idyll.org el cual solamente se dirigirá a C. Titus Brown and Michael R. Crusoe. Para reportar una cuestión que involucra a ambos, por favor envía un email a Judi Brown Clarke, Ph.D. el Director de Diversidad en el BEACON Center for the Study of Evolution in Action, un centro de la Fundación de Ciencia Nacional para la Ciencia y Tecnologia.*Para inspirarte, mira el manual de ejecución de Django  (aunque quizás no necesites algo tan amplio, dependiendo del tamaño de tu proyecto).Aplicando tu código de conductaEn ocasiones, a pesar de tus mayores esfuerzos, alguien hará algo que violara este código. Existen diferentes maneras de abordar el comportamiento negativo o dañino en la práctica.Recolectar información acerca de la situaciónOtórgale la importancia a lo que cada miembro de la comunidad tiene para decir como se la darías a lo que tú tienes para decir. Si recibes un reporte de que alguien ha violado el código de conducta, tómatelo seriamente e investiga el asunto, incluso si no condice con tu experiencia con dicha persona. De esta manera, demuestras a tu comunidad que valoras su perspectiva y confías en su juicio.El miembro de la comunidad puede ser un reincidente quien constantemente hace sentir incomodos a los demás o puede haber hecho o dicho algo por única vez. En ambas situaciones podemos tomar acciones, dependiendo del contexto.Antes de que respondas, tómate tu tiempo para entender lo que sucedió. Lee los comentarios y conversaciones pasados de la persona para entender mejor quienes son y por qué podrían haber actuado de tal manera. Intenta recolectar perspectivas de otros acerca de dicha persona y su comportamiento.  No entres en discusiones. No se desvíe a tratar con el comportamiento de otra persona antes de que haya terminado de tratar con el asunto en cuestión. Enfócate en lo que necesitas.  — Stephanie Zvan, “So You’ve Got Yourself a Policy. Now What?”  Toma acciones apropiadasLuego de recolectar y procesar suficiente información, necesitaras decidirte que hacer. Mientras consideras tus siguientes pasos, recuerda que tu objetivo como moderador es fomentar un ambiente seguro, respetuoso y colaborativo. Considera no solamente como tratar la situación en cuestión, sino también como tu respuesta afectara al comportamiento y expectativas del resto de tu comunidad.Cuando alguien reporta una violación al código de conducta, es tu trabajo ocuparte de ella, y no de otra persona. A veces, quien reporta está revelando la información con gran riesgo para su carrera, reputación o integridad física. Forzarlos a confrontar a su acosador puede poner en una posición comprometedora a quien reporta. Debes comunicarte de manera directa con la persona en cuestión, a menos que quien reporta explícitamente solicite lo contrario.Existen varias maneras de responder a una violación del código de conducta:      Dar a la persona en cuestión una advertencia pública y explicarle de que manera su comportamiento ha impactado negativamente en los demás, preferiblemente en el canal en donde ocurrió. Siempre que sea posible, la comunicación pública transmite a la comunidad la seriedad con la que consideras al código de conducta. Se amable, pero firme, en la manera en que te comunicas.        Acercarse de forma privada a la persona en cuestión para explicarle de que manera su comportamiento impacto negativamente en los demás. Puedes usar un canal de comunicación privado si la situación involucra información personal. Si te comunicas de manera privada con alguien, es una buena idea realizar una copia carbón a los primeros que hayan reportado la situación, de esta manera sabrán que tomaste acciones. Pídele consentimiento a quien reporta antes de enviarle una copia carbón.  En ocasiones, no es posible lograr una solución. La persona en cuestión puede volverse agresiva y hostil cuando sea confrontada o puede que no cambie su comportamiento. Frente a esta situación, deberías considerar tener en cuenta medidas más fuertes. Por ejemplo:      Suspender a la persona en cuestión del proyecto, aplicando una prohibición en la participación en todo aspecto del proyecto.        Expulsar permanentemente a la persona del proyecto.  La expulsión de miembros no debe ser tomado a la ligera y representa una permanente e irreconciliable diferencia de perspectiva. Deberías tomar estas medidas solamente cuando es evidente que no puede llegarse a una solución.Tus responsabilidades como responsable de mantenimientoUn código de conducta no es una ley aplicada arbitrariamente. Tú eres quien aplica el código de conducta y es tu responsabilidad seguir las reglas que el código de conducta establece.Como encargado de mantenimiento, tú estableces las directrices de tu comunidad y las aplicas de acuerdo a las reglas establecidas en tu código de conducta. Esto implica considerar seriamente a cualquier violación al código de conducta. Quien reporta merece una justa y total revisión de su reclamo. Si determinas que el comportamiento reportado no es una violación, comunícate de manera clara con ellos y explícales por qué no tomaras ninguna acción. Lo que hacen con eso depende de ellos: tolerar el comportamiento con el cual tenían un problema, o dejar de participar en la comunidad.Un reporte de comportamiento que técnicamente no viola el código de conducta puede indicar que hay un problema en tu comunidad, y deberías investigar este problema potencial y actuar acorde. Esto puede incluir revisar tu código de conducta para clarificar comportamientos aceptables y/o hablar con la persona cuyo comportamiento fue reportado y explicarles que si bien no han violado el código de conducta, están rozando el borde de lo que se espera y están haciendo sentir incomodos a ciertos participantes.Finalmente, como responsable de mantenimiento, tú estableces y aplicas los estándares de comportamiento aceptable. Tienes la habilidad para moldear los valores de la comunidad del proyecto, y los participantes cuentan con que apliques dichos valores de manera justa e imparcial.Promover el comportamiento que quieres ver en el mundo 🌎Cuando un proyecto parece hostil y poco acogedor, incluso cuando se trata solamente de una persona cuyo comportamiento es tolerado por los demás, te arriesgas a perder mucho más contribuidores, algunos de los cuales quizás no conozcas jamás. No siempre es fácil adoptar o aplicar un código de conducta, pero fomentar un ambiente acogedor ayudara a que tu comunidad crezca.",
    "url": "/es/code-of-conduct/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/es/code-of-conduct/\">\n      Tu C&oacute;digo de Conducta\n    </a>\n  </h2>\n  <h2 id=\"por-qué-es-necesario-un-código-de-conducta\">Por qué es necesario un código de conducta</h2>\n\n\n</div>\n"
  },

  
  "/es/finding-users/": {
    "title": "Encontrando Usuarios Para Tu Proyecto",
    "content": "Pasando la vozNo existe ninguna regla que diga que debes fomentar un proyecto de código abierto cuando lo comienzas. Existen muchas razones satisfactorias para trabajar en código abierto que no tienen nada relacionado con la popularidad. Si esperas que otros encuentren y usen tu proyecto de código abierto, sin embargo, ¡es momento para decirles a todos acerca de tu arduo trabajo!Pensando tu mensajeAntes de comenzar el verdadero trabajo de promover tu proyecto, deberías ser capaz de explicar qué es lo que hace, y porqué importa.¿Qué hace a tu proyecto diferente o interesante? ¿Porqué lo creaste? Respondiendo estas preguntas para tí mismo hará más fácil convencer a los demás.Recuerda que las personas se involucran como usuarios, y eventualmente como contribuyentes, porque resuelve un problema para ellos. Mientras piensas sobre el mensaje para tu proyecto y su valor, trata de verlo a través de los ojos de qué_es_lo_que_ellos_querrían.Por ejemplo, @robb utiliza códigos de ejemplo para comunicar claramente porqué su proyecto, Cartography, es útil:Para una vista más profunda sobre cómo comunicar tu mensaje, puedes ver el ejercicio en Mozilla “Personas and Pathways” para el desarrollo de personas usuario.Ayuda a las personas a encontrar y seguir tu proyecto  Idealmente solo necesitas una URL “home” que puedas promover e indicar a las personas en relación a tu proyecto. No es necesario gastar en una plantilla de lujo o incluso un nombre de dominio, pero tu proyecto necesita un punto focal.  — Peter Cooper &amp; Robert Nyman, “How to Spread the Word About Your Code”  Ayuda a las personas a encontrar y recordar tu proyecto indicándoles un solo espacio de nombres.Consigue un gestor claro para promover tu trabajo. Un usuario de Twitter, una URL de GitHub o un canal de IRC son maneras fáciles de indicar a las personas sobre tu proyecto. También le da a la creciente comunidad de tu proyecto un lugar donde reunirse.Si todavía  no deseas establecer estos canales para tu proyecto, promociona en tu usuario personal de Twitter o tu cuenta personal de GitHub todo lo que hagas. Por ejemplo, asegúrate que esté incluído en tu biografía o tus diapositivas si te toca disertar en una reunión o evento. De esa manera, las personas sabrán cómo llegar hasta ti o seguir tu trabajo.   Un error que cometí en los primeros días (…) fue no suscribir una cuenta de Twitter para el proyecto. Twitter es una gran manera de mantener a la gente al día sobre un proyecto, así como exponer constantemente a las personas al mismo.  — @nathanmarz, “History of Apache Storm and Lessons Learned”  Considera crear un sitio web para tu proyecto. Un sitio web hace más amigable a tu proyecto y más fácil de navegar, especialmente cuando se acompaña de documentación clara y de tutoriales. También sugiere que tu proyecto está activo, lo que hará que su audiencia se sienta más confortable usándolo. Utiliza ejemplos para dar a las personas ideas de cómo usar tu proyecto.@adrianholovaty, co-creador of Django, dijo que un sitio web fue “por lejos lo mejor que hicimos con Django en los promeros días”.Si el proyecto está alojado en GitHub, puedes utilizar GitHub Pages para construir un sitio web facilmente.Yeoman, Vagrant, y Middleman son algunos ejemplos de excelentes y completos sitios web.Ahora que ya tienes un mensaje para tu proyecto, y una manera sencilla para que las personas encuentren su proyecto, ¡ve a hablar con tu audiencia!Ve donde está la audiencia de tu proyecto (en línea)El alcance en línea es una gran manera de compartir y diseminar la palabra rápidamenteSaca ventaja de las comunidades en línea existentes y sus plataformas para alcanzar tu audiencia. Si tu proyecto es de codigo abierto es un proyecto de software, probablemente puedas encontrar tu audiencia en Stack Overflow, reddit, Hacker News, o Quora. Encuentra los canales donde pienses que las personas obtendrán los mayores beneficios o se sentirán más entusiasmadas acerca de tu trabajo.  Cada programa tiene funciones muy específicas, que solamente una fracción de los usuarios encontra útil. No envíes masivamente correo a todas las personas posibles. En su lugar, enfoca tus esfuerzos en comunidades que se beneficiarán de conocer sobre tu trabajo.  — @pazdera, “Marketing for open source projects”  Ve si puedes encontrar formas de compartir tu proyecto en maneras relevantes:  Conoce proyectos de código abierto relevantes y comunidades. Algunas veces, no necesitas promocionar tu proyecto directamente. Si tu proyecto es de interés para científicos de datos que utilizan Python, conoce a la comunidad de científicos de datos de Python. A medida que las personas lo conozcan, llegarán oportunidades de conversar y de compartir tu trabajo de manera natural.  Encuentra personas que estén experimentando problemas como el que resuelve tu proyecto. Busca en foros relacionados con personas que caen en la audiencia de tu proyecto. Responde sus preguntas y encuentra una forma diplomática, cuando sea apropiado, de sugerir tu proyecto como una solución.  Pide comentarios. Preséntate y presenta tu trabajo a una audiencia que lo encuentre relevante e interesante. Se específico acerca de quiénes crees que se beneficiarán de tu proyecto. Trata de finalizar la oración: “Creo que mi proyecto realmente ayudará a X, quien está tratando de hacer Y”. Escucha y responde los comentarios, en lugar de simplemente promover tu trabajo.En términos generales, enfócate en ayudar a los demás antes de solicitar cosas a cambio. Ya que es sencillo para cualquiera promover un proyecto en línea. habrá mucho ruido. Da a las personas el contexto de lo que eres, no solo de lo que quieres, para destacarte entre la multitud.Si nadie presta atención o responde a tu alcance inicial, ¡no te desanimes! La mayoría de los lanzamientos de proyectos son un proceso iterativo que puede llevar meses o años. Si no consigues una respuesta la primera vez, prueba con una táctica diferente, o busqua maneras de agregar valor al trabajo de los demás primero. Estas cosas llevan tiempo y dedicación.Ve donde está la audiencia de tu proyecto (fuera de línea)Los eventos fuera de línea son una manera popular de promocionar nuevos proyectos. Es una gran manera de alcanzar una audiencia comprometida y de construir conexiones personales más profundas, especialmente si estás interesado en llegar a los desarrolladores.Si no tienes experiencia para hablar en público, comienza por encontrar una comunidad local de personas que estén relacionados con el lenguaje o ecosistema de tu proyecto.  Estaba muy nerviosa acerca de ir a Pycon. Estaba dando una charla, solo iba a conocer a un par de personas ahí, me iba por una semana entera. (…) No debería haberme preocupado, sin embargo. ¡Pycon fue fenomenalmente increíble! (…). ¡Todos eran increíblemente amigables y extrovertidos, tanto que rara vez encontraba tiempo para no hablar con la gente!  — @jhamrick, “How I learned to Stop Worrying and Love PyCon”  Si nunca hablaste en un evento anteriormente, es perfectamente normal sentirte nervioso. Recuerda que tu audiencia está allí porque genuinamente quieren escuchar acerca de tu trabajo.Mientras escribes tu charla, enfócate en lo que el público pueda encontrar interesante y valioso. Mantén tu lenguaje amigable y accesible. Sonríe, respira y diviértete.   Cuando comienzas a escribir tu charla, sin importar cuál sea tu tópico, puede ser de ayuda ver a tu charla como una historia que le cuentas a la gente.  — Lena Reinhard, “How to Prepare and Write a Tech Conference Talk”  Cuando te sientas listo/a, considera dar una charla en una conferencia para promover tu proyecto. Las conferencias pueden ayudar a alcanzar a más personas, algunas veces de todo el mundo.Busca conferencias que sean específicas de tu lenguaje o ecosistema. Antes que enviar tu charla, investiga la conferencia de antemano, para adaptar tu charla a sus asistentes e incrementar tus oportunidades de ser aceptado. A menudo puedes tener una idea de la audiencia de una conferencia mirando a sus disertantes.    Escribí muy amablemente a la gente de JSConf y les supliqué que me dieran un espacio donde pudiera presentarme en la JSConf EU. (…) Estaba extremadamente asustada, presentando esta cosa en la que había estado trabajando por seis meses. (…) Todo el tiempo estaba pensando ¡Oh Diós mío! ¿Qué estoy haciendo aquí?  — @ry, “History of Node.js” (video)  Construye una reputaciónAdemás de las estrategias mencionadas anteriormente, la mejor forma de invitar a las personas a compartir y contribuir con tu proyecto es compartir y contribuir con sus proyectos.Ayudar a los recién llegados, compartir recursos y hacer contribuciones meditadas al trabajo de los demás ayudará a que construyas una reputación positiva. Entonces, la gente tendrá contexto para su trabajo y será más probable que preste atención y comparta lo que tu estás haciendo.Algunas veces, esas relaciones pueden llevar incluso a asociaciones oficiales con el ecosistema más amplio.    La única razón por la que urllib3 es la librería de Python de terceros más popular es porque es parte de las solicitudes.  — @shazow, “How to make your open source project thrive”  Nunca es demasiado temprano, o muy tarde, para comenzar a construir tu reputación. Incluso si ya lanzaste tu propio proyecto, continúa buscando las formas de ayudar a los demás.No hay una solución para construir una audiencia en una noche. Ganarse la confianza y el respeto de los demás lleva tiempo, y el trabajo de construir la reputación no termina nunca.    PhantomJS fue lanzado por primera vez a comienzos del 2011. (…)  Yo pasé la voz utilizando maneras convencionales: envié posts en Tweeter sobre el mismo, escribí posts en blogs sobre cosas que podían hacerse con él, lo nombré durante varias discuciones en encuentros. Cuando se hizo más conocido en el 2014, comencé a hacer presentaciones sobre él.  — @ariya, “Maintainer Stories”  Síguelo!Algunas veces, lleva mucho tiempo antes de que la gente note tu proyecto de código abierto. ¡Está bien! Algunos de los proyectos más populares de hoy en día, tardaron años en alcanzar altos niveles de actividad. Enfócate en construir relaciones en lugar de una bala mágica. Sé paciente, y continua compartiendo tu trabajo con aquellos que lo aprecian.",
    "url": "/es/finding-users/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/es/finding-users/\">\n      Encontrando Usuarios Para Tu Proyecto\n    </a>\n  </h2>\n  <h2 id=\"pasando-la-voz\">Pasando la voz</h2>\n\n\n</div>\n"
  },

  
  "/es/getting-paid/": {
    "title": "Recibir Pagos por Trabajos en C&amp;oacute;digo Abierto",
    "content": "¿Porqué algunas personas buscan apoyo financiero?La mayor parte del trabajo realizado en proyectos de código abierto es voluntario. Por ejemplo, alguien puede encontrarse con un error en un proyecto que usan y aplican una corrección rápida, o simplemente les puede gustar corregir proyectos de código abierto en su tiempo libre.  Estaba buscando un proyecto de programacion para tenerlo como “hobby” y que me mantuviese ocupado en la semana de navidad. (…) Tenía una computadora de hogar y no mucho más. Decidí escribir un interpretador para un nuevo lenguaje en el que he estado pensando últimamente. (…) Elegí Python como título de mi trabajo.  — @gvanrossum, “Programming Python”  Hay muchas razones por las cuales a una persona no le gustaría que le pagaran por su trabajo en código abierto.  Ellos pueden llegar a tener ya un trabajo de tiempo completo que disfruten, que los habilite a contribuir al código abierto en su tiempo libre.  Les gusta contribuir a los proyectos de código abierto como un hobby o escape creativo y no quieren sentise financieramente obligados a trabajar.  Reciben otros beneficios al contribuir al código abierto, como construir su portfolio de reputación, obtener nuevas habilidades, o sentirse cercanos a una comunidad.    Las donaciones financieras agregan un sentimiento de responsabilidad, para algunos. (…) Es importante para nosotros, en el mundo globalmente conectado y apresurado en el que vivimos, ser capaces de decir: “Espera, no ahora, quiero hacer algo completamente diferente”.  — @alloy, “Why We Don’t Accept Donations”  Para otros, especialmente cuando las contribuciones están en proceso o requieren tiempo significativo, recibir dinero al contribuir al código abierto es la única manera en la que pueden participar. Porque el proyecto lo requiera o por razones personales.Mantener proyectos populares puede ser una responsabilidad significativa, tomando de 10 a 20 horas por semana en vez de un par de horas por mes.    Pregúntale a cualquier responsable de proyecto de código abierto, y te informará sobre la realidad de la cantidad de trabajo que se dedica a la gestión de un proyecto. Tienes clientes. Estas arreglando los problemas para ellos. Estas creando nuevas funciones. Esto se convierte en una demanda real de tu tiempo.  — @ashedryden, “The Ethics of Unpaid Labor and the OSS Community”  El trabajo pago también habilita a todo tipo de personas a aportar significativamente. Algunas no pueden afrontar un trabajo ad-honorem (trabajo gratis) en proyectos de código abierto, ya sea por su posición financiera, deudas, familia u otras responsabilidades. Eso significa que el mundo nunca ve contribuciones de personas talentosas que no pueden donar horas de trabajo. Estas implicaciones éticas como @ashedryden ha descripto, desde que el trabajo hecho es parcialmente en favor de las personas que tienen ventajas en su vida, quienes de vuelta ganan ventajas adicionales basadas en sus contribuciones voluntarias, mientras que otros que no pueden ofrecerse voluntariamente no obtiene nuevas oportunidades, lo cual refuerza la actual falta de diversidad en la comunidad de código abierto.     OSS obtiene beneficios masívos de la industria de la tecnología, que, al mismo tiempo, significa beneficios para todas las industrias. (…) Por otro lado, si las únicas personas que pueden concentrarse en ello son aquellas con suerte y obsesionadas, entonces hay un gran potencial no explotado.  — @isaacs, “Money and Open Source”  Si tu estas buscando apoyo financiero, hay dos posibles caminos a seguir: puedes pagar por tu propio tiempo como contribuyente, o puedes encontrar organizaciones que aporten a tu proyecto.Financiando tu propio tiempoHoy en dia, muchas personas reciben pagos por trabajos part-time o full-time  en código abierto. El modo mas común de recibir una paga por tu tiempo es hablar con tu empleador.Es mas fácil establecer un trabajo en código abierto si tu empleador usa el proyecto, pero ponte creativo. Puede que tu empleador no use el proyecto, pero usan Python, y mantener un proyecto popular de Python puede atraer nuevos desarrolladores de Python. También puede que haga que tu empleador se vea más desarrollador-amigable en general.    Como muchos desarrolladores en proyectos de código abierto, yo estaba esforzándome por seguir manteniendo uno. Cuando por primera vez comencé a aportar a un proyecto, solía quedarme despierto hasta tarde o me ponía a trabajar ni bien llegaba a mi hogar. (…) Fui capaz de discutir con mi jefe los problemas que estaba enfrentando y nos surgieron ideas sobre cómo podríamos incorporar las tareas de código abierto dado nuestro propio uso de Babel.  — @hzoo, “Maintainer Stories”  Si tu no tienes un excitante proyecto de código abierto en el que quisieras trabajar, pero te gustaría que tu actual trabajo genere aportes al código abierto, establece un acuerdo con tu empleador para aportar algo del software interno de la organizacion a la comunidad de código abierto.Muchas empresas están desarrollando programas de código abierto para construir su marca y reclutar talentos de calidad.@hueniverse, por ejemplo, encontró que había razones financieras para justificar la inversión de Walmart al código abierto. Y @jamesgpearce descubrió que el programa de código abierto de Facebook hizo la diferencia en el reclutamiento:  Está alineado con nuestra cultura hacker, y cómo nuestra organizacion era percibida. Le preguntamos a nuestros empleados, “¿Sabías del programa de software de código abierto de Facebook?. Dos tercios dijeron “Sí”. Una mitad dijo que el programa contribuía positivamente en la decisión de trabajar para nosotros. Estos no son números marginales, y, espero, que la moda continúe.Si tu empresa va por esta ruta, es importante mantener clara la relación entre la comunidad y la actividad corporativa. últimamente, el código abierto se mantiene a sí mismo a través de contribuciones de personas de todo el mundo, y eso es mas importante que la empresa o la ubicación de la misma.    Recibir dinero por trabajar en proyectos de código abierto es una rara y hermosa oportunidad, pero no tienes que dejar de lado tu pasión en el proceso. Tu pasión debería ser el porqué las empresas te pagarían a tí.  — @jessfraz, “Blurred Lines”  Si no pueden convencer a tu actual empleador de priorizar un trabajo de código abierto, considera encontrar un nuevo empleador que motive a los empleados a contribuir. Busca empresas que hagan su dedicacíon al código abierto explícita. Por ejemplo:  Algunas empresas, como Netflix o PayPal, tienen paginas web que resaltan su participación en el código abierto.  Rackspace publico su políticas de contribución al código abierto para empleados.Proyectos que se originaron en una empresa grande, como Go o React, serán susceptibles a contratar personas que trabajen en código abierto.Finalmente, dependiendo de tus circunstancias personales, puedes probar generar dinero de forma independiente para financiar tu trabajo de código abierto. Por ejemplo:  @gaearon financio su propio trabajo Redux a través de Patreon crowdfunding campaign  @andrewgodwin financió su trabajo de migración de esquemas de Django a través de una campaña kickstarterEncontrando financiación para tu proyecto.Mas allá de los arreglos con contribuyentes individuales, a veces los proyectos generan dinero de empresas, individuos, u otras para financiar trabajos en proceso.La financiación organizacional podría ir a favor de pagar a los contribuyentes, cubriendo los costos de correr los proyectos (como los costos de hosting), o investigando nuevas funcionalidades o ideas.Mientras aumenta la popularidad de código abierto, encontrar financiación para proyectos sigue siendo experimental, pero hay algunas opciones que comunmente estan disponibles.Genera dinero para trabajo a través de campañas de crowdfunding o sponsors.Encontrar sponsors funciona si tienes una fuerte audiencia o reputación ya establecida, o tu proyecto es muy popular.Algunos ejemplos comunes de proyectos sponsoreados incluyen:  webpack genera dinero de empresas e individuos a través de OpenCollective  Vue es financiado a través de Patreon  Ruby Together, una organización sin fines de lucro que paga por el trabajo en bundler, RubyGems, y otros proyectos de la infraestructura de Ruby.Crea un flujo de ingresos.Dependiendo de tu proyecto, puede que seas capaz de cobrar por soporte comercial o funciones adicionales. Algunos ejemplos incluyen:  Sidekiq ofrecen versiones pagas por soporte adicional.  Travis CI ofrece versiones pagas de su producto.  Ghost es sin fines de lucro con una gestión de servicio paga.Algunos proyectos populares, como npm y Docker, generan capital de riesgo para soportar el crecimiento de su negocio.Suscribete a subvencionesAlgunas fundaciones de software y compañias ofrecen subvenciones por trabajo en código abierto. A veces, las subvenciones puede ser pagadas a individuos sin establecer una entidad legal para el proyecto.  Lee los documentos recibe una subvención del Soporte al código abierto de Mozilla  OpenMRS fue financiado por un retiro de Stripe  Libraries.io recibio una subvención de Sloan Foundation  La fundación de software de Python ofrece subvenciones a trabajos relacionados con Python.Por más opciones y casos de estudio, @nayafia escribió una guía para recibir pagos por trabajos en proyectos de código abierto. Diferentes tipos de financiación requieren diferentes tipos de habilidades, entonces considera tus fortalezas para descubrir que opciones funcionan mejor para ti.Creando un caso de apoyo financieroSin importar si tu proyecto es una nueva idea, o estuvo dando vueltas por años, deberías preveer que tendrás que ponerle mucho esfuerzo en identificar a tu financiador objetivo y construir un caso acorde.Sin importar si estas buscando pagar por tu propio tiempo, o invertir/generar en un proyecto, deberías poder responderte las siguientes preguntas:Impacto¿Porqué es útil este proyecto? ¿Porqué nuestros usuarios, o potenciales usuarios, les gusta tanto? ¿Donde se encontrará dentro de cinco años?AtracciónIntenta recolectar evidencia de que tu proyecto importa, sin importar las metricas, anécdotas, o testimonios. ¿Hay alguna compañía o algún grupo notorio de personas usando tu proyecto ahora mismo? Si no, ¿Hubo alguna persona prominente que lo aprobó?Valor para el financiadorLos financiadores, sin importar si tu empleador o tu fundación generadora de subvenciones, son frecuentemente ofertados con oportunidades. ¿Porqué deberían apoyar tu proyecto por sobre toda otra oportunidad? ¿Como se benefician ellos personalmente?Uso de la financiación¿Qué exactamente lograrás con la financiación propuesta? Concentrate en hitos de proyectos o imprevistos en vez de los pagos de salario.Como recibiras la financiación.¿El financiador tiene algun requisito de como recibiras el dinero? Por ejemplo, puede que necesites ser un sponsor o tener un sponsor fiscal sin fines de lucro. O tal vez la financiación debe ser entraga a un contratador individual en vez de a una organización. Estos requisitos varían entre los financiadores, así que asegurate de hacer averiguaciones de antemano.    Durante años, hemos sido el principal recurso de iconos amigables de sitios web, con una comunidad de más de 20 millones de personas y hemos destacado en más de 70 millones de sitios web, incluyendo Whitehouse.gov. (…) La versión 4 fue hace tres años. La tecnología web ha cambiado mucho desde entonces, y, francamente, Font Awesome se ha vuelto un poco obsoleto. (…) Es por eso que estamos introduciendo Font Awesome 5. Estamos modernizando y reescribiendo el CSS y rediseñando cada icono de arriba hacia abajo. Estamos hablando de mejor diseño, mejor consistencia y mejor legibilidad.  — @davegandy, Font Awesome Kickstarter video  Experimenta y no te rindasRecaudar dinero no es fácil, ya sea un proyecto de código abierto, una organización sin fines de lucro, o un emprendimiento de software, y la mayoría de los casos requieren que seascreativo. Debes identificar cómo quieres que te paguen, debes investigar y debes ponerte en el lugar de tu financiador, de esta manera podrás construir un caso convicente para que te financien.",
    "url": "/es/getting-paid/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/es/getting-paid/\">\n      Recibir Pagos por Trabajos en C&oacute;digo Abierto\n    </a>\n  </h2>\n  <h2 id=\"porqué-algunas-personas-buscan-apoyo-financiero\">¿Porqué algunas personas buscan apoyo financiero?</h2>\n\n\n</div>\n"
  },

  
  "/es/how-to-contribute/": {
    "title": "C&amp;oacute;mo Contribuir con el C&amp;oacute;digo Abierto",
    "content": "¿Para qué contribuir?    Trabajar en [freenode] me ha ayudado a conseguir muchas de las habilidades que luego he usado en mis estudios en la universidad y en mi actual trabajo. ¡Creo que trabajar en proyectos de código abierto me ayuda tanto como ayuda al proyecto!  — @errietta, “Por qué me gusta contribuir con el software de código abierto”  Contribuir en proyectos de código abierto puede ser una provechosa manera de aprender, enseñar, y conseguir experiencia en cualquier habilidad que puedas imaginar.¿Para qué contribuye la gente en proyectos de código abierto? ¡Por muchas razones!Mejora tus habilidades existentesYa sea codificación, diseño interfaces de usuario, diseño gráfico, redacción u organización, si lo que estás buscando es práctica, hay una tarea esperándote en un proyecto de código abierto.Conoce personas que están interesadas en temas similaresLos proyectos de código abierto con comunidades cálidas y acogedoras hacen que la gente regrese a través de los años. Muchas personas forman amistades de por vida a través de su participación en el código abierto, ya sea para presenciar exposiciones en conferencias entre pares o largas conversaciones nocturnas sobre burritos.Encuentra mentores y enseña a otrosTrabajar con otros en un proyecto compartido significa que tendrás que explicar cómo haces las cosas, así como pedir ayuda. Los momentos de aprendizaje y enseñanza pueden ser actividades satisfactorias para todos los involucrados.Construye artefactos públicos que te ayudarán a construir una reputación (y una carrera)Por definición, todo tu código abierto es público, lo que significa que consigues ejemplos de manera gratuita para llevar a cualquier lugar como una demostración de lo que haces.Conoce las habilidades de las personasEl código abierto ofrece oportunidades para practicar habilidades de liderazgo y gestión, a resolver conflictos, organizar equipos  y a priorizar el trabajo.Es poderoso ser capaz de hacer cambios, incluso pequeñosNo necesitas convertirte en un colaborador de toda la vida para disfrutar la participación con el código abierto. ¿Alguna vez viste un error de tipografía, y deseaste que álguien pudiera corregirlo? En un proyecto de código abierto, es justamente lo que puedes hacer. El código abierto ayuda a las personas a sentir acción en sus vidas, en la forma en que experimentan al mundo y eso en si mismo es gratificante.Qué significa contribuirSi eres un colaborador de código abierto nuevo, el proceso puede ser intimidatorio. ¿Cómo encontrar el proyecto adecuado? ¿Qué hacer si no sabes cómo codificar? ¿Qué pasa si algo sale mal?¡No debes preocuparte! Hay todo tipo de formas de involucrarse con un proyecto de código abierto, y unos pocos consejos te ayudarán a sacar el máximo provecho de tu experiencia.No necesitas contribuir con códigoUn error conceptual común acerca de contribuir con el código abierto es que debes contribuir con código. De hecho, son a menudo las otras partes de un proyecto las más descuidadas o pasadas por alto. ¡Le harás un enorme favor al proyecto si te ofreces a trabajar en este tipo de contribuciones!    Me han reconocido por mi trabajo en CocoaPods, pero la mayoría de las personas no conoce que en realidad yo no realizo ningún trabajo real en la propia herramienta CocoaPods. Mi tiempo en el proyecto se dedica principalmente a hacer cosas como documentar y a trabajar en la marca.  — @orta, “Moviéndose al Software de código abierto por defecto”  Incluso si te gusta codificar, otro tipo de contribuciones son una gran manera de involucrarse con un proyecto y conocer a otros miembros de la comunidad. Construir esas relaciones te dará oportunidades de trabajar en otras partes del proyecto.    Llegué por primera vez al equipo de desarrollo de Python (alias python-dev) cuando envié un correo electrónico a su lista de correos el 17 de junio de 2002, aceptando mi parche. Rápidamente me encontré con un error de código abierto, y decidí comenzar a limpiar el resumen de correos electrónicos para el grupo. Me dieron una gran excusa para pedir aclaraciones sobre un tema, pero principalmente pude notar cuándo álguien señalaba algo que necesitaba ser reparado.  — @brettcannon, “Hostorias de un encargado”  ¿Te gusta planificar eventos?  Organiza workshops o reuniones acerca del proyecto, como hizo @fzamperin para NodeSchool  Organiza la conferencia del proyecto (si es que tienen una)  Ayuda a la comunidad de miembros a encontrar las conferencias apropiadas y a presentar propuestas para disertar¿Te gusta diseñar?  Reestructura los diseños para mejorar la usabilidad del proyecto  Dirige la investigación de los usuarios para reorganizar y refinar la navegación del proyecto o sus menús, como lo sugiere Drupal  Reúne una guía de estilos para ayudar al proyecto a tener un diseño con consistencia visual  Crea diseños para las remeras o un nuevo logo, como hicieron los colaboradores de hapi.js’s¿Te gusta escribir?  Escribe y mejora la documentación del proyecto  Sanea la carpeta de ejemplos para mostrar cómo se usa el proyecto  Inicia el boletín informativo para el proyecto, o aspectos más destacados a enviar a la lista de correos  Escribe tutoriales para el proyecto, como hicieron los colaboradores de pypa’s  Escribe una traducción de la documentación del proyecto    De verdad, [documentation] es súper-importante. Por lejos la documentación ha sido enorme y fue el factor que terminó con la torre de Babel. Hay secciones que ciertamente podrían mejorar con algo de trabajo e incluso la adición de un párrafo aquí o allá es extremadamente apreciada.  — @kittens, “Llamado a los colaboradores”  ¿Te gusta organizar?  Vincula los problemas duplicados, y sugiere nuevas etiquetas para los problemas, para mantener todo organizado  Recorre los problemas abiertos y sugiere cerrar los más antiguos, como hizo @nzakas para eslint  Realiza preguntas clarificadoras en los problemas recientemente abiertos para hacer que la discusión avance¿Te gusta programar?  Encuentra un problema abierto para entrar, como  lo hizo @dianjin para Leaflet  Pregunta si puedes ayudar a escribir alguna nueva funcionalidad  Automatiza la configuración del proyecto  Mejora las herramientas y las pruebas¿Te gusta ayudar a las personas?  Responde las preguntas acerca del proyecto en, por ejemplo, Stack Overflow (como este ejemplo Postgres) o en reddit  Responde preguntas a las personas en los problemas abiertos  Ayuda a moderar los foros de discusión o canales de conversación¿Te gusta ayudar a otros a programar?  Revisa el código que otras personas presentan  Escribe tutoriales sobre cómo puede usarse un proyecto  Ofrécete como tutor de otro colaborador, como lo hizo @ereichert para @bronzdocen on Rust¡No tienes que trabajar solamente en proyectos de software!Mientras que el “código abierto” a menudo se refiere a software, puedes colaborar en casi cualquier cosa. Existen libros, recetas, listas y clases que se desarrollan como proyectos de código abierto.Por ejemplo:  @sindresorhus sanea una lista de “asombrosos”  @h5bp mantiene una lista de preguntas potenciales para entrevistas para desarrolladores candidatos de front-end  @stuartlynn y @nicole-a-tesla hicieron una colección de hechos graciosos sobre puffinsIncluso si no eres un desarrollador de software, trabajar en la documentación de un proyecto puede ayudar a comenzar en el código abierto. Es con frecuencia menos intimidante trabajar en proyectos que no involucran código, y ese proceso de colaboración te dará confianza y experiencia.Orientándote a un nuevo proyecto    Si vas tras un rastreador de problemas y las cosas parecen confusas, no eres solo tu. Esas herramientas requieren mucho conocimiento implícito, pero las personas puede ayudarte a navegarlo y tu puedes hacerles preguntas.  — @shaunagm, “Cómo Contribuir con el Código Abierto”  Para cualquier otra cosa distinta de una corrección de error tipográfico, contribuir con el código abierto es como caminar hacia un grupo de extraños en una fiesta. Si comienzas a hablar sobre las llamas, mientras ellos están muy involucrados en una discusión sobre el pez dorado, es probable que te miren de manera un poco extraña.Antes de lanzarte con los ojos cerrados con tus propias sugerencias, comienza aprendiendo cómo leer a la sala. Si lo haces, aumentan las probabilidades de que tus ideas se noten y sean escuchadas.Anatomía de un proyecto de código abiertoTodas las comunidades de código abierto son diferentes.Luego de pasar años en un proyecto de código abierto significa que aprendiste a conocer un proyecto de código abierto. Si te mueves a un proyecto diferente encontrarás que el vocabulario, las normas, y los estilos de comunicación son completamente diferentes.Dicho esto, muchos proyectos de código abierto siguen una estructura organizacional similar. Entender los roles de las  diferentes comunidades y el proceso en general te ayudará a estar rapidamente orientado para cualquier proyecto nuevo.Un proyecto de código abierto tiene los siguientes tipos de personas:  Autor: La/s persona/s u organización que creó/crearon el proyecto.  Dueño: La/s persona/s que tiene/n la propiedad administrativa sobre la organización o el repositorio(no siempre es la misma que el autor original)  Encargados: Colaboradores que son responsables de dirigir la visión y la administrar aspectos organizacionales del proyecto. (Pueden también ser autores o dueños del proyecto.)  Colaboradores: Cualquiera que haya contribuido con algo al proyecto.  Miembros de la comunidad: Las personas que utilizan al proyecto. Pueden tener un rol activo en las conversaciones o expresar su opinión sobre la dirección que toma el proyecto.Los proyectos más grandes pueden tener también subcomisiones o grupos de trabajo enfocados en tareas diferentes, como herramientas, priorización de urgencias, moderación de la comunidad, y organización de eventos. Busca en el sitio web del proyecto una página del “equipo”, o en su repositorio para encontrar la documentación política de gobierno, para encontrar ésta documentación.Un proyecto también tiene documentación. Estos archivos están normalmente listados en un nivel alto del repositorio.  LICENSE: Por definición, cada proyecto de código abierto debe tener una licencia open source. Si el proyecto no tiene una licencia, entonces no es de código abierto.  README: El archivo README es un manual de instrucción que da la bienvenida al proyecto a los nuevos miembros de la comunidad. Explica por qué el proyecto es útil y cómo comenzar.  CONTRIBUTING: Mientras que el archivo READMES ayuda a las personas a usar el proyecto, el archivo CONTRIBUTING ayuda a las personas a contribuir con el proyecto. Explica qué tipo de contribuciones son necesarias y cómo llevar adelante el trabajo. Si bien no todos los proyectos tienen un archivo CONTRIBUTING, su presencia señala que se trata de un buen proyecto para contribuir.  CODE_OF_CONDUCT: Sienta sólidas reglas sobre la conducta de los participantes asociados y ayuda a facilitar un entorno acogedor y amistoso. Si bien no todos los proyectos tienen un archivo CODE_OF_CONDUCT, su presencia señala que se trata de un buen proyecto para contribuir.  Otra documentación: Puede haber documentación adicional, como tutoriales, recorridos o políticas de gobierno, especialmente en proyectos de mayor envergadura.Finalmente, los proyectos de código abierto utilizan las siguientes herramientas para organizar la discusión. La lectura de estos archivos te darán una buena imagen de cómo piensa y trabaja la comunidad.  Seguidor de problemas (Issue tracker): Es donde las personas discuten los problemas relacionados con el proyecto.  Pull requests: Es donde las personas discuten y revisan los cambios que están en progreso.  Foros de discusión o lista de correos electrónicos: Algunos proyectos pueden utilizar estos canales de conversación para tópicos de conversación (por ejemplo “Cómo hago para… o “Qué piensas sobre…“ en luga de reportes de errores o pedido de requerimientos). Otros utilizan un rastreador de problemas para todas las conversaciones.  Canal de chat síncrono: Algunos proyectos utilizan canales de chat (como Slack o IRC) para conversaciones casuales, colaboración e intercambios rápidos.Encontrando un proyecto donde contribuir¡Ahora que ya has descubierto cómo funcionan los proyectos de código abierto, es tiempo de encontrar un proyecto con el que contribuir!Si nunca antes contribuiste al código abierto, acepta algunos consejos del presidente de los Estados Unidos, John F. Kennedy, quien una vez dijo, “No preguntes qué es lo que tu país puede hacer por ti;, pregúntate qué es lo que tú puedes hacer por él”Las contribuciones al código abierto ocurren en todos los niveles a lo largo de los proyectos. No necesitas pensar demasiado cuál será tu primera colaboración, o cómo se verá.En su lugar, comienza pensando sobre el proyecto que ya estás utilizando o que quisieras utilizar. Los proyectos con los que contribuirás activamente son aquellos a los que volverás.En esos proyectos, cuando te encuentres pensando que algo podría hacerse mejor o diferente, actúa siguiendo tu instinto.El código abierto no es un club exclusivo; está hecho de personas igual a tí. El término de fantasía  “Código abierto” es solo un nombre para tratar a los problemas del mundo como resolubles.Puedes recorrer un archivo README y encontrar un vínculo roto o un error tipográfico. O tal vez eres un nuevo usuario y te diste cuenta de que algo está roto, o hay un problema que crees que realmente debería estar en la documentación. En lugar de ignorarlo y continuar, o solicitar que álguien lo solucione, observa si puedes ayudar lanzándote sobre él. ¡De eso se trata el código abierto!  El 28% de las contribuciones casuales a la documentación del código abierto se trata de documentación, como correcciones tipográficas, reformateos o redacción de una traducción.Puedes también utilizar algunos de los siguientes recursos para ayudarte a descubrir nuevos proyectos:  GitHub Explore  Open Source Friday  First Timers Only  Your First PR  CodeTriage  24 Pull Requests  Up For Grabs  Contributor-ninjaUna lista de verificación antes de que contribuyasUna vez que hayas encontrado un proyecto con el que quisieras contribuir, realiza un recorrido rápido para asegurarte de que el proyecto es adecuado para aceptar contribuciones. De otra manera, tu duro trabajo puede no tener nunca una respuesta.Aquí tienes una lista práctica para evaluar si un proyecto es conveniente para nuevos colaboradores.Satisface la definición de código abierto      ¿Tiene una licencia? Usualmente, es un archivo ubicado LICENSE en la ra&iacute;z del repositorio.  El proyecto acepta contribuciones activamenteObserva la actividad de los commit en la rama principal. En GitHub, puedes ver esta información en la página del repositorio.      ¿Cu&aacute;ndo ocurri&oacute; el &uacute;ltimo commit?        ¿Cu&aacute;ntos colaboradores tiene el proyecto?        ¿Con qu&eacute; frecuencia las personas hacen un commit? (En GitHub, puedes encontrar esta informaci&oacute;n haciendo click en \"Commits\", en la barra superior.)  Luego, busca en los problemas del proyecto.        ¿Cu&aacute;ntos problemas abiertos existen?          ¿Los responsables responden r&aacute;pidamente a los problemas cuando son abiertos?          ¿Existe una discusi&oacute;n activa en los problemas?          ¿Se abrieron recientemente nuevos problemas?          ¿Se est&aacute;n cerrando los problemas? (En GitHub, haz click en el v&iacute;nculo \"closed\" de la p&aacute;gina de problemas para ver los problemas cerrados.)  Ahora haz lo mismo para los pull requests del proyecto.        ¿Cu&aacute;ntos pull requests existen?          ¿Los responsables responden r&aacute;pidamente a los pull requests cuando se abren?          ¿Existe una discusi&oacute;n activa en los pull requests?          ¿Existen pull requests recientes?          ¿Cu&aacute;n recientemente ocurri&oacute; la entrada (merge) de un pull request? (En GitHub, haz click en el v&iacute;nculo \"closed\" en la p&aacute;gina de pull requests para ver los PRs cerrados.)  El proyecto es acogedorUn proyecto que es amigable y acogedor indica que será receptivo de nuevos colaboradores.        ¿Los encargados responden de manera colaborativa a las preguntas en los problemas?          Las personas son amigables en los problemas, foros de discusi&oacute;n y chat (por ejemplo IRC o Slack)?          ¿Los pull requestes son revisados?          ¿Los encargados agradecen a las personas por sus contribuciones?      Siempre que veas un hilo largo, comprueba las respuestas de los principales desarrolladores que llegan más tarde al hilo. ¿Están resumiendo de forma constructiva y tomando medidas para llevar el hilo hacia una decisión y al mismo tiempo continúan siendo educados? Si ves que se agitan banderas de guerra pasando en frente, frecuentemente indica que la energía se está encaminando a discutir más que en desarrollar.  — @kfogel, Produciendo Software de código abierto  Cómo enviar una contribuciónYa encontraste un proyecto que te gustaba, y estás listo para hacer una contribución. ¡Por fin! A continuación de mostramos cómo hacer que tu contribución siga por el buen camino.Comunicándote de manera efectivaSin importar si eres un colaborador para una sola vez o estás intentando unirte a una comunidad, trabajar con otras personas es una de las habilidades más importantes que desarrollarás en un proyecto de código abierto.    [Como un nuevo colaborador,] me di cuenta rápidamente que necesitaba hacer preguntas si quería poder cerrar el problema. Recorrí el código base. Una vez que comprendí lo que estaba ocurriendo, pregunté que me orientaran. ¡Y voilà! Pude resolver el problema luego de conseguir todos los detalles relevantes que necesitaba.  — @shubheksha, El Muy Accidentado Viaje de un Principiante a través del Mundo del Código Abierto  Antes de abrir un problema o un pull request, o de hacer una pregunta en un chat, ten en cuenta los siguientes puntos para ayudar a que tus ideas lleguen a buen puerto de manera efectiva.Da contexto. Ayuda a los demás a ponerse al día rápidamente. Si tienes un error, explica lo que estás tratando de hacer y cómo reproducirlo. Si estás sugiriendo una nueva idea, explica por qué crees que sería útil para el proyecto (¡no solamente para tí¡).  😇 “No ocurre X cuando yo hago Y”  😢 “¡X se ha roto! Por favor repárenlo.”Haz tu tarea de antemano. Está bien desconocer cosas, pero mostrando que lo intentaste. Antes de solicitar ayuda, asegúrate de comprobar el README, la documentación, los problemas (abiertos o cerrados), la lista de correos, y de buscar en internet por una respuesta. Las personas agradecerán cuando demuestres que estás tratando de aprender.  😇 “No estoy seguro de cómo implementar X. Verifiqué en los documentos de ayuda y no encontré ninguna mención.”  😢 “¿Cómo soluciono X?”Mantén tus solicitudes cortas y directas. Al igual que el envío de un correo, cualquier contribución, sin importar lo simple o útil que sea, requiere la revisión de parte de otra persona. Muchos proyectos tienen más solicitudes de entrada que personas disponibles para ayudar. Se conciso. Aumentarás las probabilidades de que álguien pueda ayudarte.  😇 “Me gustaría escribir un tutorial para una API.”  😢 “Días atrás estaba manejando por la autopista y me detuve para cargar combustible, y entonces tuve la gran idea de algo que deberíamos estar haciendo pero antes de explicarlo, permítanme mostrarles…“Mantén todas las comunicaciones públicas. Pese a que es tentador, no te dirijas a los responsables de manera privada a menos que necesites compartir información sensible (como un problema de seguridad o violaciones a la conducta serias). Cuando mantienes las conversaciones públicas, más personas pueden aprender y verse beneficiadas de tu intercambio. La discusión puede ser, en sí misma, una contribución.  😇 (como un comentario) “@-responsable ¡Qué tal! ¿Cómo deberíamos proceder con éste PR?”  😢 (como un correo electrónico) “Que tal, disculpa que te moleste con un correo electrónico, pero me estaba preguntando si tendrás la oportunidad de revisar mi PR”Está bien hacer preguntas (¡pero se paciente!). Todos fueron nuevos en el proyecto en algún momento, e incluso los colaboradores experimentados necesitan ponerse al día cuando miran un nuevo proyecto. Por lo mismo, incluso responsables de mucha antigüedad no están siempre familiarizados con todas las partes del proyecto. Muéstrales la misma paciencia que quieres que ellos tengan contigo.  😇 “Gracias por estudiar éste error. Seguí tus sugerencias. Esta es la salida.”  😢 “¿Por qué no pueden solucionar mi problema? ¿No es este acaso su proyecto?”Respeta las decisiones de la comunidad. Tus ideas pueden ser diferentes a las prioridades de la comunidad o a la visión. Pueden devolverte alguna retroalimentación o decidir no continuar con tu idea. Mientras que tu buscas atención y compromiso, los responsables deben convivir con tu decisión por más tiempo que tú. Si no estás de acuerdo con la dirección tomada, siempre puedes trabajar en tu propio fork o comenzar tu propio proyecto.  😇 “Lamento que no puedan dar soporte a mi situación, pero como lo explicas solo afecta a una minoría de usuarios, y lo entiendo. Gracias por escuchar.”  😢 “¿Por qué no dan soporte a mi situación? ¡Es inaceptable!”Por encima de todo mantenlo con clase. El código abierto está formado por colaboradores de todo el mundo. El contexto se pierde a través de idiomas, culturas, geografías y zonas horarias. Además, la comunicación escrita hace más difícil transmitir un tono o estado de ánimo. Asume buenas intenciones en esas conversaciones. Está bien, tratando de volver a una idea, solicitar más contexto, o aclarar más tu posición. Trata de dejar a Internet como un lugar mejor del que tú lo encontraste.Dando contextoAntes de hacer nada, haz una rápida verificación para asegurarte que tu idea no se haya discutido anteriormente. Navega por el README del proyecto, los problemas (abiertos y cerrados), lista de correos electrónicos, y en Stack Overflow. No necesitas dedicar horas para todo esto, pero una mirada rápida buscando algunas palabras clave resolverá gran parte de la tarea.Si no puedes encontrar tu idea en ningún otro lado, estás listo para dar el paso. Si el proyecto está en GitHub, es probable que lo comuniques abriendo un problema o un pull request:  Problemas (Issues) son como comenzar una conversación o discusión  Pull requests son para comenzar a trabajar en una solución  Para una comunicación ligera, como una explicación o una pregunta de “cómo”, trata preguntando en Stack Overflow, IRC, Slack u otro canal de chat, si el proyecto tiene algunoAntes de abrir un problema o un pull request, verifica los documentos de verificación del proyecto (comúnmente es un archivo que se llama CONTRIBUTING), para ver si se necesitan incluir algo específico, puede ser que soliciten que respetes un modelo, o requerir que utilices pruebas.Si quieres hacer una contribución sustancial, abre un problema para preguntar antes de ponerte a trabajar en ello. Es de gran ayuda observar el proyecto por un tiempo (en GitHub, puedes hacer click en “Watch” para ser notificado de todas las conversaciones), y conocer a los miembros de la comunidad, antes de realizar trabajo alguno que pueda no ser aceptado.      Aprenderás mucho tomando un proyecto que utilizas activamente, “observarlo” en GitHub y leyendo cada problema y PR.  — @gaearon sobre la adhesión a proyectos  Abriendo un problemaFrecuentemente deberías abrir un problema en las siguientes situaciones:  Reportar un error que tú no puedes resolver  Discutir un tópico o idea de alto nivel (por ejemplo sobre la comunidad, la visión o políticas)  Proponer una nueva característica u otra idea del proyectoConsejos para comunicar los problemas:  Si ves un problema abierto en el que quieres entrar, coméntalo en el problema, para permitir que las personas sepan que te preocupa. De esa manera, es menos probable que se duplique el trabajo en la comunidad.  Si un problema fue abierto hace mucho tiempo, es posible que se esté tratando en otro lugar o que ya haya sido resuelto, de modo que primero pregunta por una confirmación antes de ponerte a trabajar.  Si abriste un problema, pero más tarde descubriste que estaba resuelto, comenta en tu propio problema, para que las personas lo sepan, y luego cierra el problema. Incluso documentar ese resultado es una contribución al proyecto.Abriendo un pull requestUsualmente deberías abrir un pull request en las siguientes situaciones:  Enviar arreglos triviales (por ejemplo una corrección tipográfica, un link caído o un error obvio)  Comenzar a trabajar en una contribución que ya fue solicitada, o que ya discutiste en un problemaUn pull request no representa trabajo terminado. Usualmente es mejor abrir un pull request de forma temprana, de manera que otros puedan observar o dar retroalimentación a tu progreso. Solo márcalo como “trabajo en proceso” (WIP por sus siglas en inglés, work in progress) en la línea del tema. Siempre puedes agregar más commits después.Si el proyecto está alojado en GITHUb, acá te explicamos los pasos para enviar un pull request:  Abre un fork del repositorio y haz un clon local. Conecta tu repositorio local con el repositorio “superior” original agregándolo como remoto. Descarga los cambios desde el repositorio superior con frecuencia de manera que puedas mantener al día, de forma que cuando tu envíes tu pull request, sea menos probable que haya conflictos. (ver más instrucciones detalladas aquí.)  Crea una rama para tus ediciones.  Haz referencia a cualquier problema relevante o documentación de soporte en tu PR (por ejemplo “Cierra #37.”)  Incluye capturas de pantalla del antes y del después si tus cambios incluyen diferencias en el HTML o CSS. Arrastra y suelta las imágenes en el cuerpo de tu pull request.  ¡Has pruebas de tus cambios! Corre tus cambios contra las pruebas existentes si realmente existen, y crea nuevas pruebas si es necesario. Sin importar que existan o no las pruebas, asegúrate que tus cambios no produzcan roturas del proyecto existente.  Contribuye con el estilo del proyecto con el máximo de tus capacidades. Esto significa utilizar indentación, punto y comas o comentarios de manera diferente a lo que harías en tu repositorio, pero que hacen más sencillo para los responsables combinar y para otros de entender y mantener el proyecto en el futuro.Si se trata de tu primer pull request, verifica Haz un Pull Request, que fue creado por @kentcdodds como un recurso de recorrido gratuito.Qué pasa luego de que enviaste una contribución¡Lo hiciste! Felicitaciones por convertirte en un colaborador open source. Esperamos que ésta sea la primera de muchas.Luego de que enviaste tu contribución, una de las siguientes situaciones puede ocurrir:😭 No tienes una respuesta.Ojalá que  hayas verificado el proyecto buscando signos de actividad antes de hacer cualquier contribución. Incluso en proyectos activos, de cualquier manera, es posible que tu contribución no tenga una respuesta.Si no tuviste una respuesta en más de una semana, es justo responder en el mismo hilo, preguntando a álguien por una revisión. Si conoces el nombre de la persona correcta para que revise tu contribución, puedes hacer una @-mención en ese hilo.No contactes a esa persona de manera privada; recuerda que las comunicaciones públicas son vitales para los proyectos de código abierto.Si haces una llamada educada y todavía nadie responde, es posible que nadie te responda jamás. No es un sentimiento agradable, pero no dejes que de desanime. ¡Les pasa a todos! Existen muchas razones posibles por las que no tuviste tu respuesta, incluyendo circunstancias personales que pueden estar fuera de control. Trata de encontrar otro proyecto u otra forma de contribuir. En todo caso, ésta es una buena razón para no invertir mucho tiempo en hacer contribuciones antes de ver que existen otros miembros en la comunidad que están comprometidos y responden.🚧 Alguien pide cambios a tu colaboración.Es común que te pidan hacer cambios a tu contribución, ya sea una retroalimentación sobre el alcance de tu idea, o cambios en tu código.Cuando álguien te pide cambios, compórtate de manera sensible, Se tomaron el tiempo necesario para revisar tu contribución. Abrir un pull request y luego alejarse es de malos modales. Si no sabes cómo hacer los cambios, investiga el problema, y luego pregunta por ayuda si la necesitas.Si no tienes el tiempo para volver a trabajar en ese problema (por ejemplo, si la conversación tuvo lugar durante meses, y tus circunstancias cambiaron), permite que el responsable lo sepa, de manera que no quede a la espera de una respuesta. Alguien puede sentirse complacido de hacerse cargo.👎 Tu contribución no es aceptada.Al final tu contribución puede o no ser aceptada. Con suerte, no hayas necesitado poner demasiado esfuerzo en ella. Si no estás seguro de por qué no fue aceptada, es completamente razonable preguntar al responsable por retroalimentación y esclarecimiento. De cualquier manera, al final debes aceptar que se trata de su decisión. No discutas ni adoptes una postura hostil. ¡Siempre serás bienvenido a hacer un fork y trabajar en tu propia versión si no estás de acuerdo!🎉 Tu contribución es aceptada.¡Hurra! ¡Hiciste una contribución al código abierto exitosamente!¡Lo hiciste!Si acabas de hacer tu primera contribución al código abierto, o si estás buscando nuevas formas de contribuir, esperamos que esté inspirado para continuar la acción. Si tu contribución no fue aceptada, no te olvides de dar las gracias cuando un responsable puso esfuerzo en ayudarte. El código abierto es llevado adelante por personas como tu: un problema, un pull request, un comentario o choca esos cinco por vez.",
    "url": "/es/how-to-contribute/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/es/how-to-contribute/\">\n      C&oacute;mo Contribuir con el C&oacute;digo Abierto\n    </a>\n  </h2>\n  <h2 id=\"para-qué-contribuir\">¿Para qué contribuir?</h2>\n\n\n</div>\n"
  },

  
  "/es/leadership-and-governance/": {
    "title": "Liderazgo y Gobierno",
    "content": "Entendiendo el gobierno de su proyecto en crecimientoTu proyecto está creciendo, la gente está comprometida, y estas comprometido a mantener esto en marcha. En esta etapa, es posible que te preguntes cómo incorporar a los contribuyentes regulares de proyectos en su flujo de trabajo, ya sea para darle a alguien el compromiso de acceso o para resolver los debates de la comunidad. Si tiene preguntas, tenemos respuestas.¿Cuáles son ejemplos de roles formales utilizados en proyectos de código abierto?Muchos proyectos siguen estructuras similares para reconocer y asignar roles a los contribuyentes.El significado de estos roles queda a tu criterio. Aquí puedes encontrar algunos tipos de rol que quizís reconozcas:  Mantenedor  Contribuyente  CommitterPara algunos proyectos, los “mantenedores” son las únicas personas en el proyecto con permisos de commit. En otros proyectos, son simplemente personas que estan listadas en el archivo README.md como mantenedores.Un mantenedor no necesariamente tiene que ser alguien que escribe código para su proyecto. Podría ser alguien que ha hecho mucho trabajo evangelizando su proyecto, o documentación escrita que hizo el proyecto más accesible a los demás. Independientemente de lo que hacen día a día, un mantenedor es probablemente alguien que se siente responsable sobre la dirección del proyecto y se ha comprometido a mejorarlo.Un “contribuyente” puede ser cualquiera que comente en una issue o un pull request, personas que agreguen valor al proyecto (sin importar si sólo está clasificando issues, escribiendo código u organizando eventos), o cualquiera con un merged pull request (esta es la definición mas estrecha de un contribuyente).    Para Node.js, cada persona que se presenta para comentar un problema o envía código es un miembro de la comunidad de un proyecto. Sólo ser capaz de verlos significa que han cruzado la línea de ser un usuario a ser un contribuyente.  — @mikeal, “Healthy Open Source”  El término “committer” podría utilizarse para distinguir entre el acceso a commit, que es un tipo específico de responsabilidad, de otras formas de contribución.Mientras que puedes definir tus roles de proyecto de cualquier forma que quieras te gustaría considerar usar definiciones más amplias para fomentar más formas de contribución. Puedes utilizar funciones de liderazgo para reconocer formalmente a personas que han hecho contribuciones excepcionales a su proyecto, independientemente de su habilidad técnica.    Quizás me conozcan como el “inventor” de Django… pero realmente soy el individuo que consiguió ser contratado para trabajar en algo un año después de que ya fuera hecho. (…) La gente sospecha que tengo éxito debido a mi habilidad de programación … pero, en el mejor de los casos soy un programador promedio.  — @jacobian, “PyCon 2015 Keynote” (video)  ¿Cómo formalizo los roles de liderazgo?La formalización de tus funciones de liderazgo ayuda a las personas a sentirse propietarias y les dice a otros miembros de la comunidad a quién deben buscar para conseguir ayuda.Para un proyecto más pequeño, designar líderes puede ser tan simple como agregar sus nombres a su archivo de texto README o CONTRIBUTORS.Por un proyecto mas grande, si tienes una pagina web, crea una página de equipo o lista tus líderes de proyecto allí. Por ejemplo, PostgreSQL tiene una página exhaustiva de equipo con perfiles cortos para cada contribuyente.Si tu proyecto tiene una comunidad de contribuidores muy activa, puede formar un “equipo central” de mantenedores, o incluso subcomisiones de personas que se apropian de diferentes áreas temáticas (por ejemplo, seguridad, clasificación de temas o conducta comunitaria). Permite que la gente se auto-organice y se ofrezca como voluntaria para los papeles que más le entusiasman, en lugar de asignarlos.  Nosotros complementamos el equipo central con varios “sub-grupos”. Cada sub-grupo se centra en un área específica, por ejemplo, diseño de lenguajes o bibliotecas. (…) Para garantizar una coordinación global y una visión sólida y coherente del proyecto en su conjunto, cada sub-grupo está dirigido por un miembro del equipo central.  — “Rust Governance RFC”  Los equipos de liderazgo pueden querer crear un canal designado (como en IRC) o reunirse regularmente para discutir el proyecto (como en Gitter o Google Hangout). Incluso puedes hacer públicas esas reuniones para que otras personas puedan escucharlas. Cucumber-rubí, por ejemplo, hospeda las horas de oficina cada semana.Una vez que haya establecido roles de liderazgo, ¡no olvides documentar cómo la gente puede alcanzarlos! Establece un proceso claro para que alguien pueda convertirse en un mantenedor o unirse a un subcomité en su proyecto y escribirlo en su GOVERNANCE.md.Herramientas como Vossibility puede ayudarte a hacer un seguimiento público de quién (o no) está haciendo contribuciones al proyecto. Documentar esta información evita la percepción de la comunidad de que los mantenedores son un grupo que toma sus decisiones en privado.Por último, si su proyecto está en GitHub, considere la posibilidad de mover su proyecto de su cuenta personal a una organización y agregar al menos un administrador de copias de seguridad. Las organizaciones GitHub facilitan la administración de permisos y múltiples repositorios y protegen el legado de su proyecto mediante la propiedad compartida.¿Cuando le puedo dar acceso a hacer commits a alguien?Algunas personas piensan que debe dar acceso de commits a todos los que hacen una contribución. Hacerlo podría alentar a más personas a sentirse dueñas de su proyecto.Por otro lado, especialmente para proyectos más grandes y complejos, es posible que desee dar sólo el acceso de commit a las personas que han demostrado su compromiso. No hay una manera correcta de hacerlo - ¡Haz lo que te parezca más cómodo!Si tu proyecto está en GitHub, podés utilizar ramas protegidas para administrar quién puede enviar a una rama en particular y bajo qué circunstancias.    Cada vez que alguien te envía un pull request, dales acceso de commit a tu proyecto. Si bien puede sonar increíblemente tonto al principio, el uso de esta estrategia te permitirá liberar el verdadero poder de GitHub. (…) Una vez que las personas tienen acceso de commit, ya no están preocupados de que su parche pudiese quedar fuera de merge… haciendo que coloquen mucho más trabajo en él.  — @felixge, “The Pull Request Hack”  ¿Cuáles son algunas de las estructuras de gobierno comunes para los proyectos de código abierto?Hay tres estructuras de gobierno comunes asociadas a los proyectos de código abierto.      BDFL: BDFL significa “Benevolent Dictator for Life” (en español, “Dictador benevolente para la vida”). Bajo esta estructura, una persona (generalmente el autor inicial del proyecto) tiene la palabra final en todas las decisiones importantes del proyecto. Python es un ejemplo clásico. Los proyectos más pequeños son probablemente BDFL por defecto, porque sólo hay uno o dos mantenedores. Un proyecto que se originó en una empresa también podría caer en la categoría BDFL.        Meritocracia: (Nota: el término “meritocracia” tiene connotaciones negativas para algunas comunidades y tiene un historia social y político compleja.) Bajo una meritocracia, a los contribuyentes activos del proyecto (Aquellos que demuestran “mérito”) se les da un papel formal de toma de decisiones. Las decisiones se toman generalmente en base a un consenso de voto puro. El concepto de meritocracia fue iniciado por la Fundación Apache; Todos los proyectos de Apache son meritocracias. Las contribuciones sólo pueden ser hechas por individuos que representan a sí mismos, no por una empresa.        Contribución liberal: Bajo un modelo de contribución liberal, las personas que hacen más trabajo son reconocidas como las más influyentes, pero esto se basa en el trabajo actual y no en contribuciones históricas. Las decisiones importantes del proyecto se toman sobre la base de un proceso de búsqueda de consenso (discutir quejas mayores) en lugar de voto puro, y tratar de incluir tantas perspectivas de la comunidad como sea posible. Ejemplos populares de proyectos que utilizan un modelo de contribución liberal incluyen Node.js y Rust.  ¿Cuál deberías usar? ¡Tú decides! Cada modelo tiene ventajas y compensaciones. Y aunque pueden parecer muy diferentes al principio, los tres modelos tienen más en común de lo que parece. Si estás interesado en adoptar uno de estos modelos, consulta estas plantillas:  BDFL model template  Meritocracy model template  Node.js’s liberal contribution policy¿Necesito documentación de gobierno cuando lanzo mi proyecto?No hay momento adecuado para describir el gobierno de su proyecto, pero es mucho más fácil definirlo una vez que haya visto cómo se desarrolla la dinámica de su comunidad. ¡La mejor parte (y más difícil) sobre el gobierno de código abierto es que está conformado por la comunidad!Sin embargo, una cierta documentación temprana contribuirá inevitablemente al gobierno de su proyecto, así que empiece a escribir lo que pueda. Por ejemplo, puede definir expectativas claras de comportamiento o cómo funciona su proceso de contribución, incluso en el lanzamiento de su proyecto.Si usted es parte de una empresa lanzando un proyecto de código abierto, vale la pena tener una discusión interna antes del lanzamiento acerca de cómo su empresa espera mantener y tomar decisiones sobre el proyecto de seguir adelante. También es posible que desee explicar públicamente algo en particular sobre cómo su empresa (o no) participará en el proyecto.    Nosotros asignamos pequeños equipos para gestionar proyectos en Github, los cuales está actualmente trabajando en ellos en Facebook. Por ejemplo, React es ejecutado por un Ingeniero de React.  — @caabernathy, “Una vista interna del código abierto en Facebook”  ¿Qué pasa cuando los empleados de corporaciones comienzan a enviar contribuciones?Los proyectos exitosos de código abierto se utilizan por muchas personas y empresas, y algunas empresas pueden eventualmente tener flujos de ingresos generalmente vinculados al proyecto. Por ejemplo, una empresa puede utilizar el código del proyecto como un componente en una oferta de servicios comerciales.A medida que el proyecto se utiliza más ampliamente, las personas que tienen experiencia en ella comienzan a estar más demandados - ¡puedes ser uno de ellos! - y a veces se les paga por el trabajo que realizan en el proyecto.Es importante tratar la actividad comercial como algo normal y como otra fuente de energía de desarrollo. Por supuesto, los desarrolladores pagados no deben recibir un trato especial sobre los no pagados; Cada contribución debe ser evaluada por sus méritos técnicos. Sin embargo, la gente debe sentirse cómoda participando en la actividad comercial, y sentirse cómoda diciendo sus casos de uso al argumentar a favor de una mejora o característica en particular.“Comercial” es completamente compatible con “código abierto”. “Comercial” sólo significa que existe dinero involucrado en alguna parte - que el software se utiliza en el comercio, que es cada vez más probable como un proyecto gana la adopción. (Cuando se utiliza software de código abierto como parte de un producto que no es de código abierto, el producto general sigue siendo un software “propietario”, aunque, al igual que el código abierto, podría utilizarse con fines comerciales o no comerciales).Como cualquier otra persona, los desarrolladores con motivación comercial ganan influencia en el proyecto a través de la calidad y la cantidad de sus contribuciones. Obviamente, un desarrollador al cual se le paga por su tiempo, puede ser capaz de hacer algo más que alguien al que no se le paga, pero eso está bien: el pago es sólo uno de los muchos factores posibles que podrían afectar cuánto una persona hace. Manten los debates del proyecto centrados en las contribuciones, no en los factores externos que permiten a las personas a hacer esas contribuciones.¿Necesito una entidad legal para apoyar a mi proyecto?Usted no necesita una entidad legal para apoyar su proyecto de código abierto a menos que esté manejando dinero.Por ejemplo, si desea crear un negocio comercial, desee configurar una C Corp o LLC (si vives en los EE.UU.). Si está haciendo un trabajo de contrato relacionado con su proyecto de código abierto, puede aceptar dinero como propietario único, o establecer una LLC (si vives en los EE.UU.).Si quieres aceptar donaciones para tu proyecto de código abierto, podes configurar un botón de donación (mediante PayPal o Stripe, por ejemplo), pero el dinero no será deducible de impuestos a menos que sea una organización sin fines de lucro calificada (un 501c3, si estás en los EE.UU.).Muchos proyectos no desean pasar por la molestia de crear una organización sin fines de lucro, por lo que encuentran un patrocinador fiscal sin fines de lucro en su lugar. Un patrocinador fiscal acepta donaciones en su nombre, normalmente a cambio de un porcentaje de la donación. Software Freedom Conservancy, Apache Foundation, Eclipse Foundation, Linux Foundation y Open Collective son ejemplos de organizaciones que sirven como patrocinadores fiscales para proyectos de código abierto.    Nuestra meta es proveer una infraestructura que las comunidades puedan usar para ser autosostenibles, creando así un ambiente en el que todos, contribuyentes, patrocinadores, obtengan beneficios concretos.  — @piamancini, “Moving beyond the charity framework”  Si tu proyecto está estrechamente asociado con un determinado idioma o ecosistema, también puede haber un framework relacionado con el que pueda trabajar. Por ejemplo, la Python Software Foundation ayuda a PyPI, el gestor de paquetes de Python y el Node.js Foundation ayuda a apoyar Express.js, un framework basado en nodos.",
    "url": "/es/leadership-and-governance/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/es/leadership-and-governance/\">\n      Liderazgo y Gobierno\n    </a>\n  </h2>\n  <h2 id=\"entendiendo-el-gobierno-de-su-proyecto-en-crecimiento\">Entendiendo el gobierno de su proyecto en crecimiento</h2>\n\n\n</div>\n"
  },

  
  "/es/legal/": {
    "title": "Aspectos legales del codigo abierto.",
    "content": "Entendiendo las implicaciones legales del código abiertoCompartir tu trabajo creativo con el mundo puede ser una experiencia excitante y gratificante. Esto también conlleva un conjunto de aspectos legales de los cuales debes ocuparte. Afortunadamente, no tienes que empezar desde cero. Nosotros tenemos cubiertas tus necesidades legales. (Antes de continuar, asegúrate de leer nuestro aviso legal.)¿Por qué la gente se preocupa tanto acerca de los aspectos legales del código abierto?¡Me alegro que lo preguntes! Cuando realizas trabajo creativo (como escritura, dibujo, o código), ese trabajo se encuentra bajo derechos de autor por defecto. Es decir, la ley asume que, como autor de tu trabajo, tienes poder de decisión sobre lo que los otros pueden o no hacer con ello.En general, estoy significa que nadie más  puede usar, copiar, distribuir, o modificar tu trabajo sin tener riesgo de sufrir bajas, ser investigado o demandado.Sin embargo, el código abierto es una circunstancia inusual debido a que el autor espera que otros usen, modifiquen, y compartan el trabajo. Pero, debido a que legalmente por defecto los derechos de autor son exclusivos, se necesita una licencia que enuncie explícitamente estos permisos.Si tú no aplicas una licencia de código abierto, todo aquel que contribuya a tu proyecto también tiene derechos de autor de su trabajo. Esto significa que nadie puede usar, copiar, distribuir, o modificar sus contribuciones – y ese “nadie” te incluye a ti.Finalmente, tu proyecto puede tener dependencias con requisitos de licencia que no conoces. La comunidad de tu proyecto, o tus políticas de empleador, pueden requerir que tu proyecto haga uso de una licencia de código abierto específica. Cubriremos estas situaciones a continuación.¿Son públicos los proyectos de código abierto de GitHub?Cuando tú creas un nuevo proyecto en GitHub, tienes la opción de hacerlo privado o publico.Hacer tu proyecto de GitHub público, no es lo mismo que licenciar tu proyecto. Los proyectos públicos son cubiertos por Los Términos de Servicio de GitHub, lo que les permite a otros ver y bifurcar el proyecto, pero su trabajo viene de otra manera sin permisos.Si quieres que otros usen, copien, modifiquen, o contribuyan a tu proyecto, debes incluir una licencia de código abierto. Por ejemplo, nadie puede usar legalmente cualquier parte de tu proyecto de GitHub en su código, incluso si es público, a menos que explícitamente le concedas dicho derecho.Solo dame un resumen acerca de lo que necesito para proteger mi proyecto.Tienes suerte, porque hoy, las licencias de código abierto están estandarizadas y son fáciles de usar. Puedes copiar copiar-pegar una licencia existente directamente en tu proyecto.MIT, Apache 2.0, y GPLv3son las licencias de código abierto más populares, pero también tienes otras opciones para elegir. Puedes encontrar un texto completo sobre estas licencias, e instrucciones de uso de las mismas en choosealicense.com.Cuando crees un nuevo proyecto en GitHub, se te pedirá que agregues una licencia.    Una licencia estandarizada sirve como aproximación para quienes no tengan entrenamiento legal para saber con precisión lo que pueden y lo que no pueden hacer con el software.A menos que sea absolutamente necesario, evita términos personalizados, modificados o no estandarizados, lo cual te servirá como barrera para el uso posterior de la agencia de código.  — @benbalter, “Everything a government attorney needs to know about open source software licensing”  ¿Cuál licencia de código abierto es apropiada para mi proyecto?Si estas comenzando desde cero, es difícil equivocarse al elegir la Licencia MIT. Es corta, muy fácil de entender, y permite a cualquiera hacer lo que sea, siempre y cuando guarde una copia de la licencia, incluyendo tu aviso de derechos de autor. Tendrás la posibilidad de lanzar el proyecto bajo otra licencia si alguna vez así lo necesitas.Elegir la licencia de código abierto correcta para tu proyecto, depende de tus objetivos.Muy probablemente, tu proyecto tiene (o tendrá) dependencias. Por ejemplo, si es un proyecto de código abierto de Node.js, seguramente utilizaras librerías del Node Package Manager (npm). Cada una de esas librerías que utilizas, tendrán su propia licencia de código abierto. Si cada una de dichas licencias es “permisiva” (otorga permiso público de uso, modificación, y distribución, sin ninguna condición de bajada), puedes usar cualquier licencia que quieras. Las licencias permisivas más comunes son MIT, Apache 2.0, ISC, y BSD.Por otro lado, si cualquiera de las licencias de tus dependencias son copyleft “fuerte” (también brindan los mismos permisos, siempre y cuando se utilice la misma licencia consecuente), en este caso, tu proyecto deberá usar la misma licencia. Las licencias strong copyleft más comunes son GPLv2, GPLv3, and AGPLv3.Deberías considerar también a las comunidades qué esperas que usaran y contribuirán a tu proyecto:  ¿Quieres que tu proyecto sea usado como dependencia por otros proyectos? Probablemente, la mejor opción sea usar la licencia más popular en tu comunidad. Por ejemplo, MIT es la licencia más popular para npm libraries.  ¿Quieres que tu proyecto atraiga a grandes empresas? Una gran empresa seguramente querrá una licencia de patente expresa por parte de todos los contribuyentes. En este caso, Apache 2.0 te tiene a ti (y a ellos) cubiertos.  ¿Quieres que tu proyecto atraiga a colaboradores los cuales no quieren que sus contribuciones sean usado en software de código cerrado? GPLv3 o (si tampoco quieren contribuir a servicios de código cerrado) AGPLv3 Seria el más apropiado.Tu empresa puede que tenga requisitos específicos para licencias de proyectos de código abierto. Por ejemplo, tal vez requiera una licencia permisiva de modo que dicho proyecto pueda utilizarse en el producto de código cerrado de dicha empresa. O tu empresa puede requerir una licencia strong copyleft y un acuerdo de colaboradores adicional (leer más abajo) para que solo tu empresa, y nadie más, pueda usar tu proyecto en software de código cerrado. O tal vez, tu empresa tiene ciertas necesidades relacionadas con estándares, responsabilidad social, o transparencia, tales casos, requerirán una estrategia de licencia particular. Habla con el departamento legal de tu empresa.Cuando creas un Nuevo proyecto en GitHub, te son brindadas opciones para elegir una licencia. Incluir cualquiera de las licencias enunciadas anteriormente, harán de tu proyecto de GitHub, un proyecto de código abierto. Si quisieras considerar otras opciones, revisa choosealicense.com en donde encontraras licencias adecuadas para tu proyecto, incluso si el mismo no es software.Y si quieres cambiar la licencia de tu proyectoLa mayoría de los proyectos no necesitan cambios de licencias. Pero ocasionalmente las circunstancias cambian.Por ejemplo, a medida que tu proyecto crezca se añadirán dependencias y usuarios, o tu empresa modifica estrategias, cualquiera de estos escenarios requerirán diferentes licencias. También, si te negaste a establecer una licencia a tu proyecto desde el comienzo, agregar una licencia es efectivamente lo mismo que cambiar las licencias. Hay tres aspectos fundamentales que debes considerar al añadir o cambiar la licencia de tu proyecto:Es complicado. Determinar la compatibilidad y conformidad de la licencia con quienes son propietarios de sus derechos de autor puede volverse complicado y confuso muy rápidamente. Cambiar a una nueva pero compatible licencia para nuevos lanzamientos y colaboradores es diferente a cambiar la licencia de todos los colaboradores ya existentes. Involucre a su equipo legal frente a cualquier deseo de cambiar licencias. Incluso si tú tienes o puedes obtener permiso de los titulares de derechos de autor de su proyecto para un cambio de licencia, considera el impacto de los cambios en los colaboradores y usuarios de tu proyecto. Imagina al cambio de licencia como un “evento de gobierno” para tu proyecto que probablemente marchara sin contratiempos mediante la comunicación y consultas claras con las partes interesadas en el proyecto. ¡Más razones para elegir y utilizar una licencia adecuada para su proyecto desde el comienzo!La licencia existente de su proyecto. Si la licencia existente de su proyecto es compatible con la licencia a la que quieres cambiar, puedes simplemente empezar a usar la nueva licencia. Esto sucede debido a que si la licencia A es compatible con la licencia B, vas a estar cumpliendo con los términos de A mientras cumples con los términos de B (pero no necesariamente viceversa). Así que, si estas utilizando una licencia permisiva (Por ejemplo, MIT), puedes cambiar a una licencia con más condiciones, siempre y cuando mantengas una copia de la licencia MIT y cualquier aviso de derechos de autos asociado (esto implicaría, continuar cumpliendo con las condiciones mínimas de la licencia MIT). Pero si tu licencia actual no es permisiva (por ejemplo, copyleft, o si no tienes licencia) y no eres el único propietario de los derechos de autor, no podrías simplemente cambiar la licencia del proyecto a MIT. Esencialmente, con una licencia permisiva del proyecto, en la cual los propietarios de derechos de autor han dado permiso por adelantado de cambiar licencias.Los propietarios de derechos de autor de tu proyecto. Si eres el único contribuyente a tu proyecto, entonces tu o tu empresa es el único titular de los derechos de autor del proyecto. Puedes añadir o cambiar a cualquier licencia que tu o tu empresa deseen. En otros casos, podría haber propietarios de derechos de autor de los cuales necesitarías realizar un acuerdo para poder cambiar las licencias. ¿Quiénes? Personas que hayan realizado commits a tu proyecto es una buena forma de comenzar. Pero en algunos casos los derechos de autor estarán en propiedad de los empleadores de dichas personas. En algunos casos las personas solo habrán hecho la menor parte de las contribuciones, pero no hay una regla rápida y firme que establezca a partir de que cantidad de líneas de código están o no sujetos a derechos de autor dichos colaboradores. Para proyectos jóvenes y pequeños, puede ser factible lograr que todos los colaboradores acepten un cambio de licencia en una issue o un pull request. Para proyectos largos y de larga vida, tendrás que buscar a muchos contribuyentes e incluso sus herederos. Mozilla tardo años (2001-2006) para cambiar de licencia a Firefox, Thunderbird, y software relacionado.De manera alternativa, puedes tener colaboradores que estén de acuerdo por adelantado (mediante un acuerdo adicional de colaboradores – ver más abajo) con cambios de licencia bajo ciertas condiciones, más allá de los permitidos por tu licencia de código abierto existente. Esto cambia la complejidad de cambiar la licencia. Necesitaras más ayuda por parte de tus abogados, y aun deberás comunicarte claramente con las partes interesadas en su proyecto al ejecutar un cambio de licencia.¿Necesita mi proyecto un acuerdo adicional de colaboradores?Probablemente no. En la mayoría de los proyectos de código abierto, una licencia de código abierto sirve implícitamente de licencia tanto para el interior (colaboradores) como para el exterior (a otros colaboradores y usuarios). Si tu proyecto se encuentra en GitHub, los Términos de Servicio de GitHub al hacen “entrante=saliente” la explícita por defecto.Un acuerdo adicional de colaboradores – a menudo llamado Acuerdo de Licencia de colaboradores (en inglés, CLA) – puede crear trabajo administrativo para mantenedores de proyecto. La cantidad de trabajo que suma un acuerdo depende del proyecto y su implementación. Un acuerdo simple puede requerir que los colaboradores confirmen, con un click, que tienen los derechos necesarios para contribuir bajo la licencia de condigo abierto del proyecto. Un acuerdo más complicado, requerirá revisión legal y la aprobación de los empleadores del contribuyente.También, al añadir “papeleo” que algunos consideran innecesario, difícil de entender, o injusto (cuando el beneficiario del acuerdo obtiene más derechos que los colaboradores o el público a través de la licencia de código abierto del proyecto), un acuerdo adicional de colaboradores puede ser percibido poco amigable a la comunidad del proyecto.      Hemos eliminado la CLA para Node.js. Esto, reduce la barrera de entrada para colaboradores de Node.js, ampliando asi la base de contribuyentes.  — @bcantrill, “Broadening Node.js Contributions”  Algunas situaciones en las cuales deberías considerar un acuerdo adicional de colaboradores pueden ser:      Tus abogados quieren que todos los colaboradores acepten expresamente (firma, online o offline) los términos de contribución, quizás porque sienten que una licencia de código abierto no es suficiente (incluso cuando lo sea!). Si este es la única preocupación, un acuerdo adicional de colaboradores que afirme la licencia de código abierto del proyecto, debería ser suficiente. El Acuerdo Adicional de colaboradores Individual de jQuery es un buen ejemplo de un acuerdo adicional de colaboradores ligero. Para algunos proyectos, un Certificado de Origen del Desarrollador puede ser una alternativa aún más simple.        Tu proyecto usa una licencia de código abierto que no incluye una concesión de patentes explicita (como MIT), y necesitas una concesión de patentes por parte de todos los colaboradores, algunos de los cuales quizás trabajen para empresas con grandes cantidades de patentes que podrían utilizarse para dirigirse a usted o a otros contribuyentes y usuarios del proyecto. El Acuerdo Adicional de colaboradores Individual de Apache es un acuerdo adicional de colaboradores que posee una concesión de patentes reflejando el que se encuentra en Apache License 2.0.        Tu proyecto está bajo una licencia copyleft, pero también necesitas distribuir una versión propietaria del proyecto. Necesitaras que cada colaborador te asigne sus derechos de autor o te garantice a ti (pero no al público) una licencia permisiva. El Acuerdo de colaboradores MongoDB es un ejemplo de este tipo de acuerdo.        Crees que el proyecto necesitara cambiar la licencia durante su tiempo de vida y quieres que los colaboradores acepten por adelantado esos cambios.  Si necesitas usar un acuerdo adicional de colaboradores para tu proyecto, considere el uso de una integración como CLA assistant para minimizar la distracción de los contribuyentes.¿Qué necesita saber el equipo legal de mi empresa?Si vas a lanzar un proyecto de código abierto como un empleado de una empresa, primero, tu equipo legal debería saber que estás por lanzar un proyecto de código abierto.Para mejor, o peor, considera comentarles incluso en el caso en que sea un proyecto personal.Probablemente tengas un “acuerdo IP de empleado” con tu empresa que les da cierto tipo de control sobre tus proyectos, especialmente si ellos están relacionados con el negocio de la empresa o si utilizan recursos de la empresa para desarrollar el proyecto. Tu empresa debería brindarte fácilmente permisos, y tal vez ya cuentes con ellos a través de un acuerdo de IP amigable hacia los empleados o mediante políticas empresariales. Si no es el caso, puedes negociar (por ejemplo, explicar que su proyecto posee objetivos profesionales de aprendizaje y desarrollo de la empresa para ti), o evitar trabajar en proyectos hasta que encuentres una mejor empresa.Si estás trabajando en un proyecto de código abierto para tu empresa entonces definitivamente debes hacerles saber. Tu equipo legal seguramente ya cuenta con políticas para esa licencia de código abierto (y puede que también un acuerdo adicional de colaboradores) para usar basado en los requisitos y pericia del negocio de la empresa para asegurar que tu proyecto cumple con la licencia de sus dependencias. De lo contrario, tanto tu como ellos, están de suerte! tu equipo legal debería estar ansioso por trabajar con usted para acordar estas cosas. Algunos aspectos a considerar:      Material de terceros   ¿tiene tu proyecto dependencias creadas por otros o bien incluye o usa códigos ajenos? Esto comienza con la elección de una licencia que funcione con las licencias de código abierto de terceros (ver arriba). Si su proyecto modifica o distribuye código abierto de terceros, su equipo legal también querrá saber si cumple con otras condiciones de las licencias de código abierto de terceros, como la retención de avisos de derechos de autor. Si tu proyecto utiliza código de otros que no tienen una licencia de código abierto, probablemente tendrás que pedirle a los mantenedores que agreguen una licencia de código abierto, y si no puedes conseguir una, deja de usar su código en tu proyecto.        Secretos comerciales:   Considera si hay algo en el proyecto que la empresa no quiere poner a disposición del público en general. Si es así, puedes hacer de código abierto al resto del proyecto, después de extraer el material que desea mantener privado.        Patentes: ¿Esta tu empresa solicitando una patente, cuya liberación del código fuente del proyecto implique una revelación pública? Tristemente, puede que te pidan que esperes (o tal vez, la empresa volverá a considerar la sabiduría de la aplicación). Si estás esperando contribuciones a tu proyecto de los empleados de empresas con cantidades grandes de patentes, tu equipo legal puede que desee que utilices una licencia con una concesión de patente expresa de los contribuyentes (como Apache 2.0 o GPLv3), o un acuerdo adicional de colaboradores (ver más arriba).        Marca comercial Verifica que el nombre de tu proyecto no entre en conflicto con alguna marca existente. Si utilizas marcas comerciales de tu empresa en el proyecto, comprueba que no genere ningún conflicto. FOSSmarks es una guía práctica para la comprensión de las marcas en el contexto de los proyectos de código libre y abierto.        Privacidad ¿Recolecta tu proyecto datos de sus usuarios? ¿Recopila su proyecto datos en los servidores de la empresa sin el consentimiento de los usuarios??  tu equipo legal puede ayudarte a cumplir con las políticas de la empresa y las regulaciones externas.  Si estás lanzando el primer proyecto de código abierto de tu empresa, lo anterior es más que suficiente para conseguirlo.A largo plazo, tu equipo legal puede hacer más para ayudar a la empresa a obtener su participación en código abierto y mantenerse a salvo:  Políticas de contribución de empleados:  Considera la posibilidad de desarrollar una política corporativa que especifique cómo sus empleados contribuyen a proyectos de código abierto. Una política clara reducirá la confusión entre sus empleados y los ayudará a contribuir a proyectos de código abierto de la empresa, ya sea como parte de su trabajo o en su tiempo libre. Un buen ejemplo es Rackspace’s Model IP and Open Source Contribution Policy.    Liberar el IP asociado con un parche genera la base de conocimientos y la reputación del empleado. Demuestra que la empresa invierte en el desarrollo del empleado y crea un sentido de autonomía y autonomía. Todos estos beneficios también conducen a una mayor moral y mejor retención de empleados.  — @vanl, “A Model IP and Open Source Contribution Policy”           Qué liberar: ¿(casi) todo? Si tu equipo legal entiende e invierte en la estrategia de código abierto de su empresa, serán más capaces de ayudar en lugar de dificultar tus esfuerzos.        Conformidad: Incluso si tu empresa no libera ningún proyecto de código abierto, utiliza otro software de código abierto. La conciencia y el proceso puede prevenir dolores de cabeza, retrasos del producto, y demandas.    Las organizaciones deben tener una estrategia de licencia y cumplimiento que se ajuste tanto a categorías [“permisiva” y “copyleft”]. Esto comienza con el mantenimiento de un registro de los términos de licencia que se aplican al software de código abierto que está utilizando - incluidos subcomponentes y dependencias.  — Heather Meeker, “Open Source Software: Compliance Basics And Best Practices”        Patentes: Es posible que su empresa desee unirse a la Red de Invención Abierta, Un conjunto de patentes defensivas compartido para proteger el uso de los miembros de los principales proyectos de código abierto, o explorar otras licencias de patentes alternativas.        Gobernancia:   Especialmente si tiene sentido mover un proyecto a una entidad jurídica ajena a la empresa.  ",
    "url": "/es/legal/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/es/legal/\">\n      Aspectos legales del codigo abierto.\n    </a>\n  </h2>\n  <h2 id=\"entendiendo-las-implicaciones-legales-del-código-abierto\">Entendiendo las implicaciones legales del código abierto</h2>\n\n\n</div>\n"
  },

  
  "/es/metrics/": {
    "title": "M&amp;eacute;tricas de c&amp;oacute;digo abierto",
    "content": "¿Para qué medir algo?Los datos, usados de forma sabia, pueden ayudarte a tomar mejores decisiones.Con más información puedes:  Entender cómo los usuarios responden a una nueva característica  Determinar de dónde provienen nuevos usuarios  Identificar y decidir si conviene brindar soporte a una parte separada de funcionalidad  Cuantificar la popularidad de tu proyecto  Entender cómo es usado tu proyecto  Obtener dinero a través de publicidad, donaciones, entre otrosPor ejemplo, Homebrew descubrió que Google Analytics los ayuda a priorizar el trabajo  Homebrew es gratuito y lo trabajan por completo voluntarios con algo de tiempo libre. Como resultado, no tenemos los recursos para obtener estudios detallados de usuarios, y así determinar cómo diseñar características y priorizar nuestro trabajo actual. Análisis de usuarios anónimos nos permiten priorizar arreglos y características basadas en cómo, dónde y cuándo las personas utilizan Homebrew.La popularidad no lo es todo. Todos se involucran en el Código Abierto por diferentes razones. Si tu meta como encargado de mantener un proyecto es mostrar tu trabajo, mantener transparente el código, o simplemente divertirte, las métricas quizás no sean tan importantes.Si tu estás interesado en entender tu proyecto a un nivel más profundo, debes leer formas de analizar la actividad del mismo.DescubrimientoAntes de que alguien pueda usar o contribuir a tu proyecto, quizás necesiten saber que el mismo existe. Debes preguntarte: ¿Las personas pueden encontrar el proyecto?Si tu proyecto está hosteado en GitHub, puedes ver cuántas personas lo visitan, y de dónde vienen. En la página de tu proyecto haz click en “Graphs”, y luego “Traffic”. En esta página puedes ver:      Total de vistas: Informa la cantidad de veces que tu página fue vista        Total de visitantes únicos: Te dice la cantidad de personas que vieron tu proyecto        Sitios de referencia: Te dice de dónde vienen las visitas. Puede ayudar a detectar el público al cual apuntar, o para determinar si tu publicidad está dando resultado.        Contenido popular: Te informa sobre las partes del proyecto que la gente más visita.  GitHub stars puede brindarte una línea base para medir popularidad. No necesariamente tiene que ver con uso o cantidad de decargas, si no más bien según la cantidad de notoriedad de tu proyecto.Quizás también quieras rastrear la forma que te descubren desde lugares específicos: por ejemplo, Google PageRank, tráfico que hace referencia a tu página web del proyecto, o referencias desde otros proyectos.UsoLas personas hallan tu proyecto en ese lugar salvaje y loco llamado Internet. Lo mejor sería que, cuando vean tu proyecto, se sientan obligados o atraídos a hacer algo. La segunda pregunta que queremos hacer es: ¿Las personas están usando tu proyecto?Si usas un administrador de paquetes, como npm o Rubygems.org para distribuir tu proyecto, quizás quieras rastrear las descargas del mismoCada administrador de paquetes usa diferentes definiciones de “descarga”, y las descargas no están necesariamente relacionadas con la instalación o el uso, pero provee una línea base para la comparación. Trata de usar Libraries.io para rastrear el uso de estadísticas a través de algunos de los administradores de paquetes más populares.Si tu proyecto está en GitHub, navega nuevamente a “Traffic”. Puedes usar clone graph para ver cuántas veces tu proyecto ha sido clonado en un día determinado.Si el uso es bajo comparado con el número de personas descubriendo tu proyecto, debes considerar que estás enfrentando uno de dos problemas:  Tu proyecto no está atrayendo exitosamente a la audiencia, o  estás atrayendo a la audiencia incorrectaPor ejemplo, si tu proyecto figura en la página principal de Hacker New, muy probablmente vas a ver un salto en “Traffic”, pero una tasa de conversión baja, porque estás alcanzando a todos en Hacker News. En cambio, si tu proyecto en Ruby está siendo publicitado en una conferencia de Ruby, muy probablmente verás una tasa de conversión mayor.Trata de deducir de dónde proviene tu audiencia, y pide feedback a otros para saber cuál de los dos problemas estás enfrentando.Una vez que sepas que las personas usan tu proyecto, quizás quieras probar determinar qué es lo que hacen con él. ¿Lo usan para proyectos de investigación o negocios? ¿Realizan “fork” al mismo y están agregando nuevas características?RetenerLa gente está hallando tu proyecto y lo están usando. La siguiente pregunta que debes hacerte es: ¿Las personas están contribuyendo al proyecto?Nunca es demasiado temprano para comenzar a pensar en los contribuyentes. Sin otras personas te arriesgas a enfrentar una situación donde tu proyecto es popular (muchas personas lo usan) pero no soportado (no hay tiempo suficiente para mantener el proyecto y afrontar la demanda).Retener también requiere un flujo de nuevos contribuyentes, debido a que contribuyentes activos pueden, en algún momento, continuar hacia en otros proyectos.Ejemplos de métricas de comunidad que quieres rastrear incluyen:  El total de commits por contribuyente, y el número de ellos: Te informa cuántos contribuyentes tienes y quién es más o menos activo. En GitHub, pudes ver esto debajo de “Graphs” -&gt; “Contributors”. Actualmente esté gráfico solo cuenta los contribuyentes que han hecho algún commit a la rama por defecto del repositorio.      Contribuyentes nuevos, casuales y repetidos Te ayuda a rastrear si estás obteniendo nuevos contribuyentes, y si vuelven. (Los casuales son aquellos con un número bajo de commits, elige tu criterio para definir dicho número). Sin nuevos contribuyentes, la comunidad de tu proyecto puede permanecer estancada.        Número de issues y pull requests abiertos: Si estos números se hacen muy grandes necesitarás ayuda para revisar el código.        Número de issues y pull requests que han sido abiertos: Los issues abiertos significan que alguien se preocupa lo suficiente por tu proyecto para abrir un issue. Si ese número incremente con el tiempo sugiere que las personas están interesadas en tu proyecto.        Tipos de contribución: Por ejemplo commits, arreglar typos, solucionar bugs o comentando en un issue.      Código Abierto es más que solo código. Proyectos de este tipo exitosos han incluido contribuciones de código y documentación acompañados por una conversación acerca de estos cambios.  — @arfon, “The Shape of Open Source”  Actividad de mantenimientoFinalmente, quizás quieras cerrar el ciclo de asegurarte si los encargados de mantener tu proyecto pueden manejar el volumen de contribuciones que se vayan a recibir. La última pregunta que quieres hacerte es: ¿Estoy/Estamos listo/s para responder a la comunidad?Encargados de mantenimiento que no respondan pueden volverse un cuello de botella en tu proyecto. Si alguien hace una contribución pero no recibe noticia del encargado de mantenimiento, esta persona puede sentirse desmotivada y por ende abandonar el proyecto.Investigación de Mozilla sugiere que la sensibilidad y respuesta de los encargados de mantenimiento es un factor crítico a la hora de motivar nuevas contribuciones.Considera rastrear cúanto te lleva a ti, o otro encargado, responder a contribuciones, ya sea in issue o un pull request. Responder no requiere realizar ninguna acción, puede ser tan simple cómo decir: “Graacias por tu contribución, lo revisaré dentro de esta semana.”También puedes medir el tiempo que te lleva el moverte entre etapas del proceso de contribución, como por ejemplo:  Tiempo promedio en que un issue permanece abierto  Si los issues quedan cerrados por pull requests  Si los stale issues se cierran  Tiempo promedio de merge de un pull requestUsa 📊 para aprender acerca de las personasEntender métricas te ayudará a construir un proyecto activo y fructífero. Aunque no rastrees cada métrica en un dashboard, usa un framework que te permita enfocarte en el tipo de comportamiento que ayudará a tu proyecto a prosperar.",
    "url": "/es/metrics/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/es/metrics/\">\n      M&eacute;tricas de c&oacute;digo abierto\n    </a>\n  </h2>\n  <h2 id=\"para-qué-medir-algo\">¿Para qué medir algo?</h2>\n\n\n</div>\n"
  },

  
  "/es/starting-a-project/": {
    "title": "Comenzando un proyecto de C&amp;oacute;digo Abierto",
    "content": "El cómo y el por qué del Código Abierto¿Estás pensando cómo comenzar un proyecto de c&amp;oacut;digo abierto? ¡Felicitaciones! El mundo aprecia tu contribución. Hablemos sobre lo que es un proyecto de código abierto y porqué la gente lo lleva adelante¿Qué significa “Código Abierto”?Cuando un proyecto es de código abierto, significa que cualquier persona puede ver, modificar, usar o distribuir tu proyecto para cualquier fin. Estos permisos están reforzados a través de una licencia de código abierto.“Código Abierto” es poderoso debido a que reduce las dificultades de adopción, permitiendo que las ideas se esparzan rápidamente.Para entender cómo funciona, imagina a un amigo que organiza una comida, te invita, y llevas una torta.  Todos prueban la torta (usarlo)  ¡La torta es un éxito! Te piden la receta, la cuál tú das. (estudiarlo/verlo)  Un amigo, Pedro, es cocinero, y te sugiere colocar menos azúcar (modificarlo)  Otro amigo, Juan, te pide permiso para usarlo en una cena que tendrá la próxima semana (distribuirlo)Realicemos una comparación: un proceso de código cerrado sería ir a un restaurante y pedir una porción de torta. Para ello tendrías que pagar por la misma, y el restaurante muy probablemente no te dará su receta. Si decidieras copiar su torta y venderla bajo otro nombre, el restaurante podría recurrir a acciones legales en contra.¿Por qué las personas utilizan el “Código Abierto”?    Una de las experiencias más gratificantes que obtengo de usar y colaborar en “Código abierto” proviene de las relaciones que construyo con cada uno de los desarrolladores que se encuentran enfrentando los mismos problemas que yo.  — @kentcdodds, “How getting into Open Source has been awesome for me”  Hay muchas razones por las cuales una persona u organización querrían involucrarse en un proyecto de código abierto. Algunos ejemplos son:      Colaboración: Los proyectos de código abierto pueden aceptar cambios efectuados por cualquier persona alrededor del mundo. Exercism, por ejemplo, una plataforma para ejercicios de programación con más de 350 colaboradores.        Adopción y remezcla: Los proyectos de código abierto puedne ser usados por cualquiera para casi cualquier própósito. Las personas pueden usarlos hasta para construir otras cosas. WordPress, por ejemplo, comenzaron como un “fork” de un proyecto existente llamado b2.        Transparencia: Cualquiera puede inspeccionar un proyecto de este tipo, ya sea para encontrar errores como inconsistencias. La transparencia es de importancia para gobiernos como el de Bulgaria o United States, para industrias reguladas como la bancaria o la del cuidado de la salud, y para la seguridad del software como Let’s Encrypt.  Código abierto no es solamente software. Uno puede “abrir” cualquier cosa, desde conjuntos de datos, hasta libros. Mira esto GitHub Explore para tener otros ejemplos.¿“Código Abierto” significa gratis?Una de las cosas que causa confusión es el que el código abierto no cuesta dinero, es decir, es gratuito. Sin embargo, es un subproducto del valor general del “Código abierto”.Esto es debido a que una licencia open source requiere que cualquiera pueda usar, modificar, y compartir sus proyectos para casi cualquier propósito, y los proyectos en sí mismos suelen ser gratuitos. Si el uso del proyecto cuesta dinero, cualquiera puede legalmente hacer una copia del mismo y usar la versión gratuita en su lugar.El resultado es que la mayor parte de los proyectos de este tipo son gratuitos, pero “gratuito” no forma parte de la definición del “Código Abierto”. Hay formas de cobrar por estos proyectos en forma indirecta a través de licencias duales o funcionalidad limitada, y al mismo tiempo cumplir con la definición oficial del “Código Abierto”.¿Debería lanzar mi propio proyecto de Código Abierto?La respuesta corta es “Sí”, debido a que, sin importar lo que suceda, lanzar tu propio proyecto es una buena forma de aprender acerca de cómo funciona el código abierto.Si nunca has utilizado este concepto en el pasado, probablemente estés preocupado de lo que otras personas digan, o que no digan nada. Si esto es así, debes saber que no estás solo.El código abierto funciona como cualquier otra actividad creativa, ya sea escribir o pintar. Puede dar miedo de compartir algo con el mundo, pero la única forma de mejorar es practicar (aún si no tienes una audiencia).Si no estás convencido todavía, toma un momento para pensar acerca de cuáles serán tus objetivos.Definiendo tus objetivosLos objetivos pueden ayudarte a detectar puntos en los que continuar trabajando, a qué decirle que no, y a dónde recurrir por ayuda. Comienza preguntándote, ¿Por qué estoy haciendo “código abierto” a mi proyecto?No hay nunca una respuesta correcta a la ésta pregunta. Puedes tener múltiples objetivos para un solo proyecto, o diferentes proyectos con diferentes objetivos.Si tu único objetivo es mostrar al mundo tu trabajo, quizás no necesites ni quieras contribución, y quizás digas eso en el README. Por otra parte, si quieres ayuda, invertirás tiempo en clarificar la documentación y en hacer sentir a los recién llegados bienvenidos.    En algún punto creé un UIAlertView personalizado que estaba usando… I decidí hacerla código abierto. Entonces la modifiqué para que fuera más dinámica y la subí a GitHub. Además escribí mi primera documentación explicando a otros desarrolladores cómo usarla en sus proyectos. Probablemente nadie jamás la haya usado porque era un proyecto muy simple, pero me sentía bien habiendo contribuido.  — @mavris, “Self-taught Software Developers: Why Open Source is important to us”  A medida que tu proyecto crezca, tu comunidad podrá llegar a necesitar más que solamente el código. Es decir, necesitará que respondas a issues, que revises el código, entre otras tareas importantes en un proyecto de esta clase.El tiempo que dediques a tareas ajenas a codificar dependerá del tamaño y alcance de tus proyectos, deberías estar preparado, como encargado de mantenimiento, a afrontarlas por tu cuenta o encontrar a alguien que pueda ayudarte.Si eres parte de una compañia que quiere “abrir” el código de un proyecto, debes asegurarte que el mismo tiene recursos internos que necesitan mejorar. Necesitarás identificar al responsable de mantener el proyecto una vez lanzado, y definir cómo vas a compartir esas tareas con tu comunidad.Si necesitas un presupuesto dedicado o personal para la promoción, operación y mantenimiento del proyecto, empieza esas conversaciones de forma temprana.    A medida que abres el código de tu proyecto, es importante que puedas asegurarte de que los procesos de administración tengan en cuenta a las contribuciones y a las habilidades de la comunidad alrededor de tu proyecto. No hay que asustarse al involucrar contribuyentes, que no estén empleados en tu empresa, en aspectos claves del proyecto (especialmente si son contribuyentes frecuentes).  — @captainsafia, “So you wanna open source a project, eh?”  Contribuyendo en otros proyectos.Si tu meta es aprender cómo contribuir con otros o entender cómo funciona el “código abierto”, considera contribuir en proyectos existentes. Comienza con proyectos que ya has estado usando y que te gustan. Contribuir a un proyecto puede ser tan simple como arreglar “typos” o actualizar documentación.Si no sabés como comenzar a contribuir, mira esto Guía sobre cómo contribuir.Lanzando tu propio proyecto de Código AbiertoNo hay momento prefecto para abrir el código de tu trabajo. Puedes abrir el de una idea, el de un trabajo en progreso, o después de varios años de ser un proyecto cerrado.Generalmente, puedes abrir el código de tu proyecto cuando te sientas cómodo de que otras personas vean y te aconsejen sobre tu trabajo.No importa en qué etapa decidas hacerlo, cada proyecto debe incluir la siguiente documentación.  Licencia de Código Abierto  README  Pautas para contribuir  Código de conductaComo encargado de mantenimiento, estos componentes ayudarán a comunicar tus deseos, manejar tus contribuciones y proteger los derechos legales de cada uno (incluyéndote). Incrementan significativamente tus posibilidades de tener una experiencia positiva.Si tu proyecto está en GitHub, colocar estos archivos en tu directorio raíz con las recomendaciones de nombrado de los mismos, te ayudará a que GitHub los reconozca automáticamente y muestre a tus lectores.Eligiendo una licenciaUna licencia de Código Abierto garantiza que otros puedan usar, copiar, modificar y contribuir en tu proyecto sin problemas. Además ayuda a protegerte de situaciones legales complejas. Debes elegir una licencia cuando inicias tu proyecto!El trabajo legal no es divertido. La buena noticia es que puedes copiar y pegar una licencia existente en tu repositorio. Solo llevará un minuto proteger tu trabajo.MIT, Apache 2.0, y GPLv3 son las licencias más populares, pero hay otras opciones para elegir.Cuando creas un nuevo proyecto en GitHub, te dan la opción de seleccionar una licencia. Incluir una licencia de Código Abierto hará tu proyecto efectivamente de Código Abierto.Si tienes otras preguntas acerca del aspecto legal al manejar proyectos de este tipo, te tenemos cubierto.Escribiendo un READMELos README hacen más que explicar cómo usar tu proyecto, también explican por qué importa el mismo, y qué pueden hacer los usuarios con él.Trata de que tu README responda a las siguientes preguntas:  ¿Qué hace el proyecto?  ¿Por qué es útil?  ¿Cómo se debe comenzar?  ¿Dónde puedo buscar más información? (si es que la necesito)Puedes usarlo para responder otras preguntas: cómo manejo las contribuciones, cuáles son las metas del proyecto, e información acerca de licencias y atribuciones. Si no quieres aceptar contribuciones, o tu proyecto no está listo para producción, lo escribes.    Mejor documentación significa más usuarios, menos pedidos de soporte, y más contribuyentes. Recuerda que tus lectores no son tú, son personas que quizás acudan al proyecto con experiencias totalmente distintas a las tuyas.  — @limedaring, “Writing So Your Words Are Read (video)”  Algunas veces las personas evitan escribir el README debido a que sienten que su proyecto está incompleto, o qué no quiere contribuciones. Ambas son muy buenas razones para escribir uno…Para más inspiración, trata de usar @18F’s “Making READMEs Readable” o @PurpleBooth’s README template para escribir un README.Cuando incluyes un archivo de este tipo en tu directorio raíz, GitHub automáticamente lo mostrará en la página principal del repositorio.Escribiendo las pautas para contribuirUn archivo CONTRIBUTING le da información a la audiencia acerca de cómo participar en el proyecto, por ejemplo:  Cómo archivar un reporte de bug (trata de usar issue and pull request templates)  Cómo sugerir una nueva funcionalidad/característica.  Cómo establecer tu entorno y correr pruebas.Además de detalles técnicos, este archivo es una oportunidad para comunicar tus expectativas, como:  Los tipos de contribución que esperas  Tu visión del proyecto (La hoja de ruta)  Cómo deberían comunicarse (o cómo no) los contribuyentes contigo.Usando un tono cálido y amigable, y ofreciendo sugerencias específicas para contribuciones puede ayudar a los iniciados a sentirse bienvenidos y ansiosos de participar.Por ejemplo, Active Admin comienza su guía de contribuciones con:  Primero, muchas gracias por considerar contribuir a Active Admin. Son personas como ustedes las que la hacen una gran herramienta.En las primeras etapas del proyecto, tu archivo CONTRIBUITNG puede ser simple. Siempre debes explicar cómo reportar bugs o issues, y cualquier requerimiento técnico (como tests) para hacer una contribución.Con el tiempo, quizás debas agregar otras “preguntas frecuentes” a tu archivo. Escribir ésta información significa que menos personas te preguntarán nuevamente la misma pregunta.Para más información sobre este tema, puedes acceder a @nayafia’s contributing guide template o @mozilla’s “How to Build a CONTRIBUTING.md”.Vincula tu CONTRIBUTING desde tu README, así más personas pueden verlo.Si tu colocas el archivo en tu repositorio, GitHub automáticamente lo vinculará cuando un contribuyente cree un issue o abra un pull request.Estableciendo un código de conducta.    Todos hemos experimentado cierta sensación de abuso cuando nos han tratado de explicar por qué algo tiene que ser de determinada forma, o como usuarios al hacer una pregunta simple. (…) Un código de conducta se vuelve una forma sencilla (referenciable y vinculable) de documento que nos indica que un equipo toma las críticas constructivas seriamente.  — @mlynch, “Making Open Source a Happier Place”  Finalmente, un código de conducta ayuda a establecer reglas base de comportamiento para los participantes de tus proyectos. Esto es muy deseable si estás lanzando un nuevo proyecto de código abierto para una compañía o comunidad. Un código de conducta facilita un comportamiento en comunidad sano y constructivo, reduciendo tu estrés como encargado de mantenimiento.Para más información, entra a Guía del Código de Conducta.Además de comunicar cómo esperas que se comporten los participantes, un código de conducta tiende a describir a quién se aplican las expectativas, cuando apliquen, y qué hacer si una violación a las mismas ocurre.Como muchas licencias de código abierto, existen estándares emergentes para códigos de conducta para que no debas escribir uno propio. El Contributor Covenant es un código de conducta usado por más de 40000 proyectos de código abierto, incluyendo Kubernetes, Rails, and Swift. Debes estar preparado para redefinir el tuyo cuando sea necesario.Copia el texto directamente en el archivo CODE_OF_CONDUCT dentro de tu repositorio, en el directorio raíz, y vinculalo desde tu README.Dando un nombre y una marca a tu proyectoLa marca es más que elegir un nombre atractivo y un buen logo. Es acerca de cómo hablar de tu proyecto y llegar a la gente.Eligiendo el nombre correctoDebes elegir un nombre sencillo de recordar y que en lo posible de una idea de lo que el proyecto hace. Ejemplos son:  Sentry monitorea apps  Thin es un server de RubySi estás construyendo sobre un proyecto ya existente, usar su nombre como prefijo suele clarificar lo que el mismo hace (ejemplo: node-fetch trae window.fetch a Node.js).Considera claridad por sobre todo. Los chismes son divertidos,pero recuerda que algunas bromas pueden no ser traducidas otros idiomas o llevadas a otras culturas, con gente que posee diferentes experiencias a las tuyas. Algunos de tus potenciales usuarios pueden ser empleados de la compañía: no debes hacerlos sentir incómodos cuando tienen que explicar tu proyecto en el trabajo!Evitando conflictos con los nombresBusca proyectos con el mismo nombre, o similar, especialmente si compartes el mismo ecosistema o idioma. Si tu nombre coincide con algún otro proyecto popular, puede confundir a las personas.Si quieres una página web, manejo de Twitter, u otros ítems que representen tu proyecto, asegurate de que puedas asignar el nombre que quieras. En lo posible, reserva tu nombre ahora para estar tranquilo, aunque aún no lo vayas a usar.Tu nombre no debe infringir ninguna marca (trademark), de ser así la compañía puede pedirte que des de baja a tu proyecto, o puede tomar acciones legales en tu contra. No vale el riesgo.Puedes verificar WIPO para verificar conflictos de este tipo. Si estás en una compañía, ésta es una de las cosas con las cual tu equipo legal puede ayudar.Finalmente, haz una búsqueda rápida en Google: ¿Las personas podrán encontrar rápidamente el nombre? ¿En los resultados de búsqueda aparece algo que no quieres que ellos vean?Cómo escribir y codificar afecta tu marcaDurante el ciclo de vida de tu proyecto, escribirás una serie grande de documentos: README, tutoriales, issues, etc..Ya sea documentación oficial como casual (un email), tu estilo de redacción debe ser parte de la marca de tu proyecto. Considera cómo será visto por tu audiencia y si es o no adecuado.    He tratado de involucrarme con cada hilo del listado de emails, y mostrando un comportamiento ejemplar, siendo agradable con las personas, tomando sus issues seriamente y tratando de ser de ayuda por sobre todo. Después de un tiempo las personas no solo me buscaban para hacerme preguntas si no para ayudarme a responderlas, y, para mi sorpresa, imitaban mi estilo.  — @janl on CouchDB, “Sustainable Open Source”  Usando un lenguaje inclusivo, puede ir lejos haciendo que tus proyectos reciban de forma más cálida a los nuevos participantes. Mantén un lenguaje simple.Luego de cómo expresarte, tu estilo a la hora de codificar puede ser importante también. Angular y jQuery son ejemplos de proyectos con un riguroso trato en este sentido.No es necesario escribir una “guía de estilo” para tus proyectos cuando recién estás comenzando, y quizás hasta descubras que disfrutas al incorporar distintos estilos de codificación en tu proyecto. Pero deberías anticiparte y definir cómo tu redacción y estilo de codificación puede atraer o no a distintos tipos de personas. Define esto al comienzo.Tu checklist a armar previamente al lanzamiento del proyectoEstás listo para iniciar tu propio proyecto de Código Abierto. Aquí dejamos un checklist que puede ayudar. ¡Una vez marcadas todas las casillas estás listo para continuar! Clickea “publish”.Documentación        El proyecto tiene un archivo LICENCIA con una licencia de C&oacute;digo Abierto.          El proyecto tiene documentaci&oacute;n b&aacute;sica (README, CONTRIBUYENDO, C&oacute;DIGO_DE_CONDUCTA).          El nombre es f&aacute;cil de recordar, da una idea de lo que el proyecto hace, y no entra en conflicto con un proyecto preexistente ni infringe en marcas registadas.          La cola de issues est&aacute; actualizada, organizada y etiquetada.  Code        Los proyectos usan c&oacute;digo consistente en cuanto a las convenciones usadas, adem&aacute;s de nombres claros de funciones, m&eacute;todos y variables.          El c&oacute;digo est&aacute; comentado correctamente, y documentado.          No hay material sensible en la revisi&oacute;n hist&oacute;rica, issues, o pull requests. (Ejemplo: contrase&ntilde;as)  PersonasSi eres un individuo:        Has hablado con el departamento legal y/o entiendes el IP y las pol&iacute;ticas de C&oacute;digo Abierto de tu compa&ntilde;&iacute;a (Si eres empleado en alg&uacute;n lado)  Si eres una compañía u organización:        Has hablado con tu departamento legal.          Tienes un plan de marketing para anunciar y promocionar tu proyecto.          Alguien se ha comprometido a administrar las interacciones de la comunidad.          Al menos dos personas tienen rol y acceso de administradores al proyecto.  ¡Lo has hecho!Felicitaciones por abrir el código de tu primer proyecto! Sin importar el devenir, trabajar en público es un regalo a la comunidad. Con cada commit, comentario y pull request, estás creando oportunidades no solo para ti, si no para que otras personas puedan aprender y crecer.",
    "url": "/es/starting-a-project/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/es/starting-a-project/\">\n      Comenzando un proyecto de C&oacute;digo Abierto\n    </a>\n  </h2>\n  <h2 id=\"el-cómo-y-el-por-qué-del-código-abierto\">El cómo y el por qué del Código Abierto</h2>\n\n\n</div>\n"
  },

  
  "/finding-users/": {
    "title": "Finding Users for Your Project",
    "content": "Spreading the wordThere’s no rule that says you have to promote an open source project when you launch. There are many fulfilling reasons to work in open source that have nothing to do with popularity. Instead of hoping others will find and use your open source project, you have to spread the word about your hard work!Figure out your messageBefore you start the actual work of promoting your project, you should be able to explain what it does, and why it matters.What makes your project different or interesting? Why did you create it? Answering these questions for yourself will help you communicate your project’s significance.Remember that people get involved as users, and eventually become contributors, because your project solves a problem for them. As you think about your project’s message and value, try to view them through the lens of what users and contributors might want.For example, @robb uses code examples to clearly communicate why his project, Cartography, is useful:For a deeper dive into messaging, check out Mozilla’s “Personas and Pathways” exercise for developing user personas.Help people find and follow your project  You ideally need a single “home” URL that you can promote and point people to in relation to your project. You don’t need to splash out on a fancy template or even a domain name, but your project needs a focal point.  — Peter Cooper &amp; Robert Nyman, “How to Spread the Word About Your Code”  Help people find and remember your project by pointing them to a single namespace.Have a clear handle to promote your work. A Twitter handle, GitHub URL, or IRC channel is an easy way to point people to your project. These outlets also give your project’s growing community a place to convene.If you don’t wish to set up outlets for your project yet, promote your own Twitter or GitHub handle in everything you do. Promoting your Twitter or GitHub handle will let people know how to contact you or follow your work. If you speak at a meetup or event, make sure that your contact information is included in your bio or slides.    A mistake I made in those early days (…) was not starting a Twitter account for the project. Twitter’s a great way to keep people up to date about a project as well as constantly expose people to the project.  — @nathanmarz, “History of Apache Storm and Lessons Learned”  Consider creating a website for your project. A website makes your project friendlier and easier to navigate, especially when it’s paired with clear documentation and tutorials. Having a website also suggests that your project is active which will make your audience feel more comfortable using it. Provide examples to give people ideas for how to use your project.@adrianholovaty, co-creator of Django, said that a website was “by far the best thing we did with Django in the early days”.If your project is hosted on GitHub, you can use GitHub Pages to easily make a website. Yeoman, Vagrant, and Middleman are a few examples of excellent, comprehensive websites.Now that you have a message for your project, and an easy way for people to find your project, let’s get out there and talk to your audience!Go where your project’s audience is (online)Online outreach is a great way to share and spread the word quickly. Using online channels, you have the potential to reach a very wide audience.Take advantage of existing online communities and platforms to reach your audience. If your open source project is a software project, you can probably find your audience on Stack Overflow, Reddit, Hacker News, or Quora. Find the channels where you think people will most benefit from or be excited about your work.    Each program has very specific functions that only a fraction of users will find useful. Don’t spam as many people as possible. Instead, target your efforts to communities that will benefit from knowing about your project.  — @pazdera, “Marketing for open source projects”  See if you can find ways to share your project in relevant ways:  Get to know relevant open source projects and communities. Sometimes, you don’t have to directly promote your project. If your project is perfect for data scientists who use Python, get to know the Python data science community. As people get to know you, natural opportunities will arise to talk about and share your work.  Find people experiencing the problem that your project solves. Search through related forums for people who fall into your project’s target audience. Answer their question and find a tactful way, when appropriate, to suggest your project as a solution.  Ask for feedback. Introduce yourself and your work to an audience that would find it relevant and interesting. Be specific about who you think would benefit from your project. Try to finish the sentence: “I think my project would really help X, who are trying to do Y”. Listen and respond to others’ feedback, rather than simply promoting your work.Generally speaking, focus on helping others before asking for things in return. Because anyone can easily promote a project online, there will be a lot of noise. To stand out from the crowd, give people context for who you are and not just what you want.If nobody pays attention or responds to your initial outreach, don’t get discouraged! Most project launches are an iterative process that can take months or years. If you don’t get a response the first time, try a different tactic, or look for ways to add value to others’ work first. Promoting and launching your project takes time and dedication.Go where your project’s audience is (offline)Offline events are a popular way to promote new projects to audiences. They’re a great way to reach an engaged audience and build deeper human connections, especially if you are interested in reaching developers.If you’re new to public speaking, start by finding a local meetup that’s related to the language or ecosystem of your project.    I was pretty nervous about going to PyCon. I was giving a talk, I was only going to know a couple of people there, I was going for an entire week. (…) I shouldn’t have worried, though. PyCon was phenomenally awesome! (…) Everyone was incredibly friendly and outgoing, so much that I rarely found time not to talk to people!  — @jhamrick, “How I learned to Stop Worrying and Love PyCon”  If you’ve never spoken at an event before, it’s perfectly normal to feel nervous! Remember that your audience is there because they genuinely want to hear about your work.As you write your talk, focus on what your audience will find interesting and get value out of. Keep your language friendly and approachable. Smile, breathe, and have fun.    When you start writing your talk, no matter what your topic is, it can help if you see your talk as a story that you tell people.  — Lena Reinhard, “How to Prepare and Write a Tech Conference Talk”  When you feel ready, consider speaking at a conference to promote your project. Conferences can help you reach more people, sometimes from all over the world.Look for conferences that are specific to your language or ecosystem. Before you submit your talk, research the conference to tailor your talk for attendees and increase your chances of being accepted to speak at the conference. You can often get a sense of your audience by looking at a conference’s speakers.    I wrote very nicely to the JSConf people and begged them to give me a slot where I could present it at JSConf EU. (…) I was extremely scared, presenting this thing that I had been working on for six months. (…) The whole time I was just thinking, oh my God. What am I doing here?  — @ry, “History of Node.js” (video)  Build a reputationIn addition to the strategies outlined above, the best way to invite people to share and contribute to your project is to share and contribute to their projects.Helping newcomers, sharing resources, and making thoughtful contributions to others’ projects will help you build a positive reputation. Being an active member in the open source community will help people have context for your work and be more likely to pay attention to and share your project. Developing relationships with other open source projects can even lead to official partnerships.    The only reason urllib3 is the most popular third-party Python library today is because it’s part of requests.  — @shazow, “How to make your open source project thrive”  It’s never too early, or too late, to start building your reputation. Even if you’ve launched your own project already, continue to look for ways to help others.There is no overnight solution to building an audience. Gaining the trust and respect of others takes time, and building your reputation never ends.    PhantomJS was released for the first time in the beginning of 2011. (…) I spread the word in the usual ways: I tweeted about it, I wrote blog posts on things you could do with it, I mentioned it during various discussions in meetups. When it became more well known in 2014, I started giving presentations about it.  — @ariya, “Maintainer Stories”  Keep at it!It may take a long time before people notice your open source project. That’s okay! Some of the most popular projects today took years to reach high levels of activity. Focus on building relationships instead of hoping that your project will spontaneously gain popularity. Be patient, and keep sharing your work with those who appreciate it.",
    "url": "/finding-users/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/finding-users/\">\n      Finding Users for Your Project\n    </a>\n  </h2>\n  <h2 id=\"spreading-the-word\">Spreading the word</h2>\n\n\n</div>\n"
  },

  
  "/getting-paid/": {
    "title": "Getting Paid for Open Source Work",
    "content": "Why some people seek financial supportMuch of open source work is volunteered. For example, someone might come across a bug in a project they use and submit a quick fix, or they might enjoy tinkering with an open source project in their spare time.  I was looking for a “hobby” programming project that would keep me occupied during the week around Christmas. (…) I had a home computer, and not much else on my hands. I decided to write an interpreter for the new scripting language I had been thinking about lately. (…) I chose Python as a working title.  — @gvanrossum, “Programming Python”  There are many reasons why a person would not want to be paid for their open source work.  They may already have a full-time job that they love, which enables them to contribute to open source in their spare time.  They enjoy thinking of open source as a hobby or creative escape and don’t want to feel financially obligated to work on their projects.  They get other benefits from contributing to open source, such as building their reputation or portfolio, learning a new skill, or feeling closer to a community.    Financial donations do add a feeling of responsibility, for some. (…) It’s important for us, in the globally connected, fast-paced world we live in, to be able to say “not now, I feel like doing something completely different”.  — @alloy, “Why We Don’t Accept Donations”  For others, especially when contributions are ongoing or require significant time, getting paid to contribute to open source is the only way they can participate, either because the project requires it, or for personal reasons.Maintaining popular projects can be a significant responsibility, taking up 10 or 20 hours per week instead of a few hours per month.    Ask any open source project maintainer, and they will tell you about the reality of the amount of work that goes into managing a project. You have clients. You are fixing issues for them. You are creating new features. This becomes a real demand on your time.  — @ashedryden, “The Ethics of Unpaid Labor and the OSS Community”  Paid work also enables people from different walks of life to make meaningful contributions. Some people cannot afford to spend unpaid time on open source projects, based on their current financial position, debt, or family or other caretaking obligations. That means the world never sees contributions from talented people who can’t afford to volunteer their time. This has ethical implications, as @ashedryden has described, since work that is done is biased in favor of those who already have advantages in life, who then gain additional advantages based on their volunteer contributions, while others who are not able to volunteer then don’t get later opportunities, which reinforces the current lack of diversity in the open source community.     OSS yields massive benefits to the technology industry, which, in turn, means benefits to all industries. (…) However, if the only people who can focus on it are the lucky and the obsessed, then there’s a huge untapped potential.  — @isaacs, “Money and Open Source”  If you’re looking for financial support, there are two paths to consider. You can fund your own time as a contributor, or you can find organizational funding for the project.Funding your own timeToday, many people get paid to work part- or full-time on open source. The most common way to get paid for your time is to talk to your employer.It’s easier to make a case for open source work if your employer actually uses the project, but get creative with your pitch. Maybe your employer doesn’t use the project, but they use Python, and maintaining a popular Python project help attract new Python developers. Maybe it makes your employer look more developer-friendly in general.    Like many in open source, I was struggling with the burden of maintaining a project. When I first started doing open source, I used to just stay late to work on it or right when I got home. (…) I was able to discuss with my boss the issues I was facing and we came up with ideas on how we could incorporate open source tasks given our own use of Babel.  — @hzoo, “Maintainer Stories”  If you don’t have an existing open source project you’d like to work on, but would rather that your current work output is open sourced, make a case for your employer to open source some of their internal software.Many companies are developing open source programs to build their brand and recruit quality talent.@hueniverse, for example, found that there were financial reasons to justify Walmart’s investment in open source. And @jamesgpearce found that Facebook’s open source program made a difference in recruiting:  It is closely aligned with our hacker culture, and how our organization was perceived. We asked our employees, “Were you aware of the open source software program at Facebook?”. Two-thirds said “Yes”. One-half said that the program positively contributed to their decision to work for us. These are not marginal numbers, and I hope, a trend that continues.If your company goes down this route, it’s important to keep the boundaries between community and corporate activity clear. Ultimately, open source sustains itself through contributions from people all over the world, and that’s bigger than any one company or location.    Getting paid to work on open source is a rare and wonderful opportunity, but you should not have to give up your passion in the process. Your passion should be why companies want to pay you.  — @jessfraz, “Blurred Lines”  If you can’t convince your current employer to prioritize open source work, consider finding a new employer that encourages employee contributions to open source. Look for companies that make their dedication to open source work explicit. For example:  Some companies, like Netflix or PayPal, have websites that highlight their involvement in open source  Rackspace published its open source contribution policy for employeesProjects that originated at a large company, such as Go or React, will also likely employ people to work on open source.Depending on your personal circumstances, you can try raising money independently to fund your open source work. For example:  @gaearon funded his work on Redux through a Patreon crowdfunding campaign  @andrewgodwin funded work on Django schema migrations through a Kickstarter campaignFinally, sometimes open source projects put bounties on issues that you might consider helping with.  @ConnorChristie was able to get paid for helping @MARKETProtocol work on their javascript library through a bounty on gitcoin.  @mamiM did Japanese translations for @MetaMask after the issue was funded on Bounties Network.Finding funding for your projectBeyond arrangements for individual contributors, sometimes projects raise money from companies, individuals, or others to fund ongoing work.Organizational funding might go towards paying current contributors, covering the costs of running the project (such as hosting fees), or investing into new features or ideas.As open source’s popularity increases, finding funding for projects is still experimental, but there are a few common options available.Raise money for your work through crowdfunding campaigns or sponsorshipsFinding sponsorships works well if you have a strong audience or reputation already, or your project is very popular.A few examples of sponsored projects include:  webpack raises money from companies and individuals through OpenCollective  Vue is funded through Patreon  Ruby Together, a nonprofit organization that pays for work on bundler, RubyGems, and other Ruby infrastructure projectsCreate a revenue streamDepending on your project, you may be able to charge for commercial support, hosted options, or additional features. A few examples include:  Sidekiq offers paid versions for additional support  Travis CI offers paid versions of its product  Ghost is a nonprofit with a paid managed serviceSome popular projects, like npm and Docker, even raise venture capital to support their business growth.Apply for grant fundingSome software foundations and companies offer grants for open source work. Sometimes, grants can be paid out to individuals without setting up a legal entity for the project.  Read the Docs received a grant from Mozilla Open Source Support  OpenMRS work was funded by Stripe’s Open-Source Retreat  Libraries.io received a grant from the Sloan Foundation  The Python Software Foundation offers grants for Python-related workFor more detailed options and case studies, @nayafia wrote a guide to getting paid for open source work. Different types of funding require different skills, so consider your strengths to figure out which option works best for you.Building a case for financial supportWhether your project is a new idea, or has been around for years, you should expect to put significant thought into identifying your target funder and making a compelling case.Whether you’re looking to pay for your own time, or fundraise for a project, you should be able to answer the following questions.ImpactWhy is this project useful? Why do your users, or potential users, like it so much? Where will it be in five years?TractionTry to collect evidence that your project matters, whether it’s metrics, anecdotes, or testimonials. Are there any companies or noteworthy people using your project right now? If not, has a prominent person endorsed it?Value to funderFunders, whether your employer or a grantmaking foundation, are frequently approached with opportunities. Why should they support your project over any other opportunity? How do they personally benefit?Use of fundsWhat, exactly, will you accomplish with the proposed funding? Focus on project milestones or outcomes rather than paying a salary.How you’ll receive the fundsDoes the funder have any requirements around disbursal? For example, you may need to be a nonprofit or have a nonprofit fiscal sponsor. Or perhaps the funds must be given to an individual contractor rather than an organization. These requirements vary between funders, so be sure to do your research beforehand.    For years, we’ve been the leading resource of website friendly icons, with a community of over 20 million people and been featured on over 70 million websites, including Whitehouse.gov. (…) Version 4 was three years ago. Web tech’s changed a lot since then, and frankly, Font Awesome’s gotten a bit stale. (…) That’s why we’re introducing Font Awesome 5. We’re modernizing and rewriting the CSS and redesigning every icon from top to bottom. We’re talking better design, better consistency, and better readability.  — @davegandy, Font Awesome Kickstarter video  Experiment and don’t give upRaising money isn’t easy, whether you’re an open source project, a nonprofit, or a software startup, and in most cases require you to get creative. Identifying how you want to get paid, doing your research, and putting yourself in your funder’s shoes will help you build a convincing case for funding.",
    "url": "/getting-paid/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/getting-paid/\">\n      Getting Paid for Open Source Work\n    </a>\n  </h2>\n  <h2 id=\"why-some-people-seek-financial-support\">Why some people seek financial support</h2>\n\n\n</div>\n"
  },

  
  "/how-to-contribute/": {
    "title": "How to Contribute to Open Source",
    "content": "Why contribute to open source?    Working on [freenode] helped me earn many of the skills I later used for my studies in university and my actual job. I think working on open source projects helps me as much as it helps the project!  — @errietta, “Why I love contributing to open source software”  Contributing to open source can be a rewarding way to learn, teach, and build experience in just about any skill you can imagine.Why do people contribute to open source? Plenty of reasons!Improve existing skillsWhether it’s coding, user interface design, graphic design, writing, or organizing, if you’re looking for practice, there’s a task for you on an open source project.Meet people who are interested in similar thingsOpen source projects with warm, welcoming communities keep people coming back for years. Many people form lifelong friendships through their participation in open source, whether it’s running into each other at conferences or late night online chats about burritos.Find mentors and teach othersWorking with others on a shared project means you’ll have to explain how you do things, as well as ask other people for help. The acts of learning and teaching can be a fulfilling activity for everyone involved.Build public artifacts that help you grow a reputation (and a career)By definition, all of your open source work is public, which means you get free examples to take anywhere as a demonstration of what you can do.Learn people skillsOpen source offers opportunities to practice leadership and management skills, such as resolving conflicts, organizing teams of people, and prioritizing work.It’s empowering to be able to make changes, even small onesYou don’t have to become a lifelong contributor to enjoy participating in open source. Have you ever seen a typo on a website, and wished someone would fix it? On an open source project, you can do just that. Open source helps people feel agency over their lives and how they experience the world, and that in itself is gratifying.What it means to contributeIf you’re a new open source contributor, the process can be intimidating. How do you find the right project? What if you don’t know how to code? What if something goes wrong?Not to worry! There are all sorts of ways to get involved with an open source project, and a few tips will help you get the most out of your experience.You don’t have to contribute codeA common misconception about contributing to open source is that you need to contribute code. In fact, it’s often the other parts of a project that are most neglected or overlooked. You’ll do the project a huge favor by offering to pitch in with these types of contributions!    I’ve been renowned for my work on CocoaPods, but most people don’t know that I actually don’t do any real work on the CocoaPods tool itself. My time on the project is mostly spent doing things like documentation and working on branding.  — @orta, “Moving to OSS by default”  Even if you like to write code, other types of contributions are a great way to get involved with a project and meet other community members. Building those relationships will give you opportunities to work on other parts of the project.    I first reached out to the Python development team (aka python-dev) when I emailed the mailing list on June 17, 2002 about accepting my patch. I quickly caught the open source bug, and decided to start curating email digests for the group. They gave me a great excuse to ask for clarifications about a topic, but more critically I was able to notice when someone pointed out something that needed fixing.  — @brettcannon, “Maintainer Stories”  Do you like planning events?  Organize workshops or meetups about the project, like @fzamperin did for NodeSchool  Organize the project’s conference (if they have one)  Help community members find the right conferences and submit proposals for speakingDo you like to design?  Restructure layouts to improve the project’s usability  Conduct user research to reorganize and refine the project’s navigation or menus, like Drupal suggests  Put together a style guide to help the project have a consistent visual design  Create art for t-shirts or a new logo, like hapi.js’s contributors didDo you like to write?  Write and improve the project’s documentation  Curate a folder of examples showing how the project is used  Start a newsletter for the project, or curate highlights from the mailing list  Write tutorials for the project, like PyPA’s contributors did  Write a translation for the project’s documentation    Seriously, [documentation] is mega-important. The documentation so far has been great and has been a killer feature of Babel. There are sections that could certainly use some work and even the addition of a paragraph here or there is extremely appreciated.  — @kittens, “Call for contributors”  Do you like organizing?  Link to duplicate issues, and suggest new issue labels, to keep things organized  Go through open issues and suggest closing old ones, like @nzakas did for ESLint  Ask clarifying questions on recently opened issues to move the discussion forwardDo you like to code?  Find an open issue to tackle, like @dianjin did for Leaflet  Ask if you can help write a new feature  Automate project setup  Improve tooling and testingDo you like helping people?  Answer questions about the project on e.g., Stack Overflow (like this Postgres example) or Reddit  Answer questions for people on open issues  Help moderate the discussion boards or conversation channelsDo you like helping others code?  Review code on other people’s submissions  Write tutorials for how a project can be used  Offer to mentor another contributor, like @ereichert did for @bronzdoc on RustYou don’t just have to work on software projects!While “open source” often refers to software, you can collaborate on just about anything. There are books, recipes, lists, and classes that get developed as open source projects.For example:  @sindresorhus curates a list of “awesome” lists  @h5bp maintains a list of potential interview questions for front-end developer candidates  @stuartlynn and @nicole-a-tesla made a collection of fun facts about puffinsEven if you’re a software developer, working on a documentation project can help you get started in open source. It’s often less intimidating to work on projects that don’t involve code, and the process of collaboration will build your confidence and experience.Orienting yourself to a new project    If you go to an issue tracker and things seem confusing, it’s not just you. These tools require a lot of implicit knowledge, but people can help you navigate it and you can ask them questions.  — @shaunagm, “How to Contribute to Open Source”  For anything more than a typo fix, contributing to open source is like walking up to a group of strangers at a party. If you start talking about llamas, while they were deep in a discussion about goldfish, they’ll probably look at you a little strangely.Before jumping in blindly with your own suggestions, start by learning how to read the room. Doing so increases the chances that your ideas will be noticed and heard.Anatomy of an open source projectEvery open source community is different.Spending years on one open source project means you’ve gotten to know one open source project. Move to a different project, and you might find the vocabulary, norms, and communication styles are completely different.That said, many open source projects follow a similar organizational structure. Understanding the different community roles and overall process will help you get quickly oriented to any new project.A typical open source project has the following types of people:  Author: The person/s or organization that created the project  Owner: The person/s who has administrative ownership over the organization or repository (not always the same as the original author)  Maintainers: Contributors who are responsible for driving the vision and managing the organizational aspects of the project. (They may also be authors or owners of the project.)  Contributors: Everyone who has contributed something back to the project.  Community Members: People who use the project. They might be active in conversations or express their opinion on the project’s direction.Bigger projects may also have subcommittees or working groups focused on different tasks, such as tooling, triage, community moderation, and event organizing. Look on a project’s website for a “team” page, or in the repository for governance documentation, to find this information.A project also has documentation. These files are usually listed in the top level of a repository.  LICENSE: By definition, every open source project must have an open source license. If the project does not have a license, it is not open source.  README: The README is the instruction manual that welcomes new community members to the project. It explains why the project is useful and how to get started.  CONTRIBUTING: Whereas READMEs help people use the project, contributing docs help people contribute to the project. It explains what types of contributions are needed and how the process works. While not every project has a CONTRIBUTING file, its presence signals that this is a welcoming project to contribute to.  CODE_OF_CONDUCT: The code of conduct sets ground rules for participants’ behavior associated and helps to facilitate a friendly, welcoming environment. While not every project has a CODE_OF_CONDUCT file, its presence signals that this is a welcoming project to contribute to.  Other documentation: There might be additional documentation, such as tutorials, walkthroughs, or governance policies, especially on bigger projects.Finally, open source projects use the following tools to organize discussion. Reading through the archives will give you a good picture of how the community thinks and works.  Issue tracker: Where people discuss issues related to the project.  Pull requests: Where people discuss and review changes that are in progress.  Discussion forums or mailing lists: Some projects may use these channels for conversational topics (for example, “How do I…“ or “What do you think about…“ instead of bug reports or feature requests). Others use the issue tracker for all conversations.  Synchronous chat channel: Some projects use chat channels (such as Slack or IRC) for casual conversation, collaboration, and quick exchanges.Finding a project to contribute toNow that you’ve figured out how open source projects work, it’s time to find a project to contribute to!If you’ve never contributed to open source before, take some advice from U.S. President John F. Kennedy, who once said, “Ask not what your country can do for you - ask what you can do for your country.”Contributing to open source happens at all levels, across projects. You don’t need to overthink what exactly your first contribution will be, or how it will look.Instead, start by thinking about the projects you already use, or want to use. The projects you’ll actively contribute to are the ones you find yourself coming back to.Within those projects, whenever you catch yourself thinking that something could be better or different, act on your instinct.Open source isn’t an exclusive club; it’s made by people just like you. “Open source” is just a fancy term for treating the world’s problems as fixable.You might scan a README and find a broken link or a typo. Or you’re a new user and you noticed something is broken, or an issue that you think should really be in the documentation. Instead of ignoring it and moving on, or asking someone else to fix it, see whether you can help out by pitching in. That’s what open source is all about!  28% of casual contributions to open source are documentation, such as a typo fix, reformatting, or writing a translation.You can also use one of the following resources to help you discover and contribute to new projects:  GitHub Explore  Open Source Friday  First Timers Only  Your First PR  CodeTriage  24 Pull Requests  Up For Grabs  Contributor-ninjaA checklist before you contributeWhen you’ve found a project you’d like to contribute to, do a quick scan to make sure that the project is suitable for accepting contributions. Otherwise, your hard work may never get a response.Here’s a handy checklist to evaluate whether a project is good for new contributors.Meets the definition of open source      Does it have a license? Usually, this is a file called LICENSE in the root of the repository.  Project actively accepts contributionsLook at the commit activity on the master branch. On GitHub, you can see this information on a repository’s homepage.      When was the latest commit?        How many contributors does the project have?        How often do people commit? (On GitHub, you can find this by clicking \"Commits\" in the top bar.)  Next, look at the project’s issues.        How many open issues are there?          Do maintainers respond quickly to issues when they are opened?          Is there active discussion on the issues?          Are the issues recent?          Are issues getting closed? (On GitHub, click the \"closed\" tab on the Issues page to see closed issues.)  Now do the same for the project’s pull requests.        How many open pull requests are there?          Do maintainers respond quickly to pull requests when they are opened?          Is there active discussion on the pull requests?          Are the pull requests recent?          How recently were any pull requests merged? (On GitHub, click the \"closed\" tab on the Pull Requests page to see closed PRs.)  Project is welcomingA project that is friendly and welcoming signals that they will be receptive to new contributors.        Do the maintainers respond helpfully to questions in issues?          Are people friendly in the issues, discussion forum, and chat (for example, IRC or Slack)?          Do pull requests get reviewed?          Do maintainers thank people for their contributions?      Whenever you see a long thread, spot check responses from core developers coming late in the thread. Are they summarizing constructively, and taking steps to bring the thread to a decision while remaining polite? If you see a lot of flame wars going on, that’s often a sign that energy is going into argument instead of into development.  — @kfogel, Producing OSS  How to submit a contributionYou’ve found a project you like, and you’re ready to make a contribution. Finally! Here’s how to get your contribution in the right way.Communicating effectivelyWhether you’re a one-time contributor or trying to join a community, working with others is one of the most important skills you’ll develop in open source.    [As a new contributor,] I quickly realized I had to ask questions if I wanted to be able to close the issue. I skimmed through the code base. Once I had some sense of what was going on, I asked for more direction. And voilà! I was able to solve the issue after getting all the relevant details I needed.  — @shubheksha, A Beginner’s Very Bumpy Journey Through The World of Open Source  Before you open an issue or pull request, or ask a question in chat, keep these points in mind to help your ideas come across effectively.Give context. Help others get quickly up to speed. If you’re running into an error, explain what you’re trying to do and how to reproduce it. If you’re suggesting a new idea, explain why you think it’d be useful to the project (not just to you!).  😇 “X doesn’t happen when I do Y”  😢 “X is broken! Please fix it.”Do your homework beforehand. It’s OK not to know things, but show that you tried. Before asking for help, be sure to check a project’s README, documentation, issues (open or closed), mailing list, and search the internet for an answer. People will appreciate when you demonstrate that you’re trying to learn.  😇 “I’m not sure how to implement X. I checked the help docs and didn’t find any mentions.”  😢 “How do I X?”Keep requests short and direct. Much like sending an email, every contribution, no matter how simple or helpful, requires someone else’s review. Many projects have more incoming requests than people available to help. Be concise. You will increase the chance that someone will be able to help you.  😇 “I’d like to write an API tutorial.”  😢 “I was driving down the highway the other day and stopped for gas, and then I had this amazing idea for something we should be doing, but before I explain that, let me show you…“Keep all communication public. Although it’s tempting, don’t reach out to maintainers privately unless you need to share sensitive information (such as a security issue or serious conduct violation). When you keep the conversation public, more people can learn and benefit from your exchange. Discussions can be, in themselves, contributions.  😇 (as a comment) “@-maintainer Hi there! How should we proceed on this PR?”  😢 (as an email) “Hey there, sorry to bother you over email, but I was wondering if you’ve had a chance to review my PR”It’s okay to ask questions (but be patient!). Everybody was new to the project at some point, and even experienced contributors need to get up to speed when they look at a new project. By the same token, even longtime maintainers are not always familiar with every part of the project. Show them the same patience that you’d want them to show to you.  😇 “Thanks for looking into this error. I followed your suggestions. Here’s the output.”  😢 “Why can’t you fix my problem? Isn’t this your project?”Respect community decisions. Your ideas may differ from the community’s priorities or vision. They may offer feedback or decide not to pursue your idea. While you should discuss and look for compromise, maintainers have to live with your decision longer than you will. If you disagree with their direction, you can always work on your own fork or start your own project.  😇 “I’m disappointed you can’t support my use case, but as you’ve explained it only affects a minor portion of users, I understand why. Thanks for listening.”  😢 “Why won’t you support my use case? This is unacceptable!”Above all, keep it classy. Open source is made up of collaborators from all over the world. Context gets lost across languages, cultures, geographies, and time zones. In addition, written communication makes it harder to convey a tone or mood. Assume good intentions in these conversations. It’s fine to politely push back on an idea, ask for more context, or further clarify your position. Just try to leave the internet a better place than when you found it.Gathering contextBefore doing anything, do a quick check to make sure your idea hasn’t been discussed elsewhere. Skim the project’s README, issues (open and closed), mailing list, and Stack Overflow. You don’t have to spend hours going through everything, but a quick search for a few key terms goes a long way.If you can’t find your idea elsewhere, you’re ready to make a move. If the project is on GitHub, you’ll likely communicate by opening an issue or pull request:  Issues are like starting a conversation or discussion  Pull requests are for starting work on a solution  For lightweight communication, such as a clarifying or how-to question, try asking on Stack Overflow, IRC, Slack, or other chat channels, if the project has oneBefore you open an issue or pull request, check the project’s contributing docs (usually a file called CONTRIBUTING, or in the README), to see whether you need to include anything specific. For example, they may ask that you follow a template, or require that you use tests.If you want to make a substantial contribution, open an issue to ask before working on it. It’s helpful to watch the project for a while (on GitHub, you can click “Watch” to be notified of all conversations), and get to know community members, before doing work that might not get accepted.    You’ll learn a lot from taking a single project you actively use, “watching” it on GitHub and reading every issue and PR.  — @gaearon on joining projects  Opening an issueYou should usually open an issue in the following situations:  Report an error you can’t solve yourself  Discuss a high-level topic or idea (for example, community, vision or policies)  Propose a new feature or other project ideaTips for communicating on issues:  If you see an open issue that you want to tackle, comment on the issue to let people know you’re on it. That way, people are less likely to duplicate your work.  If an issue was opened a while ago, it’s possible that it’s being addressed somewhere else, or has already been resolved, so comment to ask for confirmation before starting work.  If you opened an issue, but figured out the answer later on your own, comment on the issue to let people know, then close the issue. Even documenting that outcome is a contribution to the project.Opening a pull requestYou should usually open a pull request in the following situations:  Submit trivial fixes (for example, a typo, a broken link or an obvious error)  Start work on a contribution that was already asked for, or that you’ve already discussed, in an issueA pull request doesn’t have to represent finished work. It’s usually better to open a pull request early on, so others can watch or give feedback on your progress. Just mark it as a “WIP” (Work in Progress) in the subject line. You can always add more commits later.If the project is on GitHub, here’s how to submit a pull request:  Fork the repository and clone it locally. Connect your local to the original “upstream” repository by adding it as a remote. Pull in changes from “upstream” often so that you stay up to date so that when you submit your pull request, merge conflicts will be less likely. (See more detailed instructions here.)  Create a branch for your edits.  Reference any relevant issues or supporting documentation in your PR (for example, “Closes #37.”)  Include screenshots of the before and after if your changes include differences in HTML/CSS. Drag and drop the images into the body of your pull request.  Test your changes! Run your changes against any existing tests if they exist and create new ones when needed. Whether tests exist or not, make sure your changes don’t break the existing project.  Contribute in the style of the project to the best of your abilities. This may mean using indents, semi-colons or comments differently than you would in your own repository, but makes it easier for the maintainer to merge, others to understand and maintain in the future.If this is your first pull request, check out Make a Pull Request, which @kentcdodds created as a walkthrough video tutorial. You can also practice making a pull request in the First Contributions repository, created by @Roshanjossey.What happens after you submit a contributionYou did it! Congratulations on becoming an open source contributor. We hope it’s the first of many.After you submit a contribution, one of the following will happen:😭 You don’t get a response.Hopefully you checked the project for signs of activity before making a contribution. Even on an active project, however, it’s possible that your contribution won’t get a response.If you haven’t gotten a response in over a week, it’s fair to politely respond in that same thread, asking someone for a review. If you know the name of the right person to review your contribution, you can @-mention them in that thread.Don’t reach out to that person privately; remember that public communication is vital to open source projects.If you make a polite bump and still nobody responds, it’s possible that nobody will respond, ever. It’s not a great feeling, but don’t let that discourage you. It’s happened to everyone! There are many possible reasons why you didn’t get a response, including personal circumstances that may be out of your control. Try to find another project or way to contribute. If anything, this is a good reason not to invest too much time in making a contribution before other community members are engaged and responsive.🚧 Someone requests changes to your contribution.It’s common that you’ll be asked to make changes to your contribution, whether that’s feedback on the scope of your idea, or changes to your code.When someone requests changes, be responsive. They’ve taken the time to review your contribution. Opening a PR and walking away is bad form. If you don’t know how to make changes, research the problem, then ask for help if you need it.If you don’t have time to work on the issue anymore (for example, if the conversation has been going on for months, and your circumstances have changed), let the maintainer know so they’re not expecting a response. Someone else may be happy to take over.👎 Your contribution doesn’t get accepted.Your contribution may or may not be accepted in the end. Hopefully you didn’t put too much work into it already. If you’re not sure why it wasn’t accepted, it’s perfectly reasonable to ask the maintainer for feedback and clarification. Ultimately, however, you’ll need to respect that this is their decision. Don’t argue or get hostile. You’re always welcome to fork and work on your own version if you disagree!🎉 Your contribution gets accepted.Hooray! You’ve successfully made an open source contribution!You did it!Whether you just made your first open source contribution, or you’re looking for new ways to contribute, we hope you’re inspired to take action. Even if your contribution wasn’t accepted, don’t forget to say thanks when a maintainer put effort into helping you. Open source is made by people like you: one issue, pull request, comment, or high-five at a time.",
    "url": "/how-to-contribute/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/how-to-contribute/\">\n      How to Contribute to Open Source\n    </a>\n  </h2>\n  <h2 id=\"why-contribute-to-open-source\">Why contribute to open source?</h2>\n\n\n</div>\n"
  },

  
  "/id/best-practices/": {
    "title": "Kiat Baik untuk Pengelola",
    "content": "Apa artinya menjadi pengelola?Jika Anda mengelola proyek open source yang banyak digunakan oleh orang, Anda mungkin menyadari bahwa Anda semakin sedikit melakukan pemrograman dan lebih banyak menyelesaikan permasalahan.Pada fase awal proyek, Anda melakukan percobaan dengan ide-ide baru dan membuat keputusan berdasarkan apa yang Anda inginkan. Seiring dengan perkembangan popularitas proyek Anda, Anda akan lebih banyak bekerja dengan pengguna dan kontributor Anda.Mengelola sebuah proyek membutuhkan lebih dari sekedar membuat kode. Pekerjaan ini seringkali tidak terduga, namun mereka juga sama pentingnya untuk proyek yang terus berkembang. Kami telah mengmpulkan beberapa cara untuk mempermudah hidup Anda, mulai dari mendokumentasikan proses hingga memberdayakan komunitas Anda.Mendokumentasikan proses AndaMenuliskan segala sesuatunya adalah salah satu pekerjaan penting yang bisa Anda lakukan sebagai seorang pengelola.Dokumentasi tidak hanya mengklarifikasikan pemikiran Anda, namun juga membantu orang lain memahami apa yang Anda perlukan atau harapkan, sebelum mereka mulai bertanya.Menuliskan dalam bentuk dokumentasi akan mempermudah Anda untuk mengatakan tidak apabila ada yang tidak sesuai dengan ruang lingkup yang sudah ditentukan. Dokumentasi juga mempermudah orang lain untuk bergabung dan mulai membantu. Anda tidak akan pernah tahu siapa saja yang mungkin akan membaca atau menggunakan proyek Anda.Anda tidak perlu menuliskan dalam bentuk paragraf penuh, bahkan dengan poin-poin saja sudah jauh lebih baik daripada tidak sama sekali.Write down your project’s visionmenuliskan visi proyek AndaMulailah dengan menuliskan tujuan akhir dari proyek Anda. Tambahkan kedalam dokumen README, atau pisahkan kedalam dokumen VISION. Jika terdapat dokumen lain yang bisa membantu seperti peta perjalanan proyek, maka pastikan dokumen tersebut bersifat publik.Memiliki visi yang jelas dan terdokumentasi membantu Anda untuk tetap fokus dan juga menghindari perluasan ruang lingkup dari kontribusi orang lain.Sebagai contoh, @lord menemukan bahwa memiliki visi proyek telah membantu dia dalam menentukan permintaan mana yang perlu ditanggapi. Sebagai seorang pengelola baru, dia menyesal karena tidak bertahan dengan ruang lingkup proyeknya ketika dia menerima feature request pertama untuk Slate.    Saya hanya meraba.Saya tidak meluangkan cukup waktu untuk menghadirkan sebuah solusi lengkap. Saya berharap saya pernah menuliskan “Saya tidak punya waktu untuk ini saat ini, tetapi saya akan menambahkannya pada daftar jangka panjang.”  — @lord, “Tips for new open source maintainers”  Komunikasikan ekspektasi AndaAturan bisa menggelisahkan untuk dituliskan. Seringkali Anda merasa mengatur perilaku orang lain atau merusak kesenangan orang lain.Aturan yang baik, tertulis, dan diterapkan dengan adil akan sangat membantu pengelola. Aturan ini akan menghindarkan Anda dari melakukan sesuatu yangg tidak ingin Anda kerjakan.Sebagian besar orang yang hadir pada proyek Anda tidak tahu tentang Anda atau situasi Anda. Mereka bisa jadi mengasumsikan bahwa Anda dibayar untuk mengerjakan proyek tersebut, terutama jika mereka menggunakan dan sangat bergantung pada proyek Anda. Mungkin pada suatu masa Anda banyak menghabiskan waktu Anda pada proyek Anda, namun saat ini Anda sibuk dengan pekerjaan baru atau anggota keluarga yang baru.Semuanya ini normal! Pastikan orang lain mengetahui kondisi ini.Jika mengelola proyek Anda merupakan pekerjaan paruh waktu atau sepenuhnya sukarela, terbukalah dengan berapa banyak waktu yang Anda miliki. Informasi ini tidak sama dengan berapa banyak waktu yang diperlukan oleh proyek atau berapa banyak waktu yang diinginkan oleh orang lain terhadap Anda.Berikut adalah beberapa aturan yang layak untuk ditulis:  Bagai kontribusi akan di-review dan diterima (Apakah perlu pengujian? Template laporan masalah?)  Jenis kontribusi yang Anda terima (Apakah Anda ingin meminta bantuan pada bagian tertentu dari kode Anda?)  Kapan waktu yang tepat untuk melakukan penjajakan ulang (misalnya. “Anda bisa mengharapkan respon dari pengelola dalam 7 days. Jika Anda belum mendapatkan balasan apapun, silahkan memberikan notifikasi.”)  Berapa banyak waktu yang Anda habiskan pada proyek (misalnya. “Kami hanya menghabiskan waktu sekitar 5 jam per minggu pada proyek ini”)Jekyll, CocoaPods, dan Homebrew adalah beberapa contoh proyek dengan aturan yang jelas untuk pengelola dan kontributor.Pastikan komunikasi terbukaJangan lupa untuk mendokumentasikan interaksi Anda. Jika dimungkinkan, pastikan komunikasi terjadi secara terbuka. Jika seseorang berusaha untuk menghubungi Anda secara pribadi untuk mendiskusikan sebuah pengajuan fitur baru atau membutuhkan bantuan, arahkan mereka pada media komunikasi publik secara halus, seperti mailing list atau issue tracker.Jika Anda berjumpa dengan pengelola lain, atau membuat keputusan besar secara pribadi, dokumentasikan hasil diskusinya secara terbuka, meskipun hanya menuliskan notulensi Anda.Dengan cara itu, setiap orang yang bergabung dengan komunitas Anda akan memiliki informasi yang sama dengan orang-orang yang sudah bertahun-tahun.Belajar untuk mengatakan tidakAnda telah menuliskan segalanya. Idealnya semua orang akan membaca dokumentasi Anda, namun dalam kenyataannya, Anda masih harus mengingatkan orang lain bahwa informasi ini sudah tersedia.Dengan menuliskan segala sesuatunya, akan sangat membantu ketika Anda perlu menerapkan aturan Anda.Mengatakan tidak memang tidaklah menyenangkan, tetapi  “Kontribusi Anda tidak sesuai dengan kriteria proyek ini” terasa lebih manusiawi dibandingkan  “Saya tidak suka kontribusi Anda”.Mengatakan tidak juga berlaku pada banyak situasi yang akan Anda jumpai sebagai pengelola: permintaan fitur yang tidak sesuai, seseorang mencoba mengalihkan sebuah diskusi, melakukan pekerjaan yang tidak diperlukan bagi orang lain.Pastikan diskusi berjalan dengan ramahSalah satu tempat terbaik untuk berlatih mengatakan tidak adalah laporan masalah dan antrian pull request. Sebagai pengelola proyek, Anda pasti akan menerima saran yang tidak Anda harapkan.Mungkin kontribusi tersebut akan mengubah arah proyek atau tidak sesuai dnegan visi Anda. Mungkin idenya bagus, tetapi implementasinya kurang bagus.Apapun alasannya, sangatlah dimungkinkan untuk menolak kontribusi yang tidak sesuai dengan standar proyek Anda.Jika Anda menerima kontribusi yang tidak Anda inginkan, reaksi pertama Anda mungkin mengabaikan atau pura-pura tidak melihatnya. Melakukan hal ini bisa melukai perasaan orang lain atau bahkan mengurangi motivasi kontributor lainnya pada komunitas Anda.    Kunci untuk menangani dukungan terhadap proyek open source skala besar adalah memastikan bahwa masalah terus diperhatikan. Cobalah untuk mencegah laporan masalah berhenti. Jika Anda merupakan pengembang ioS, Anda tahu bagaimana frustasinya untuk mengajukan radar. Anda mungkin bisa mendengar balasan 2 tahun kemudian, dan mengatakan untuk mencoba kembali dengan versi terbaru dari iOS.  — @KrauseFx, “Scaling open source communities”  Jangan biarkan kontribusi yang tidak diinginkan tetap terbuka karena Anda merasa bersalah atau ingin bersikap baik. Pada akhirnya, masalah yang tidak terjawab dan PR akan membuat pekerjaan proyek Anda menjadi lebih berat dan mengintimidasi Anda.Akan lebih baik untuk langsung menutup kontribusi yang Anda tahu tidak akan diterima. Jika proyek Anda mengalami hambatan yang besar, @steveklabnik memiliki saran untuk mengatasi laporan masalah secara efisien.Kedua, mengabaikan kontribusi akan mengirimkan sinyal negatif pada komunitas Anda. Berkontribusi pada sebuah proyek bisa jadi menakutkan, apalagi untuk pertama kalinya bagi orang lain. Meskipun Anda tidak menerima kontribusi mereka, akui hasil pekerjaan mereka dan ucapkan terima kasih atas minat mereka. Itu adalah sebuah pujian yang besar!Jika Anda tidak ingin menerima sebuah kontribusi:  Ucapkan terima kasih atas kontribusi mereka  Jelaskan kenapa tidak sesuai pada ruang lingkup proyek, dan tawarkan saran untuk perbaikan, jika dimungkinkan.  Hubungkan dengan dokumentasi relevan, jika Anda memilikinya. Jika Anda mengamati permintaan yang berulang pada sesuatu yang tidak ingin Anda terima, tambahkan pada dokumentasi Anda.  Tutup permintaanAnda tidak perlu lebih dari 1-2 kalimat untuk merespon. Sebagai contoh, ketika pengguna celery melaporkan sebuah kesalahan yang berhubungan dengan sistem operasi Windows, @berkerpeksag menjawab dengan:Jika mengatakan tidak cukup menakutkan bagi Anda, Anda tidak sendirian. Seperti yang dialami @jessfraz:  Saya telah berbicara dengan beberapa pengelola open source yang berbeda: Mesos, Kubernetes, Chromium, dan mereka semua sepakat bahwa salah satu tugas berat dari pengelola adalah mengatakan “Tidak” pada perbaikan yang tidak Anda inginkan.Jangan merasa bersalah karena tidak menerima kontribusi seseorang. Aturan pertama dari open source, menurut @shykes: “Tidak bersifat sementara, ya bersifat selamanya.” Meskipun memberikan empati pada niat baik orang lain adalah sesuatu yang baik, menolak sebuah kontribusi tidaklah sama dengan menolak orang itu sendiri.Pada akhirnya, jika sebuah kontribusi kurang baik, Anda tidak harus menerimanya. Bersikaplah baik dan responsif ketika seseorang berkontribusi pada proyek Anda, tetapi hanya menerima ketika Anda percaya bahwa kontribusi itu akan membuat proyek Anda menjadi lebih baik. Semakin sering Anda mengatakan tidak, akan menjadi semakin mudah.Bersikaplah ProaktifUntuk mengurangi jumlah kontribusi yang tidak diharapkan dari awal, jelaskan proses untuk mengajukan dan menerima kontribusi proyek Anda pada panduan kontribusi.Jika Anda menerima terlalu banyak kontribusi yang kurang baik, pastikan bahwa kontributor telah melakukan beberapa pekerjaan sebelumnya, misalnya:  Mengisi template/checklist daftar laporan masalah atau PR  Membuka laporan permasalahan sebelum mengajukan PRJika mereka tidak mengikuti aturan Anda, tutup dengan segera dan arahkan pada dokumentasi Anda.Meskipun pendekatan ini mungkin terasa tidak menyenangkan pada awalnya, bersikap proaktif sebetulnya baik untuk kedua belah pihak. Hal ini mengurangi kesempatan seseorang untuk menghabiskan terlalu banyak waktu pada pull request yang tidak akan Anda terima. Dan juga membuat beban pekerjaan Anda menjadi lebih mudah untuk dikelola.    Idealnya, jelaskan kepada mereka dan pada dokumen CONTRIBUTING.md bagaimana mereka bisa mendapatkan indikasi yang lebih baik dimasa depan tentang apa yang akan Anda terima atau tolak sebelum mereka mulai bekerja.  — @MikeMcQuaid, “Kindly Closing Pull Requests”  Seringkali, ketika Anda mengatakan tidak, kontributor potensial Anda mungkin akan marah atau mengkritisi keputusan Anda. Jika perilaku mereka menjadi tidak menyenangkan, ambil langkah-langkah untuk menenangkan situasinya atau bahkan hapus mereka dari komunitas Anda, jika mereka tidak berkolaborasi secara konstruktif.Memberlakukan pendampinganMungkin seseorang pada komunitas Anda secara rutin mengirimkan kontribusi yang tidak sesuai dengan standar proyek Anda. Hal ini bisa membuat frustasi bagi kedua belaj pihak untuk berada pada situasi penolakan berkali-kali.Jika Anda melihat seseorang sangat berminat pada proyek Anda tetapi membutuhkan sedikit bantuan, bersabarlah. Jelaskan dengan jelas pada setiap situasi kenapa kontribusi mereka tidak memenuhi ekspektasi dari proyek. Cobalah untuk mengarahkan mereka pada tugas yang lebih sederhana, seperti laporan masalah yang ditandai dengan “kesalahan baik pertama,” untuk mendapatkan pengalaman. Jika Anda punya waktu, pertimbangkan untuk mendampingi mereka pada kontribusi pertama mereka, atau cari orang lain pada komunitas yang bersedia mendampinginya.Berdayakan komunitas AndaAnda tidak harus mengerjakan semuanya sendiri. Komunitas proyek Anda ada untuk sebuah alasan! Meskipun Anda belum memiliki komunitas kontributor yang aktif, jika Anda punya banyak pengguna, berdayakan mereka.Berbagi beban pekerjaanJika Anda mencari orang lain untuk bergabung, mulailah dengan bertanya.Ketika Anda melihat kontributor baru melakukan kontribusi secara rutin, hargai pekerjaan mereka dengan menawarkan tanggung jawab yang lebih besar. Dokumentasikan bagaimana orang lain bisa menjadi seorang pemimpin.Doronglah orang lain untuk berbagi kepemilikan proyek dan hal itu bisa mengurangi beban pekerjaan Anda secara drastis, seperti yang ditemukan @lmccart pada proyeknya, p5.js.    Saya telah banyak berkata, “Ya, setiap orang bisa terlibat, Anda tidak harus memiliki pengalaman membuat code […].” Kami mendapati banyak orang mendaftar untuk hadir [pada sebuah acara] dan pada saat itulah saya mulai bertanya: jika hal ini benar, apa yang harus saya katakan? Terdapat lebih dari 40 orang yang hadir, dan saya tidak mungkin duduk bersama-sama dengan masing-masing dari mereka. …Tetapi orang-orang tersebut hadir, dan semuanya berjalan dengan lancar. Begitu ada satu orang yang berhasil, mereka bisa mengajarkan ke orang lain.  —  @lmccart, “What Does “Open Source” Even Mean? p5.js Edition”  Jika Anda perlu sedikit menjauh dari proyek Anda, baik sementara atau selamanya, tidak perlu ada rasa malu untuk meminta orang lain untuk meneruskan pekerjaan Anda.Jika orang lain sangat antusias dengan arah proyek Anda, berikan akses atau serahkan kendali pada orang lain. Jika seseorang melakukan fork terhadap proyek Anda dan mengelolanya secara aktif di tempat lain, pertimbangkan untuk menghubungkan ke proyek tersebut melalui proyek Anda. Sangatlah hebat melihat banyak orang menginginkan proyek Anda terus hidup.!@progrium menemukan bahwa dengan mendokumentasikan visi proyeknya, Dokku, membantu tujuannya tetap bertahan meskipun dia sudah meninggalkan proyeknya:  Saya menuliskan sebuah halaman wiki menjelaskan tentang apa yang saya inginkan dan kenapa. Mengejutkan bagi saya karena pengelola mulai menjalankan proyek sesuai dengan arahan tersebut! Apakah ia melakukannya sesuai dengan apa yang saya kehendaki? Tidak selalu, tetapi ia membawa proyek ini semakin dekat dengan apa yang saya tuliskan.Biarkan orang lain membangun solusi yang mereka perlukanJika kontributor yang berpotensi memiliki opini yang berbeda tentang apa yang seharusnya dikerjakan oleh proyek Anda, Anda mungkin bisa memberikan semangat untuk mengerjakan pekerjaan mereka melalui proses fork.Melakukan sebuah fork terhadap sebuah proyek bukan berarti sesuatu yang jelek. Mampu menyalin dan memodifikasi sebuah proyek adalah salah satu hal terbaik tentang open source. Menyemangati orang lain untuk bekerja pada hasil fork mereka bisa memberikan ide kreatif yang mereka perlukan, tanpa harus menimbulkan konflik dengan visi proyek Anda.    Saya melayani 80% contoh kasus. Jika Anda termasuk salah satu yang tdak setuju, silahkan fork pekerjaan saya. Saya tidak akan tersinggung! Proyek publik saya selalu berusaha untuk menyelesaikan masalah yang umum; Saya berusaha untuk membuatnya mudah untuk menyelesaikan masalah yang lebih kompleks dengan cara melakukan fork atau memperluas proyek tersebut.  — @geerlingguy, “Why I Close PRs”  Hal yang sama juga terjadi pada pengguna yang menginginkan solusi dimana Anda tidak mampu membangunnya karena keterbatasan bandwidth. Menawarkan API dan hook bisa membantu orang lain memenuhi kebutuhan mereka, tanpa harus memodifikasi kode secara langsung. @orta menemukan bahwa mendorong plugin untuk CocoaPods mengarah pada “beberapa ide menarik”:  Sangatlah susah untuk dihindari bahwa ketika sebuah proyek sudah semakin besar, pengelola harus menjadi lebih konsevatif tentang bagaimana mereka memperkenalkan kode baru. Anda menjadi lebih pandai dalam mengatakan “tidak”, tetapi banyak orang memiliki kebutuhan yang pasti. Jadi, Anda akan mengubah alat Anda menjadi sebuah platform.Manfaatkan robotSeperti halnya terdapat tugas yang bisa dikerjakan oleh orang lain, juga terdapat tugas yang tidak seharusnya dikerjakan oleh orang. Robot adalah teman Anda. Gunakan mereka untuk mempermudah hidup Anda sebagai pengelola.Wajibkan test dan pengujian lainnya untuk meningkatkan kualitas kode AndaSalah satu cara penting yang bisa dilakukan untuk melakukan otomatisasi proyek Anda adalah dengan menambahkan pengujian otomatis.Pengujian otomatis membantu kontributor bahwa mereka tidak merusak apapun. Pengujian otomatis juga mempermudah Anda untuk melakukan review dan menerima kontribusi dengan cepat. Semakin cepat Anda merespon, maka komunitas Anda juga akan semakin tertarik.Lakukan pengaturan untuk pengujian otomatis yang akan berjalan pada semua kontribusi yang masuk, dan pastikan pengujian Anda dapat dilakukan dengan mudah oleh kontributor secara lokal. Pastikan bahwa semua kontribusi kode melewati pengujian Anda sebelum mereka bisa diajukan. Anda perlu menetapkan standar minimal kualitas dari semua pengajuan. Penggunaan pengujian status pada GitHub dapat membantu memastikan tidak ada perubahan yang disetujui tanpa melalui pengujian Anda.Jika Anda menambahkan pengujian, pastikan untuk menjelaskan bagaimana mereka bekerja pada dokumen CONTRIBUTING.    Saya percaya bahwa pengujian otomatis sangat diperlukan untuk semua kode yang dikerjakan orang-orang.  Jika kode tersebut benar, maka tidak diperlukan perubahan - kita hanya menuliskan kode apabila terjadi kesalahan, apakah “crash” atau “kurang fitur”. Tanpa memperhatikan perubahan yang Anda lakukan, pengujian otomatis sangatlah penting untuk menangkap regresi kesalahan yang mungkin Anda timbulkan.  — @edunham, “Rust’s Community Automation”  Gunakan perangkat untuk mengotomatisasikan tugas perawatan dasarKabar baik tentang mengelola sebuah proyek yang terkenal adalah pengelola lain mungkin sudah mengalami masalah yang sama dan sudah membuat solusinya.Terdapat banyak peralatan yang ada yang dapat membantu mengotomatisasikan beberapa pekerjaan perawatan. Beberapa contoh diantaranya:  semantic-release mengotomatisasikan rilis Anda  mention-bot menyebut reviewer untuk pull requests  Danger membantu otomatisasi review kodeUntuk laporan kesalahan dan kontribusi umum lainnya, GitHub telah membuat template untuk Laporan Masalah dan Pull Request, yang bisa Anda gunakan untuk meningkatkan komunikasi yang Anda terima. Anda juga bisa mengatur email filter untuk mengelola notifikasi email Anda.Jika Anda ingin sedikit lebih canggih, panduan penulisan dan penggunaan lint bisa menstandarisasi kontribusi proyek dan membuatnya lebih mudah untuk melakukan review dan menerimanya.Namun, jika standar Anda terlalu rumit, hal ini bisa meningkatkan hambatan bagi kontribusi. Pastikan Anda menambah aturan untuk mempermudah hidup orang lain.Jika Anda tidak yakin harus menggunakan perangkat yang mana, lihat apa yang digunakan oleh proyek lain, terutama pada ekosistem yang sama. Sebagai contoh, apa proses kontribusi untuk modul Node yang lain? Menggunakan perangkat dan pendekatan yang sama akan membuat proses Anda lebih dikenal oleh calon kontributor Anda.OK untuk berhenti sejenakPekerjaan open source pernah membawa kebahagiaan. Mungkin saat ini mulai membuat Anda merasa bersalah.Mungkin Anda merasa terlalu terbeban ketika memikirkan proyek Anda. Dan jumlah masalah dan pull request semakin menumpuk.Burnout adalah masalah yang riil dan dapat terjadi pada pekerjaan open source, terutama pada pengelola. Sebagai seorang pengelola, kebahagiaan Anda adalah sebuah kebutuhan yang tidak dapat ditawar untuk kelangsungan dari proyek open source.Meski demikian, ambil waktu untuk istirahat! Anda tidak harus menunggu sampai Anda merasa lelah sebelum mengambil liburan. @brettcannon, seorang pengembang inti Python, memutuskan untuk mengambil liburan satu bulan setelah menjalani 14 tahun sebagai sukarelawan OSS.Sama halnya seperti pekerjaan lainnya, mengambil liburan secara berkala akan membuat Anda segar, bahagia, dan tertarik terhadap pekerjaan Anda.    Dalam mengelola WP-CLI, Saya menemukan bahwa saya perlu membuat diri saya bahagia terlebih dahulu, dan menentukan batas keterlibatan saya dengan jelas. Keseimbangan terbaik yang saya temukan adalah 2-5 jam per minggu sebagai bagian dari jadwal pekerjaan normal saya. Hal ini menjaga keterlibatan saya sebagai sebuah gairah. Karena saya memprioritaskan masalah-masalah yang saya kerjakan, saya bisa membuat kemajuan berkala tentang apa yang saya anggap penting.  — @danielbachhuber, “My condolences, you’re now the maintainer of a popular open source project”  Seringkali, cukup susah untuk berhenti sejenak dari pekerjaan open source karena Anda merasa semua orang membutuhkan Anda. Orang lain mungkin akan membuat Anda merasa bersalah karena mengabaikan pekerjaan ini.Lakukan yang terbaik untuk mendapatkan dukungan dari pengguna dan komunitas Anda selama Anda meninggalkan proyek. Jika Anda tidak bisa menemukan dukungan yang Anda temukan, tetaplah untuk berhenti sejenak. Pastikan untuk mengkomunikasikan ketika Anda tidak ada, sehingga orang lain tidak bingung dengan tingkat responsif Anda.Berhenti lebih dari sekedar liburan. Jika Anda tidak melakukan pekerjaan open source pada akhir pekan, atau pada jam kerja, komunikasikan ekspektasi tersebut pada orang lain, sehingga mereka tidak akan menganggu Anda.Jaga dirimu terlebih dahulu!Mengelola proyek yang populer membutuhkan ketrampilan yang berbeda dengan fase awal pertumbuhan proyek, tetapi tidak kalah manfaatnya. Sebagai seorang pengelola, Anda akan berlatih kepemimpinan dan ketrampilan individu pada tingkat dimana tidak banyak orang yang mendapatkan pengalaman tersebut. Meskipun hal itu tidaklah mudah, menentukan batas yang jelas dan hanya mengambil apa yang Anda rasa nyaman akan membuat Anda tetap bahagia, segar, dan produktif.",
    "url": "/id/best-practices/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/id/best-practices/\">\n      Kiat Baik untuk Pengelola\n    </a>\n  </h2>\n  <h2 id=\"apa-artinya-menjadi-pengelola\">Apa artinya menjadi pengelola?</h2>\n\n\n</div>\n"
  },

  
  "/id/building-community/": {
    "title": "Membangun Komunitas yang Ramah",
    "content": "Mengarahkan proyek Anda untuk kesuksesanAnda telah merilis proyek Anda, Anda telah menyebarkan berita, dan orang-orang mulai melihat. Menarik! Sekarang, bagaimana membuat mereka bertahan?Sebuah komunitas yang ramah merupakan investasi pada masa depan dan reputasi proyek Anda. Jika proyek Anda mulai menerima adanya kontribusi awal, mulailah dengan memberikan pengalaman yang positif, dan permudah akses sehingga mereka akan kembali lagi.Buatlah agar orang-orang merasa diterimaSatu cara untuk memikirkan komunitas proyek Anda adalah melalui apa yang disebut @MikeMcQuaid sebagai  saluran kontributor:Ketika Anda membangun komunitas Anda, perhatikan bagaimana orang yang berada di bagian atas (potensi pengguna) secara teori akan bergerak menuju kebawah (sebagai pengelola aktif). Tujuan Anda adalah mengurangi hambatan pada setiap tahapan pengalaman kontributor. Ketika orang tidak mengalami hambatan, mereka akan termotivasi untuk melakukan sesuatu yang lebih.Mulailah dengan dokumentasi Anda:  Permudah orang lain untuk menggunakan proyek Anda. README yang ramah dan contoh kode yang jelas akan mempermudah siapapun untuk bisa langsung menggunakan proyek Anda.  Jelaskan dengan jelas bagaimana berkontribusi, menggunakan dokumen CONTRIBUTING Anda dan menjaga laporan permasalahan terus diperbarui.Survei Open Source GitHub 2017 menunjukkan dokumentasi yang tidak lengkap atau membingungkan adalah masalah terbesar bagi pengguna open source. Dokumentasi yang baik akan mengundang orang untuk berinterasi dengan proyek Anda. Akhirnya seseorang akan membuka laporan masalah atau mengirimkan pull request. Gunakan interaksi ini sebagai kesempatan untuk memindahkan mereka ke bagian bawah.  Ketika orang baru hadir pada proyek Anda, ucapkan terima kasih! Cukup satu pengalaman negatif untuk membuat orang tidak ingin kembali.  Responsif. Jika Anda tidak merespon laporan permasalahan selama satu bulan, kemungkinan besar mereka sudah melupakan proyek Anda.  Terbuka terhadap jenis kontribusi yang Anda terima. Banyak kontributor memulai dengan melaporkan permasalahan atau perbaikan sederhana. Terdapat banyak cara untuk berkontribusi pada sebuah proyek. Biarkan orang membantu sesuai keinginan mereka untuk membantu.  Jika terdapat kontribusi yang tidak Anda setujui, ucapkan terima kasih atas idenya dan jelaskan kenapa ide tersebut tidak sesuai dengan proyek, dan menghubungkan dengan dokumen yang relevan jika Anda memilikinya.    Berkontribusi pada open source sangat mudah bagi sebagian orang dibandingkan orang lain. Terdapat ketakutan karena melakukan kesalahan atau tidak sesuai. (…) Dengan memberikan tempat bagi kontributor yang memiliki kemampuan kurang baik (dokumentasi, isi web, dll) Anda bisa mengurangi kecemasan tersebut.  — @mikeal, “Growing a contributor base in modern open source”  Mayoritas dari kontributor open source adalah “kontributor umum”: orang-orang yang berkontribusi pada sebuah proyek secara tidak rutin. Seorang kontributor jenis ini mungkin tidak memiliki waktu untuk terus mengikuti perkembangan proyek, sehingga tugas Anda alah mempermudah mereka untuk bisa berkontribusi.Mendorong kontributor lain adalah sebuah investasi pada diri Anda juga. Ketika Anda memberdayakan fans Anda untuk mengerjakan pekerjaan yang mereka sukai, maka tekanan bagi Anda untuk mengerjakan semuanya akan berkurang.Dokumentasikan segalanya    Apakah Anda pernah menghadiri sebuah acara dimana Anda tidak mengenal siapapun, tetapi orang lain tampak saling mengenal satu sama lain dan berbicara seperti sahabat dekat? (…) Sekarang bayangkan Anda ingin berkontribusi pada proyek open source, namun Anda tidak dapat melihat kenapa dan bagaimana ini bisa terjadi.  — @janl, “Sustainable Open Source”  Ketika Anda memulai proyek baru, sangatlah umum untuk membuat proyek Anda secara privat. Tetapi proyek open source berkembang ketika Anda mendokumentasikan proses Anda secara terbuka.Ketika Anda menuliskan segala sesuatunya, banyak orang bisa berpartisipasi pada setiap langkah. Anda mungkin akan mendapatkan bantuan pada sesuatu yang mungkin tidak Anda bayangkan.Menuliskan segala sesuatunya berarti lebih dari sekedar dokumentasi teknis. Setiap kali Anda merasa perlu untuk menuliskan sesuatu atau mendiskusikan proyek Anda secara pribadi, tanyakan diri Anda apakah bisa membuatnya menjadi terbuka.Bersikap transparan terhadap perjalanan proyek Anda, jenis kontribusi yang Anda harapkan, bagaimana kontribusi akan di-review, dan mengapa Anda membuat beberapa keputusan.Jika Anda melihat beberapa orang mengalami masalah yang sama, dokumentasikan jawabannya pada README.Untuk acara rapat, pertimbangkan untuk mempublikasikan hasil catatan pada masalah yang relevan. Masukkan yang Anda dapatkan dari transparansi ini mungkin akan mengejutkan Anda.Mendokumentasikan segalanya juga berlaku pada pekerjaan yang Anda lakukan juga. Jika Anda mengerjakan sebuah perubahan besar pada proyek Anda, simpan pada pull request dan tandai sebagai work in progress (WIP). Dengan cara itu, orang lain bisa merasa terlibat pada fase awal.Bersikap responsifKetika Anda mempromosikan proyek Anda, orang lain akan memberikan masukan untuk Anda. Mereka mungkin memiliki pertanyaan tentang bagaimana segala sesuatunya bekerja, atau membutuhkan bantuan untuk memulainya.Cobalah untuk responsif ketika seseorang membuat laporan masalah, mengirimkan pull request, atau bertanya tentang proyek Anda. Ketika Anda menjawab dengan cepat, orang lain akan merasa bahwa mereka merupakan bagian dari dialog, dan akan merasa lebih berminat untuk berpartisipasi.Meskipun Anda tidak bisa melakukan review secara langsung, mengkonfirmasinya di awal akan meningkatkan hubungan. Berikut cara @tdreyno merespon terhadap pull request pada Middleman:Penelitian Mozilla menemukan bahwa kontributor yang menerima review kode dalam 48 jam pertama memiliki peluang kembali dan kontribusi berkelanjutan yang lebih tinggi.Diskusi tentang proyek Anda juga bisa terjadi pada berbagai tempat lain di Internet, seperti Stack Overflow, Twitter, atau Reddit. Anda bisa membuat notifikasi pada beberapa tempat sehingga Anda akan diberitahu apabila seseorang menyebutkan proyek Anda.Berikan komunitas Anda tempat untuk berkumpulTerdapat dua alasan untuk memberikan komunitas Anda tempat untuk berkumpul.Alasan pertama adalah untuk mereka. Bantu orang-orang untuk saling mengenal. Orang-orang dengan ketertarikan yang sama tentu membutuhkan tempat untuk berdiskusi. Ketika komunikasi terjadi secara publik dan dapat diakses, setiap orang dapat membaca arsip lama untuk bisa dengan cepat memahami kondisi terbaru dan berpartisipasi.Alasan kedua adalah untuk Anda. Jika Anda tidak memberikan orang lain sebuah tempat publik untuk berbicara tentang proyek Anda, mereka akan menghubungi Anda secara langsung. Di awal, terasa mudah untuk merespon terhadap pesan pribadi “hanya kali ini”. Seiring berjalannya waktu, terutama jika proyek Anda menjadi terkenal, Anda akan merasa capek. Hindari keinginan untuk berkomunikasi dengan orang-orang tentang proyek Anda secara pribadi. Arahkan mereka untuk menggunakan media publik.Komunikasi publik bisa sangat sederhana seperti mengarahkan orang-orang untuk membuka laporan masalah dibandingkan mengirimkan pada Anda secara pribadi atau berkomentar pada blog Anda. Anda juga bisa membuat sebuah mailing list, atau membuat akun Twitter, Slack, atau chanel IRC untuk orang-orang bisa berbicara tentang proyek Anda. Atau coba kesemuanya!Kubernetes kops menyempatkan waktu jam bekerja setiap mingguna untuk membantu anggota komunitas:  Kops juga memiliki waktu setiap minggunya untuk menawarkan bantuan dan panduan kepada komunitas. Pengelola kop sudah sepakat untuk menyediakan waktu khusus untuk membantu pengguna baru, membantu PR, dan mendiskusikan fitur baru.Pengecualian terhadap komunikasi publik adalah: 1) masalah keamanan dan 2) pelanggaran kode etik yang sensitif. Anda harus memiliki sebuah cara bagi orang lain untuk melaporkan masalah ini secara pribadi. Jika Anda tidak ingin menggunakan alamat email pribadi, gunakan alamat email yang khusus untuk hal ini.Mengembangkan komunitas AndaKomunitas sangatlah kuat. Kekuratan itu bisa menjadi berkat atau kutukan, tergantung bagaimana Anda menggunakannya. Seiring dengan berkembangnya komunitas proyek Anda, terdapat banyak cara untuk membuatnya menjadi kekuatan yang bersifat membangun, bukan menghancurkan.Tidak mentolerir aktor jahatSembarang proyek yang terkenal akan menarik orang lain untuk merusak dibandingkan membantu komunitas Anda. Mereka mungkin memulainya dengan debat yang tidak perlu, beralasan tentang fitur yang sederhana, atau bahkan menganggu yang lain.Lakukan yang terbaik untuk mengadopsi kebijakan tanpa toleransi terhadap orang-orang jenis ini. Jika dibiarkan, orang-orang negatif ini akan membuat orang lain menjadi tidak nyaman. Bahkan mereka bisa meninggalkan proyek Anda.    Memiliki komunitas yang mendukung adalah kuncinya. Saya tidak akan pernah bisa melakukan pekerjaan ini tanpa rekan-rekan saya, orang asing di Internet yang ramah, dan chanel IRC yang ramai (…).  — @karissa, “How to Run a FOSS Project”  Debat pada hal-hal kecil bisa menganggu yang lain, termasuk Anda dari pekerjaan penting. Orang baru yang hadir pada proyek Anda mungkin melihat diskusi ini dan tidak jadi berpartisipasi.Ketika Anda melihat perilaku negatif terjadi pada proyek Anda, hentikan segera. Jelaskan dengan cara yang sopan tetapi tegas kenapa perilaku semacam ini tidak dapat diterima. Jika hal ini masih berlanjut, Anda bisa saja meminta mereka untuk pergi. Kode etik Anda bisa menjadi panduan yang konstruktif untuk diskusi semacam ini.Temui kontributor dimana mereka beradaDokumentasi yang bagus akan semakin penting ketika komunitas Anda berkembang. Kontributor umum, yang mungkin tidak fasih dengan proyek Anda akan membaca dokumentasi untuk bisa memahami konteks yang mereka perlu ketahui.Pada dokumen CONTRIBUTING, jelaskan secara eksplisit bagaimana kontributor baru bisa memulainya. Anda mungkin bisa mempersiapkan satu bagian khusus untuk tujuan ini. Sebagai contoh, Django, memiliki halaman awal khusus untuk menyambut kontributor baru.Pada daftar laporan masalah Anda, tandai masalah yang cocok untuk setiap jenis kontributor yang berbeda: misalnya, “hanya pemula”, “laporan kesalahan pertama”, atau “dokumentasi”. Label ini mempermudah orang yang baru pada proyek Anda untuk mencari daftar laporan masalah dan mulai berkontribusi.Akhirnya, gunakan dokumentasi Anda untuk membuat orang lain nyaman pada setiap langkahnya.Anda tidak akan pernah berinteraksi dengan sebagian besar orang-orang yang hadir pada proyek Anda. Bisa jadi terdapat kontribusi yang tidak Anda dapatkan karena seseorang merasa terintimidasi atau tidak tahu bagaimana memulainya. Sebuah kata-kata sederhana bisa menjaga mereka untuk tetap bertahan dan bebas dari rasa frustasi.Sebagai contoh, berikut bagaimana cara Rubinius memulai panduan kontribusinya:  Kita ingin memulainya dengan mengucapkan terima kasih karena menggunakan Rubinius. Proyek ini merupakan hasil cinta kami, dan kami menghargai semua pengguna yang menemukan kesalahan, membuat perbaikan performa, dan membantu dengan dokumentasi. Setiap kontribusi sangat berharga, sehingga kami mengucapkan terima kasih untuk berpartisipasi. Meski demikian, berikut adalah beberapa panduan yang kami harapkan untuk bisa diikuti sehingga kami bisa menyelesaikan permasalahan Anda dengan baik.Berbagi kepemilikan dari proyek Anda    Pemimpin Anda akan memiliki opini  yang berbeda, seperti halnya komunitas lainnya! Namun, Anda perlu mengambil langkah-langkah untuk memastikan bahwa suara terbesar tidak selalu menang, dan suara minoritas akan selalu didengarkan.  — @sarahsharp, “What makes a good community?”  Orang-orang tertarik untuk berkontribusi pada proyek apabila mereka merasa perasaan memiliki. Hal itu bukan berarti Anda perlu memberikan visi proyek Anda kepada mereka atau menerima kontribusi yang tidak Anda kehendaki. Tetapi semakin banyak Anda memberikan penghargaan kepada orang lain, semakin besar kemungkinan mereka akan bertahan.Cari cara untuk bisa berbagi kepemilikan dengan komunitas Anda sebanyak mungkin. Berikut beberapa ide:  Menahan diri memperbaiki kesalahan sederhana. Gunakan kesempatan ini untuk merekrut kontributor baru, atau menjadi mentor bagi orang lain yang ingin berkontribusi. Hal ini tampaknya tidak biasa pada awalnya, namun investasi Anda akan berbuah hasil dikemudian hari. Sebagai contoh @michaeljoseph meminta kontributor untuk mengirimkan pull request pada masalah Cookiecutter, dan tidak menyelesaikannya sendiri.      Bualah dokumen CONTRIBUTORS atau AUTHORS pada proyek Anda yang mendata semua orang yang berkontribusi pada proyek Anda, seperti Sinatra.        Jika Anda memiliki komunitas yang cukup besar, kirimkan surat berita atau tuliskan blog dan ucapkan terima kasih pada kontributor. This Week in Rust milik Rust dan Shoutouts milik Hoodie adalah dua contoh bagus.        Berikan setiap kontributor akses commit. @felixge menemukan bahwa hal ini membuat orang lain lebih tertarik untuk memperbaiki perbaikan mereka, dan dia juga menemukan pengelola baru untuk proyek yang tidak dia kelola selama beberapa waktu.        Jika proyek Anda berada pada GitHub, pindahkan proyek Anda dari akun personal ke Organisasi dan tambahkan paling tidak satu admin cadangan. Organisasi mempermudah pekerjaan kolaborasi dengan kolaborator eksternal.  Kenyataannya adalah sebagian besar proyek hanya memiliki satu atau dua pengeloa yang melakukan sebagian besar pekerjaan. Semakin besar proyek Anda, dan semakin besar komunitas Anda, semakin mudah untuk menemukan bantuan.Meskipun tidak selalu mudah untuk mendapatkan orang yang memenuhi panggilan Anda, memberikan sinyal akan meningkatkan peluang dimana orang lain akan ikut terlibat. Dan semakin cepat Anda melakukannya, semakin cepat pula orang akan datang membantu.    Pastikan untuk merekrut kontributor yang menikmati dan mampu melakukan sesuatu yang tidak Anda bisa lakukan. Apakah Anda suka membuat kode, tetapi tidak suka menjawab laporan permasalahan? Maka cari orang-orang pada komunitas Anda yang suka dengan hal itu dan biarkan mereka untuk melakukannya.  — @gr2m, “Welcoming Communities”  Menyelesaikan konflikPada awal proyek, membuat keputusan besar terasa mudah. Ketika Anda hendak melakukan sesuatu, Anda langsung melakukannya.Seiring dengan proyek Anda semakin populer, semakin banyak orang akan memperhatikan setiap keputusan yang Anda ambil. Meskipun Anda tidak memiliki komunitas kontributor yang besar sekalipun, apabila proyek Anda memiliki banyak pengguna, Anda akan mendapati bahwa orang lain akan berusaha mempengaruhi keputusan atau mengangkat masalah mereka sendiri.Pada sebagian besar kasus, jika Anda telah membangun komunitas yang ramah dan saling menghargai serta mendokumentasikan proses Anda secara terbuka, komunitas Anda akan mudah menemukan solusinya. Namun seringkali Anda akan menjumpai masalah yang susah diselesaikan.Tentukan tingkat kesabaranKetika komunitas Anda berjuang dengan masalah yang rumit, emosi bisa meningkat. Orang-orang bisa menjadi marah dan frustasi dan melimpahkannya pada orang lain, atau pada Anda.Tugas Anda sebagai pengelola adalah menjaga situasi ini agar tidak sampai memuncak. Meskipun Anda memiliki opini yang kuat pada topik tersebut, cobalah untuk membuat posisi Anda sebagai moderator atau fasilitator dan jangan memaksakan kehendak Anda. Jika seseorang mencoba memonopoli diskusi, ambil tindakan secepatnya untuk memastikan diskusi tetap terjaga dan produktif.    Sebagai pengelola proyek, sangatlah penting untuk menghargai kontributor Anda. Mereka seringkali menerima apa yang Anda sampaikan secara personal.  — @kennethreitz, “Be Cordial or Be on Your Way”  Orang lain melihat Anda sebagai panutan. Berikan contoh yang baik. Anda bisa mengutarakan kekecewaan, kesedihan, atau kekhawatiran, tetapi lakukan secara perlahan.Mempertahankan hal yang baik bukanlah sesuatu yang mudah, tetapi mendemonstrasikan kepemimpinan akan meningkatkan kesehatan dari komunitas Anda. Intrnet akan berterima kasih kepada Anda.Perlakukan README sebagai konstitusiDokumen README lebih dari sekedar sekumpulan instruksi. Dokumen itu juga tempat untuk mendiskusikan tujuan, visi, dan peta proyek Anda. Jika orang-orang terlalu fokus berdebat pada fitur tertentu, mungkin akan membantu untuk melihat kembali dokumen README dan diskusikan visi yang lebih jauh dari proyek Anda. Berfokus pada README juga memperdalam diskusi sehingga Anda bisa mendapatkan diskusi yang konstruktif.Fokus pada perjalanan, bukan tujuanBeberapa proyek menggunakan proses pemilihan suara model voting untuk pengambilan keputusan yang besar. Meskipun masuk akal di awal, voting berfokus pada mendapatkan “jawaban”, dan bukan pada mendengarkan dan menjawab kekhawatiran orang lain.Voting bisa sangat politis, dimana anggota komunitas merasa tertekan untuk melakukannya. Tidak semua memberikan suaranya, baik sebagai silent majority pada komunitas Anda, atau pengguna yang tidak tahu bahwa terjadi voting.Seringkali voting memang diperlukan untuk memecah kebuntuan. Namun tekankan “consensus seeking” daripada konsensus.Pada proses consensus seeking, anggota komunitas mendiskusikan masalah utama sampai mereka merasa didengarkan. Ketika tersisa masalah kecil, maka komunitas akan bergerak maju. “Consensus seeking” mengakui bahwa sebuah komunitas mungkin tidak akan mendapatkan jawaban yang sempurna. Namun proses ini memprioritaskan proses untuk mendengarkan dan diskusi.    Salah satu alasan kenapa sistem voting tidak berlaku untuk masalah Atom adalah karena tim Atom tidak akan mengikuti sistem voting pada setiap kasusnya. Seringkali kami harus memilih apa yang kami rasa benar meskipun tidak populer. (…) Apa yang bisa saya tawarkan dan janjikan…adalah karena itu merupakan pekerjaan saya untuk mendengarkan komunitas.  — @lee-dohm on Atom’s decisionmaking process  Meskipun Anda tidak mengadopsi proses consensus seeking, sebagai seorang pengelola proyek, sangatlah penting bahwa orang lain tahu bahwa Anda mendengarkan. Membuat orang lain merasa didengarkan, dan berkomitmen untuk menyelesaikan masalah mereka akan membantu menyelesaikan situasi yang sensitif. Lanjutkan ucapan Anda dengan tindakan.Jangan tergesa-gesa untuk mengambil keputusan untuk mendapatkan resolusi. Pastikan semua orang merasa didengarkan dan semua informasi sudah dipublikasikan sebelum melanjutkan pada penyelesaian.Jaga diskusi agar berfokus pada tindakanDiskusi penting, tetapi terdapat perbedaan antara diskusi yang produktif dan tidak produktif.Dorong terjadinya diskusi selama mengarah pada jawaban. Jika diskusi sudah tidak jelas dan keluar dari topik, mengarah ke individual, atau mulai memperhatikan hal-hal kecil yang tidak relevan, waktunya untuk menghentikan diskusi tersebut.Mengijinkan diskusi semacam ini untuk terus berlanjut tidak hanya jelek untuk masalah yang dibahas, namun juga pada komunitas Anda. Diskusi semacam ini mengirimkan pesan bahwa jenis diskusi semacam ini diijinkan atau bahkan malah disarankan, dan bisa membuat orang lain untuk tidak bersedia mengirimkan atau menyelesaikan masalah di masa depan.Dengan setiap poin yang dibuat oleh Anda atau orang lain, tanyakan kepada diri Anda, “Bagaimana hal ini bisa membawa kita lebih dekat pada penyelesaian?”Jika diskusi sudah mulai tidak mengarah, tanyakan pada grup, “Langkah apa yang sebaiknya kita ambil berikutnya?” untuk memfokuskan ulang pada diskusi.Jika sebuah diskusi tidak mengarah kemana-mana, tidak ada tindakan yang jelas yang harus diambil, atau tindakan yang benar sudah dilakukan, tutup laporan dan jelaskan kenapa.    Mengarahkan sebuah diskusi pada sebuah kegunaan tanpa bersifat memaksa adalah sebuah seni. Hal ini tidak semudah untuk meminta orang-orang untuk menghabiskan waktu mereka, atau meminta mereka untuk tidak memberikan komentar kecuali mereka memiliki ide yang konstruktif. (…) Anda harus menyarankan kondisi untuk peningkatan lebih lanjut: berikan rute kepada orang, jalur yang bisa diikuti yang mengarah pada hasil yang Anda inginkan, tanpa seolah-olah Anda mengatur perilaku mereka.  — @kfogel, Producing OSS  Tentukan perang Anda secara bijaksanaKonteks itu penting. Pertimbangkan siapa yang harus terlibat pada diskusi dan bagaimana mereka bisa merepresentasikan komunitas secara luas.Jika semua orang pada komunitas tidak suka, atau terlibat dengan masalah ini? Atau cuma individual? Jangan lupa untuk memperhatikan anggota komunitas yang hanya mendengarkan, tetapi tidak memberikan suaranya secara aktif.Jika masalah tersebut tidak merepresentasikan kebutuhan yang lebih luas dari komunitas Anda, Anda mungkin cukup meminta pendapat dari sebagian kecil orang. Jika hal ini merupakan masalah yang terjadi berulang-ulang tanpa penyelesaian yang jelas, hubungkan dengan diskusi sebelumnya dan tutup laporan masalah.Identifikasi pemecah kebuntuan pada komunitasDengan perilaku yang baik dan komunikasi yang jelas, sebagian besar situasi akan dapat terselesaikan. Meski demikian, bahkan pada diskusi yang produktif sekalipun, seringkali terdapat perbedaan pendapat tentang apa yang harus dilakukan. Pada kasus ini, identifikasi individu atau sekelompok orang yang bisa memecah kebuntuan.Orang ini bisa pengelola utama pada proyek, atau sekelompok orang yang mengambil keputusan berdasarkan voting. Idealnya Anda sudah mengindentifikasi orang-orang ini dan menuliskan prosesnya pada dokumen GOVERNANCE sebelum Anda harus menggunakannya.Gunakan ini sebagai jalan terakhir. Masalah semacam ini merupakan kesempatan bagi komunitas Anda untuk berkembang dan belajar. Manfaatkan kesempatan ini dan gunakan proses kolaboratif untuk berpidah pada penyelesaian sebisa mungkin.Komunitas adalah ❤️ dari open sourceKomunitas yang sehat dan berkembang akan mengisi ribuan jam yang dihabiskan pada open source setiap minggunya. Banyak kontributor akan menunjuk orang lain sebagai alasan ia bekerja - atau tidak bekerja - pada open source. Dengan mempelajari bagaimana menggunakan kekuatan tersebut secara positif dan konstruktif, Anda akan membantu orang-orang diluar sana untuk mendapatkan pengalaman open source yang tak terlupakan.",
    "url": "/id/building-community/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/id/building-community/\">\n      Membangun Komunitas yang Ramah\n    </a>\n  </h2>\n  <h2 id=\"mengarahkan-proyek-anda-untuk-kesuksesan\">Mengarahkan proyek Anda untuk kesuksesan</h2>\n\n\n</div>\n"
  },

  
  "/id/code-of-conduct/": {
    "title": "Kode Etik Anda",
    "content": "Kenapa saya perlu menerapkan kode etik?Sebuah kode etik adalah dokumen yang menjelaskan perilaku yang diharapkan dari partisipan proyek Anda. Mengadopsi, dan menerapkan kode etik dapat membantu membuat atmosfir sosial yang positif pada komunitas Anda.Kode etik membantu tidak hanya partisipan Anda, tetapi juga Anda sendiri. Jika Anda mengelola proyek, Anda akan mendapati bahwa tingkah laku tidak produktif dari partisipan lain bisa menguras energi Anda dan Anda merasa tidak bahagia terhadap pekerjaan Anda.Kode etik menekankan Anda untuk memfasilitasi perilaku komunitas yang sehat dan konstruktif. Bersifat proaktif mengurangi kecenderungan bahwa Anda atau orang lain akan merasa capek dengan proyek Anda, dan membantu mengambil tindakan apabila seseorang melakukan sesuatu yang tidak Anda setujui.Membuat kode etikCobalah untuk membuat kode etik sedini mungkin: idealnya ketika Anda membuat proyek pertama Anda.Selain mengkomunikasikan ekspektasi Anda, kode etik juga menjelaskan beberapa hal berikut:  Dimana kode etik berlaku (hanya pada masalah dan pull request, atau aktivitas komunitas?)  Kepada siapa kode etik berlaku (anggota komunitas dan pengelola, tetapi bagaimana dengan sponsor?)  Apa yang terjadi jika seseorang melanggar kode etik  Bagaimana seseorang dapat melaporkan pelanggaranApabila dimungkinkan, gunakan yang sudah ada. Contributor Covenant adalah kode etik yang bisa digunakan dan sudah digunakan oleh lebih dari 40.000 proyek open source, termasuk Kubernetes, Rails, dan Swift.Kode etik Django dan Kode etik Warga adalah dua contoh kode etik yang bagus.Tempatkan dokumen CODE_OF_CONDUCT pada induk direktori proyek Anda, dan hubungkan dari dokumen README sehingga terlihat dengan jelas oleh komunitas Anda.Menentukan bagaimana Anda akan menerapkan kode etik  Kode etik yang tidak (bisa) diterapkan jauh lebih jelek dibandingkan tanpa kode etik sama sekali: hal ini mengirimkan pesan bahwa nilai dari kode etik tidaklah penting atau dihargai pada komunitas Anda.  — Ada Initiative  Anda harus menjelaskan bagaimana kode etik Anda akan diterapkan sebelum pelanggaran terjadi. Terdapat beberapa alasan:      Hal ini mendemonstrasikan bahwa Anda serius untuk mengambil tindakan apabila diperlukan.        Komunitas Anda akan merasa lebih terjamin apabila komplain akan direview.        Anda meyakinkan komunitas Anda bahwa proses review berjalan dengan adil dan transparan, apabila mereka mendapati dirinya diinvestigasi terhadap sebuah pelanggaran.  Anda harus memberikan sebuah jalan yang pribadi (seperti alamat email) untuk melaporkan pelanggaran kode etik dan menjelaskan siapa yang menerima laporan tersebut. Penerima laporan bisa jadi pengelola, sekelompok orang pengelola, atau tim kode etik.Jangan lupa bahwa seseorang mungkin melaporkan pelanggaran terhadap orang yang akan menerima laporan tersebut. Pada kasus ini, berikan opsi untuk melaporkan pelanggaran pada orang lain. Misalnya, @ctb dan @mr-c menjelaskan pada proyek mereka, khmer:  Perilaku kasar, melecehkan, atau perilaku lainnya yang tidak dapat diterima dapat dilaporkan dengan mengirimkan email pada khmer-project@idyll.org yang akan sampai pada C. Titus Brown dan Michael R. Crusoe. Untuk melaporkan masalah pada salah satu dari mereka, kirimkan email pada Judi Brown Clarke, Ph.D. Direktur  Diversity pada BEACON Center untuk Studi Evolusi, sebuah pusat studi NSF untuk Ilmu Pengetahuan dan Teknologi.*Sebagai inspirasi, lihat manual penerapan Django  (meskipun Anda mungkin tidak perlu sedetail ini, tergantung dari ukuran proyek Anda).Menerapkan kode etikSeringkali, terlepas dari usaha Anda, seseorang akan melakukan pelanggaran terhadap kode etik. Terdapat beberapa cara untuk menyelesaikan perilaku negatif ketika hal itu terjadi.Mengumpulkan informasi tentang situasiPerlakukan setiap suara anggota komunitas sama pentingnya seperti suara Anda sendiri. Jika Anda menerima laporan bahwa seseorang melanggar kode etik, perlakukan dengan serius dan investigasi hal tersebut, meskipun hal itu tidak sesuai dengan pengalaman Anda dengan orang tersebut. Dengan melakukan hal ini, Anda memberikan tanda kepada komunitas Anda bahwa Anda menghargai perspektif dan mempercayai penilaian mereka.Anggota komunitas yang melanggar mungkin orang yang melakukannya berulang-ulang dan membuat orang lain menjadi tidak nyaman, atau mereka mungkin melakukannya hanya sekali. Kedua kasus tersebut bisa menjadi dasar untuk mengambil tindakan, tergantung dari konteks.Sebelum Anda merespon, berikan Anda waktu untuk memahami apa yang terjadi. Baca komentar dan percakapan orang tersebut di masa lampau untuk memahami siapa mereka dan mengapa mereka bertindak seperti itu. Cobalah untuk mendapatkan perspektif diluar perspektif Anda sendiri tentang orang ini dan perilaku mereka.  Jangan terbawa pada argumentasi. Jangan terpengaruh dengan perilaku orang lain sebelum Anda menyelesaikan satu masalah. Fokus pada apa yang Anda perlukan.  — Stephanie Zvan, “So You’ve Got Yourself a Policy. Now What?”  Mengambil tindakan yang sesuaiSetelah mengumpulkan dan memproses informasi yang cukup, Anda perlu memutuskan apa yang akan Anda lakukan. Ketika Anda mempertimbangkan langkah selanjutnya, ingatlah bahwa tujuan Anda sebagai moderator adalah untuk mengembangkan lingkungan yang aman, saling menghargai, dan kolaboratif. Pertimbangkan untuk tidak hanya memikirkan kondisi yang sedang ditangani, tetapi bagaimana respon Anda akan mempengaruhi perilaku komunitas Anda dan ekspektasi untuk masa depan.Ketika seseorang melaporkan pelanggaran kode etik, hal itu merupakan tugas Anda, bukan mereka untuk menanganinya. Seringkali, pelapor membuka informasi yang bisa membahayakan karir, reputasi, atau keamanan fisik mereka. Memaksa mereka untuk mengkonfrontasi pelaku bisa menempatkan pelapor pada posisi yang membahayakan. Anda harus menangani komunikasi langsung dengan pelapor, kecuali pelapor meminta secara eksplisit.Terdapat beberapa cara untuk merespon pada pelanggaran kode etik:      Berikan peringatan publik dan jelaskan bagaimana perilaku mereka mempengaruhi orang lain secara negatif pada media tempat pelanggaran itu terjadi. Ketika memungkinkan, komunikasi publik memberikan tanda pada komunitas bahwa Anda menganggap kode etik secara serius. Harap sopan, tetapi tegas pada komunikasi Anda.        Hubungi orang tersebut secara pribadi untuk menjelaskan bagaimana perilaku mereka mempengaruhi orang lain secara negatif. Anda mungkin akan menggunakan media komunikasi pribadi jika situasinya melibatkan informasi pribadi. Jika Anda berkomunikasi dengan seseorang secara pribadi, merupakan ide yang bagus untuk menggunakan CC kepada mereka yang melaporkan situasinya, sehingga mereka tahu bahwa Anda mengambil tindakan. Konfirmasikan kepada pelapor sebelum memberikan CC kepada mereka.  Seringkali, sebuah resolusi tidak dapat tercapai. Tersangka menjadi agresif dan bertindak kasar ketika dikonfrontasi atau tidak mengubah perilakunya. Pada situasi ini, Anda mungkin bisa mempertimbangkan tindakan yang lebih tegas. Sebagai contoh:      Skorsing dari proyek, yang dilakukan melalui larangan sementara pada setiap partisipasi aspek proyek        Larangan permanen dari proyek  Melarang anggota tidak boleh dianggap sepele dan merepresentasikan perbedaan perspektif yang permanen. Anda harus mengambil tindakan ketika resolusi tidak dapat dicapai.Tanggung jawab Anda sebagai pengelolaKode etik bukanlah hukum yang diberlakukan secara sewenang-wenang. Anda adalah orang yang memberlakukan kode etik dan hal itu merupakan tanggung jawab Anda untuk mengikuti aturan yang ditetapkan oleh kode etik.Sebagai pengelola, Anda membuat panduan untuk komunitas Anda dan memberlakukan panduan tersebut sesuai dengan aturan yang ditetapkan pada kode etik. Hal ini berarti memproses laporan pelanggaran kode etik secara serius. Pelapor berhak mendapatkan review yang adil terhadap komplain mereka. Jika Anda menentukan bahwa perilaku yang dilaporkan bukanlah sebuah pelanggaran, komunikasikan kepada mereka dan jelaskan mengapa Anda tidak melakukan tindakan apapun. Apa yang akan mereka lakukan terhadap keputusan Anda merupakan hak mereka: mentolerasi perilaku yang tidak sesuai atau berhenti berpartisipasi pada komunitas.Sebuah laporan tentang perilaku yang secara teknis melanggar kode etik masih tetap mengindikasikan bahwa ada masalah pada komunitas Anda, dan Anda harus menginvestigasi masalah ini. Hal ini mungkin termasuk merevisi kode etik untuk mengklarifikasi perilaku yang dapat diterima dan/atau berbicara pada orang yang dilaporkan dan memberitahukan bahwa meskipun mereka tidak melanggar kode etik, mereka membuat partisipan lain menjadi tidak nyaman.Akhirnya, sebagai pengelola, Anda menentukan dan menerapkan standar untuk perilaku yang dapat diterima. Anda memiliki kemampuan untuk mengubah nilai komunitas pada proyek dan partisipan mengharapkan Anda untuk menerapkan nilai-nilai tersebut dengan cara yang adil.Mendorong perilaku yang Anda harapkan pada dunia 🌎Ketika sebuah proyek tampak tidak ramah, meskipun hanya satu orang yang dapat ditoleransi oleh anggota lain, Anda memiliki resiko untuk kehilangan banyak kontributor. Bukanlah perkara mudah untuk mengadopsi dan menerapkan kode etik, tetapi mengembangkan lingkungan yang ramah akan membantu komunitas Anda untuk berkembang.",
    "url": "/id/code-of-conduct/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/id/code-of-conduct/\">\n      Kode Etik Anda\n    </a>\n  </h2>\n  <h2 id=\"kenapa-saya-perlu-menerapkan-kode-etik\">Kenapa saya perlu menerapkan kode etik?</h2>\n\n\n</div>\n"
  },

  
  "/id/finding-users/": {
    "title": "Menemukan Pengguna untuk Proyek Anda",
    "content": "Menyebarkan kataTidak ada aturan yang menyebutkan bahwa Anda harus mempromosikan sebuah proyek open source ketika Anda merilisnya. Terdapat banyak alasan untuk bekerja pada open source yang tidak berkaitan dengan popularitas. Namun jika Anda berharap orang lain akan menemukan dan menggunakan proyek open source Anda, inilah saatnya untuk memberitahukan ke semua orang tentang hasil kerja keras Anda.Menentukan pesan AndaSebelum Anda memulai pekerjaan tentang mempromosikan proyek Anda, Anda harus bisa menjelaskan apa yang dilakukan oleh proyek Anda dan kenapa itu penting.Apa yang membuat proyek Anda berbeda atau menarik? Mengapa Anda membuatnya? Menjawab pertanyaan-pertanyaan ini kepada diri sendiri akan membuat lebih mudah untuk bisa meyakinkan orang lainIngat bahwa orang-orang akan terlibat sebagai pengguna, dan kemudian kontributor, karena menyelesaikan sebuah masalah bagi mereka. Ketika Anda memikirkan tentang pesan dan nilai proyek Anda, cobalah untuk melihat dari sudut pandang apa yang mereka inginkan.Sebagai contoh, @robb menggunakan contoh kode program untuk menjelaskan kenapa proyeknya Cartography, berguna:Untuk mendalami lebih dalam tentang penyampaian pesan, lihat panduan Mozilla “Persona dan Jalur” untuk mengembangkan persona pengguna.Bantu orang lain menemukan dan mengikuti proyek Anda  Idealnya Anda membutuhkan satu URL “awal” yang bisa Anda promosikan dan mengarahkan orang-orang sehubungan dengan proyek Anda. Anda tidak harus menggunakan template atau nama domain, tetapi proyek Anda membutuhkan sebuah titik fokus.  — Peter Cooper &amp; Robert Nyman, “How to Spread the Word About Your Code”  Bantu orang lain untuk mencari dan mengingat proyek Anda dengan mengarahkan mereka pada sebuah nama yang tunggal.Gunakan akun yang jelas untuk mempromosikan pekerjaan Anda. Sebuah akun Twitter, URL GitHub, atau channel IRC merupakan cara mudah untuk menunjukkan kepada orang lain tentang proyek Anda. Akun-akun ini juga memberikan tempat untuk berdiskusi bagi komunitas proyek Anda yang senantiasa berkembang.Jika Anda belum ingin membuat channel pada proyek Anda, promosikan akun Twitter atau GitHub pada segala pekerjaan Anda. Sebagai contoh, pastikan akun tersebut masuk pada biodata atau slide presentasi ketika Anda berbicara pada acara pertemuan. Dengan cara itu, orang lain tahu bagaimana menghubungi Anda atau mengikuti hasil pekerjaan Anda.    Sebuah kesalahan yang saya lakukan di masa-masa awal (…) adalah dengan tidak membuat akun Twitter untuk proyek. Twitter merupakan cara yang baik untuk memberikan informasi terbaru kepada orang-orang sekaligus untuk menampilkan orang lain kepada proyek.  — @nathanmarz, “History of Apache Storm and Lessons Learned”  Pertimbangkan untuk membuat halaman web untuk proyek Anda. Sebuah halaman web membuat proyek Anda terasa lebih bersahabat dan mudah untuk dieksplorasi, terutama jika dikombinasikan dengan dokumentasi dan tutorial yang jelas. Hal ini juga menjelaskan bahwa proyek Anda masih aktif, yang akan membuat pengguna Anda menjadi lebih nyaman dalam menggunakannya. Gunakan contoh untuk memberikan ide kepada orang lain tentang bagaimana menggunakan proyek Anda.@adrianholovaty, co-creator dari Django, mengatakan bahwa halaman web merupakan “salah satu hal terbaik yang kita lakukan dengan Django di masa-masa awal”.Jika proyek Anda berada di GitHub, Anda bisa menggunakan GitHub Pages untuk membuat halaman web dengan mudah. Yeoman, Vagrant, dan Middleman adalah beberapa contoh dari halaman web yang komprehensif.Ketika Anda telah memiliki pesan untuk proyek Anda dan cara mudah bagi orang lain untuk menemukan proyek Anda, sekarang bicaralah ke pengguna Anda!Ketika pengguna proyek Anda (online)Kegiatan outreach online merupakan cara yang bagus untuk berbagi dan menyebarkan informasi dengan cepat. Dengan menggunakan chanel online, Anda memiliki potensi untuk menjangkau jumlah pengguna yang sangat besar.Ambil keuntungan dari komunitas dan platform online yang sudah ada untuk menjangkau pengguna Anda. Jika proyek open source Anda adalah proyek perangkat lunak, Anda mungkin bisa menjangkau proyek Anda melalui Stack Overflow, reddit, Hacker News, atau Quora. Temukan chanel yang Anda pikir orang-orang akan mendapatkan keuntungan dari pekerjaan Anda.    Setiap program memiliki fungsi yang spesifik yang dianggap penting bagi sebagian kecil pengguna. Jangan melakukan spam kepada banyak orang. Tentukan target Anda pada komunitas yang mendapatkan keuntungan dengan mengetahui proyek Anda.  — @pazdera, “Marketing for open source projects”  Amati jika Anda bisa menemukan cara untuk berbagi informasi tentang proyek Anda pada cara-cara yang relevan:  Berkenalan dengan proyek dan komunitas open source yang relevan. Seringkali, Anda tidak harus secara langsung mempromosikan proyek Anda. Jika proyek Anda sesuai untuk pengolah data yang menggunakan Python, berkenalanlah dengan komunitas pengolah data Python. Dengan semakin banyak orang yang mengenal Anda, kesempatan akan hadir untuk membicarakan hasil pekerjaan Anda.  Temukan orang yang memiliki masalah yang diselesaikan dengan proyek Anda. Cari melalui forum tentang orang-orang yang menjadi target pengguna proyek Anda. Jawab pertanyaan mereka dan carilah kesempatan untuk menawarkan proyek Anda sebagai solusinya.  Minta masukan. Perkenalkan diri Anda dan pekerjaan Anda kepada pengguna yang relevan. Jelaskan secara spesifik tentang siapa saja yang Anda anggap akan mendapatkan keuntungan dari proyek Anda. Cobalah untuk mengakhiri kalimat : “Saya pikir proyek saya akan sangat membantu X, yang sedang mencoba melakukan Y”. Dengarkan dan berikan respon terhadap masukan orang lain dibandingkan terus menerus mempromosikan hasil pekerjaan Anda.Secara umum, berfokuslah pada membantu orang lain sebelum meminta. Karena sangatlah mudah bagi setiap orang untuk mempromosikan proyek, sehingga akan terjadi banyak suara-suara yang masuk. Berikan orang lain tentang konteks tentang diri Anda, bukan saja yang Anda inginkan agar Anda bisa berbeda dari yang lain.Jika tidak ada yang menanggapi atau merespon, jangan kecewa! Rilis proyek awal biasanya merupakan proses yang bersifat iteratif yang bisa memakan waktu berbulan-bulan atau bahkan bertahun-tahun. Jika Anda tidak mendapatkan respon untuk pertama kali, cobalah taktik yang berbeda, atau cari cara lain untuk menambahkan nilai bagi hasil pekerjaan orang lain terlebih dahulu. Hal ini memerlukan waktu dan dedikasi.Ketika pengguna proyek Anda (offline)Kegiatan offline adalah cara yang populer untuk mempromosikan proyek baru. Kegiatan ini merupakan cara yang baik untuk menjangkau pengguna yang sibuk dan membangun koneksi yang lebih personal, terutama jika Anda tertarik untuk menjangkau para pengembang.Jika Anda termasuk awam pada komunikasi publik, mulailah dengan mencari acara pertemuan lokal yang berhubungan dengan bahasa atau ekosistem dari proyek Anda.    Saya cukup gugup ketika hendak menghadiri PyCon. Saya memberikan ceramah, hanya kenal beberapa orang, dan acara berlangsung selama satu minggu penuh. (…) Tetapi saya tidak perlu khawatir. PyCon sudah fenomenal! (…) Semua orang sangat ramah dan aktif, bahkan sangat jarang saya mendapati waktu tidak berbicara dengan orang-orang!  — @jhamrick, “How I learned to Stop Worrying and Love PyCon”  Jika Anda belum pernah berbicara pada acara pertemuan sebelumnya, sangatlah normal untuk cemas! Ingatlah bahwa pengguna Anda hadir karena mereka dengan tulus hendak mendengarkan tentang pekerjaan Anda.Ketika Anda mulai menuliskan presentasi Anda, fokus pada apa yang akan dianggap menarik oleh pengguna Anda. Gunakan bahasa yang ramah dan mudah dipahami. Senyum, ambil nafas, dan bersenang-senanglah.    Ketika Anda mulai menuliskan isi presentasi Anda, tidak perduli topiknya, hal itu bisa membantu jika Anda melihatnya seperti menceritakan sebuah cerita kepada orang lain.  — Lena Reinhard, “How to Prepare and Write a Tech Conference Talk”  Ketika Anda sudah merasa siap, pertimbangkan untuk berbicara pada level konferensi untuk mempromosikan proyek Anda. Acara konferensi bisa membantu Anda menjangkau lebih banyak orang, seringkali dari berbagai penjuru dunia.Carilah konferensi yang sesuai dengan bahasa atau ekosistem Anda. Sebelum Anda mengumpulkan presentasi Anda, pelajari konferensi sebelumnya untuk menyesuaikan presentasi Anda dengan pengunjung dan meningkatkan peluang Anda untuk diterima. Anda seringkali bisa melihat pengunjung konferensi dengan melihat para pembicaranya.    Saya menuliskan pada orang-orang JSConf dan meminta mereka untuk memberikan saya satu kesempatan dimana saya bisa mempresentasikannya pada JSConf EU. (…) Saya sangatlah takut, mempresentasikan sesuatu yang telah saya persiapkan selama enam bulan. (…) Selama acara saya hanya berpikir, ya Tuhan. Apa yang saya lakukan disini?  — @ry, “History of Node.js” (video)  Membangun sebuah reputasiSelain strategi yang dijelaskan diatas, cara terbaik untuk mengundang orang lain untuk berbagi dan berkontribusi pada proyek Anda adalah untuk berbagi dan berkontribusi pada proyek mereka.Membantu pengguna baru, berbagai sumber daya, dan membuat kontribusi yang berguna pada pekerjaan orang lain akan membantu Anda membangun reputasi yang positif. Lalu orang-orang tersebut akan memiliki konteks untuk pekerjaan Anda dan akan lebih memperhatikan dan mempromosikan apa yang Anda kerjakan.Seringkali, hubungan ini bisa mengarah pada hubungan yang resmi dengan ekosistem yang lebih luas.    Satu-satunya alasan kenapa urllib3 adalah pustaka Python pihak ketiga yang paling terkenal adalah karena merupakan bagian dari requests.  — @shazow, “How to make your open source project thrive”  Tidak pernah terlalu cepat, atau terlambat untuk membangun reputasi Anda. Meskipun Anda baru saja merilis proyek Anda, selalu carilah cara untuk membantu orang lain.Tidak ada solusi cepat untuk membangun pengguna. Mendapatkan kepercayaan dan penghargaan membutuhkan waktu, dan proses membangun reputasi tidak pernah selesai.    PhantomJS dirilis pertama kalinya di awal 2011. (…) Saya menyebarkan dengan cara yang sederhana: Saya menuliskan tweet, saya menuliskan di blog tentang apa yang bisa Anda lakukan, saya menjelaskannya pada berbagai acara pertemuan. Ketika proyek ini mulai dikenal pada 2014, Saya mulai memberikan presentasi tentang proyek ini.  — @ariya, “Maintainer Stories”  Teruslah Berjuang!Seringkali membutuhkan waktu yang sangat lama sebelum orang lain mulai memperhatikan proyek open source Anda. Tidak masalah! Sebagian dari proyek open source yang terkenal saat ini membutuhkan waktu bertahun-tahun untuk mencapai aktivitas yang tinggi seperti saat ini. Fokus pada membangun relasi dibandingkan mencari jalan pintas.Bersabarlah dan terus berbagi pekerjaan Anda dengan mereka yang menghargainya.",
    "url": "/id/finding-users/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/id/finding-users/\">\n      Menemukan Pengguna untuk Proyek Anda\n    </a>\n  </h2>\n  <h2 id=\"menyebarkan-kata\">Menyebarkan kata</h2>\n\n\n</div>\n"
  },

  
  "/id/getting-paid/": {
    "title": "Dibayar untuk Pekerjaan Open Source",
    "content": "Kenapa beberapa orang mencari dukungan finansialBanyak dari pekerjaan open source adalah sukarela. Sebagai contoh, seseorang mungkin menemukan sebuah kesalahan dalam sebuah proyek yang mereka gunakan dan mengirimkan sebuah perbaikan, atau mereka menikmati menggunakan proyek open source dalam waktu senggang mereka.  Saya sedang mencari proyek pemrograman sebagai “hobi” yang bisa membuat saya sibuk saat menjelang Natal. (…) Saya memiliki komputer dirumah dan tidak banyak yang bisa dikerjakan. Saya memutuskan untuk menulis sebuah penterjemah untuk bahasa pemrograman script yang sudah saya pikirkan belakangan ini. (…) Saya memilih Python sebagai judul pekerjaan saya.  — @gvanrossum, “Programming Python”  Terdapat banyak alasan kenapa seseorang tidak ingin dibayar untuk pekerjaan open source mereka.  Mereka sudah memiliki pekerjaan yang mereka sukai, yang memungkinkan mereka berkontribusi pada open source di waktu senggang mereka.  Mereka menikmati pemikiran open source sebagai hobi atau pelampiasan kreatif dan tidak ingin terikat secara finansial untuk bekerja pada proyek mereka.  Mereka mendapatkan keuntungan lainnya untuk berkontribusi pada open source, seperti membangun reputasi atau portofolio mereka, mempelajari ketrampilan baru, atau merasa lebih dekat pada komunitas.    Donasi finansial memang menambahkan perasaan tanggung jawab untuk beberapa orang. (…) Merupakan sesuatu yang penting bagi kami yang hidup pada dunia yang sangat cepat dan terkoneksi secara global untuk bisa mengatakan “belum waktunya, saya merasa melakukan sesuatunya dengan cara yang berbeda”.  — @alloy, “Why We Don’t Accept Donations”  Bagi orang lain, terutama bagi membutuhkan waktu yang cukup signifikan untuk kontribusi mereka, mendapatkan dana untuk berkontribusi pada open source adalah satu-satunya cara mereka untuk bisa berpartisipasi, entah karena proyek tersebut membutuhkannya, atau karena alasan pribadi.Mengelola proyek yang terkenal merupakan tanggung jawab besar, yang membutuhkan waktu 10 atau 20 jam per minggu dibandingkan beberapa jam setiap bulannya.    Tanyakan kepada sembarang pengelola proyek open source, dan mereka akan memberikan informasi tentang realitas pekerjaan yang diperlukan untuk mengelola sebuah proyek. Anda memiliki klien. Anda memperbaiki masalah untuk mereka. Anda menciptakan fitur baru. Hal ini membutuhkan waktu Anda.  — @ashedryden, “The Ethics of Unpaid Labor and the OSS Community”  Pekerjaan yang dibayar juga memungkinkan orang-orang dari berbagai latar belakang untuk membuat kontribusi yang berarti. Beberapa orang tidak bisa meluangkan waktu tanpa dibayar pada proyek open source, mengingat posisi finansial mereka, hutang, atau tanggung jawab mengelola keluarga. Hal ini berarti dunia tidak akan melihat kontribusi dari orang-orang bertalenta yang tidak mampu menyumbangkan waktu mereka secara sukarela. Hal ini meiliki implikasi etika, seperti yang dijelaskan @ashedryden, karena pekerjaan yang dilakukan bias terhadap mereka yang telah memiliki keuntungan dalam hidupnya, yang kemudian mendapatkan keuntungan tambahan karena kontribusi sukarela mereka, sedangkan orang lain yang tidak mampu meluangkan waktunya tidak mendapatkan kesempatan lainnya, sehingga mengakibatkan kurangnya perbedaan pada komunitas open source.     OSS menghasilkan keuntungan yang besar pada industri teknologi, yang akan menguntungkan semua industri. (…) Namun, jika satu-satunya orang yang bisa berfokus padanya adalah orang yang beruntung dan terobsesi, maka terdapat potensi yang sangat besar.  — @isaacs, “Money and Open Source”  Jika Anda mencari dukungan finansial, terdapat dua jalan yang bisa dipertimbangkan. Anda bisa mendanai sendiri sebagai kontributor, atau Anda mencari organisasi pendanaan untuk proyek Anda.Mendanai waktu Anda sendiriSaat ini, banyak orang dibayar untuk bekerja secara paruh waktu atau penuh pada open source. Cara yang paling umum untuk mendapatkan pendanaan untuk waktu Anda adalah berbicara dengan yang mempekerjakan Anda.Akan lebih mudah untuk mendiskusikan proyek open source jika yang mempekerjakan Anda menggunakan proyek tersebut, tetapi tetap kreatiflah dalam usaha negosiasi Anda. Mungkin mereka tidak menggunakan proyek tersebut, tetapi mereka menggunakan Python, dan mengelola proyek Python yang populer akan membantu mengundang pengembang Python yang baru. Mungkin hal ini membuat perusahaan Anda lebih ramah terhadap pengembang secara umum.    Seperti halnya yang lain pada open source, saya mendapatkan masalah dengan beban mengelola sebuah proyek. Ketika saya pertama kalinya melakukan open source, saya biasa lembur untuk mengerjakannya atau ketika saya pulang ke rumah. (…) Saya mampu mendiskusikannya dengan pimpinan saya tentang isu yang saya alami dan kami mendapatkan ide tentang bagaimana kami dapat menyertakan tugas open source pada penggunaan Babel kami sendiri.  — @hzoo, “Maintainer Stories”  Jika Anda tidak memiliki proyek open source yang ingin Anda kerjakan, tetapi Anda berharap pekerjaan Anda saat ini dibuat dalam bentuk open source, ajukan ke perusahaan Anda untuk membuka perangkat lunak internal mereka pada open source.Banyak perusahaan mengembangkan program open source untuk membangun citra mereka dan merekrut talenta berkualitas.@hueniverse, misalnya, menemukan bahwa terdapat alasan finansial untuk mendukung investasi Walmart pada open source. @jamesgpearce juga menemukan bahwa program open source milik Facebook membuat perbedaan dalam proses perekrutan:  Hal ini terkait erat dengan budaya hacker kami, dan bagaimana organisasi kami dipandang. Kami menanyakan pada karyawan kami, “Apakah Anda sadar tentang program pengembang open source pada Facebook?”. Dua pertiga menjawab “Ya”. Setengah mengatakan bahwa program  tersebut berkontribusi positif terhadap keputusan mereka untuk bekerja pada Facebook. Itu bukan angka marginal, dan saya berharap menjadi sebuah tren yang berkelanjutan.Jika perusahaan Anda mengikuti rute ini, merupakan hal yang penting untuk menjaga batas antar aktivitas komunitas dan korporasi. Akhirnya, open source bertahan melalui kontribusi dari orang-orang diseluruh dunia, dan itu sesuatu yang lebih besar dari satu perusahaan atau lokasi.    Dibayar untuk bekerja pada open source adalah kesempatan yang langka dan indah, tetapi Anda tidak boleh menyerah pada minat Anda dalam prosesnya. Minat Anda harus menjadi alasan kenapa perusahaan mau membayar Anda.  — @jessfraz, “Blurred Lines”  Jika Anda tidak mampu meyakinkan perusahaan untuk memprioritaskan pekerjaan open source, pertimbangkan untuk mencari perusahaan lain yang mendorong kontribusi karyawan pada open source. Cari perusahaan yang mendedikasikan pada pekerjaan open source secara eksplisit. Sebagai contoh:  Beberapa perusahaan, seperti Netflix atau PayPal, memiliki halaman web yang menunjukan keterlibatan mereka pada open source  Rackspace mempublikasikan kebijakan kontribusi open source bagi pegawaiProyek-proyek yang berasal dari perusahaan besar, seperti Go atau React, juga akan memperkerjakan orang-orang untuk bekerja pada open source.Akhirnya, melihat dari kondisi pribadi Anda, Anda bisa mencoba mengumpulkan uang secara mandiri untuk mendanai proyek open source Anda. Sebagai contoh:  @gaearon mendanai pekerjaannya pada Redux melalui kampanye Patreon crowdfunding  @andrewgodwin mendanai pekerjaan pada migrasi skema Django melalui kampanye KickstarterMencari pendanaan untuk proyek AndaDiluar pengelolaan untuk kontributor individual, seringkali beberapa proyek mencari pendanaan dari perusahaan, individual, atau yang lain untuk mendanai pekerjaan yang berlangsung.Organisasi pendanaan mungkin akan mendanai kontributor yang ada, mulai dari pembiayaan operasional (seperti biaya hosting), atau investasi pada fitur atau ide baru.Seiring dengan popularitas open source, menemukan pendanaan untuk proyek masih bersifat eksperimental, tetapi terdapat beberapa opsi umum yang tersedia.Mencari pendanaan untuk pekerjaan Anda melalui kampanye crowdfunding atau sponsorMencari sponsor bisa dilakukan jika Anda memiliki pengguna atau reputasi yang kuat, atau proyek Anda sangat populer. Beberapa proyek yang disponsori meliputi:  webpack mendapatkan pendanaan dari perusahaan dan perseorangan melalui OpenCollective  Vue didanai melalui Patreon  Ruby Together, organisasi nirlaba yang membayar untuk bekerja pada bundler, RubyGems, dan proyek infrastruktur Ruby lainnya.Menciptakan pendapatanAnda mungkin memberikan tambahan biaya untuk dukungan komersial, opsi hosting, atau fitur tambahan lainnya, tergantung dari proyek Anda. Beberapa contoh diantaranya:  Sidekiq menawarkan versi berbayar untuk dukungan tambahan  Travis CI menawarkan versi berbayar untuk produknya  Ghost bersifat nirlaba dengan layanan pembayaranBeberapa proyek yang populer, seperti npm dan Docker, bahkan mengajukan pendanaan pada venture capital untuk mendukung pertumbuhan bisnisnya.Mengajukan hibah pendanaanBeberapa yayasan perangkat lunak dan perusahaan menawarkan hibah untuk pekerjaan open source. Seringkali hibah bisa dibayarkan pada individu tanpa perlu membuat entitas legal untuk proyek.  Read the Docs menerima hibah dari Mozilla Open Source Support  OpenMRS didanai oleh Stripe’s Open-Source Retreat  Libraries.io menerima hibah dari Sloan Foundation  Python Software Foundation menawarkan hibah untuk pekerjaan yang berhubungan dengan Python.Untuk opsi lebih detail dan studi kasus, @nayafia menuliskan panduan untuk mendapatkan pendanaan dari pekerjaan open source. Jenis pendanaan yang berbeda akan membutuhkan ketrampilan yang berbeda, sehingga tentukan kekuatan Anda untuk menentukan opsi mana yang paling sesuai untuk Anda.Membangun kasus untuk dukungan finansialApakah proyek Anda merupakan ide baru, atau sudah ada sejak beberapa tahun, Anda perlu menekankan tentang mengindentifikasi siapa target donatur Anda dan membuat sebuah kasus yang menarik.Terlepas dari apakah Anda mencari pendanaan untuk waktu Anda sendiri atau mencari pendanaan untuk proyek, Anda harus mampu menjawab pertanyaan berikut.PengaruhKenapa proyek ini berguna? Kenapa pengguna Anda menyukainya? Akan dibawa kemana dalam lima tahun kedepan?Daya tarikCobalah mengumpulkan barang bukti yang menunjukkan bahwa proyek Anda memang berarti, baik dalam bentuk metrik, anekdot, atau testimoni. Apakah ada perusahaan atau orang-orang yang cukup terkenal menggunakan proyek Anda saat ini? Jika tidak, apakah ada orang yang menyarankannya?Nilai bagi donaturPemberi dana, baik perusahaan atau yayasan pemberi hibah, seringkali didekati dengan banyak kesempatan. Kenapa mereka harus mendukung proyek Anda dibandingkan proyek lain? Bagaimana mereka bisa mendapatkan keuntungan pribadi?Penggunaan danaApa yang akan Anda raih dengan dana yang diajukan? Fokuslah pada tonggakan proyek atau hasil keluaran dibandingkan untuk membayar gaji.Bagaimana Anda akan menerima danaApakah pemberi dana memiliki persyaratan? Misalnya Anda harus bersifat nirlaba atau memiliki sponsor dana nirlaba. Atau misalnya dana harus diberikan pada kontraktor individu dan bukan pada organisasi. Kebutuhan ini akan berbeda diantara pemberi dana, jadi pastikan Anda melakukan pekerjaan Anda terlebih dahulu.    Bertahun-tahun kami menjadi sumber daya unggulan untuk ikon website yang ramah, dengan jumlah komunitas lebih dari 20 juta orang dan telah ditampilkan di lebih dari 70 juta halaman web, termasuk Whitehouse.gov. (…) Versi 4 dikembangkan tiga tahun yang lalu. Teknologi web telah banyak berubah semenjak itu, dan jujur, Font Awesome tampak stagnan. (…) Itulah sebabnya kami memperkenalkan Font Awesome 5. Kami melakukan modernisasi dan menuliskan ulang CSS dan merancang ulang semua ikon dari atas ke bawah. Kami menawarkan desain  yang lebih baik, konsisten, dan mudah dibaca.  — @davegandy, Font Awesome Kickstarter video  Eksperimen dan jangan menyerahMendapatkan pendanaan tidaklah mudah, baik untuk proyek open source, nirlaba, atau startup perangkat lunak, dan pada banyak kasus, Anda harus kreatif. mengindentifikasi bagaimana Anda hendak didanai, melakukan riset, dan menempatkan diri Anda pada penyandang dana akan membantu Anda membangun kasus yang meyakinkan untuk pendanaan.",
    "url": "/id/getting-paid/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/id/getting-paid/\">\n      Dibayar untuk Pekerjaan Open Source\n    </a>\n  </h2>\n  <h2 id=\"kenapa-beberapa-orang-mencari-dukungan-finansial\">Kenapa beberapa orang mencari dukungan finansial</h2>\n\n\n</div>\n"
  },

  
  "/id/how-to-contribute/": {
    "title": "Bagaimana Berkontribusi pada Open Source",
    "content": "Mengapa berkontribusi pada open source?    Bekerja pada [freenode] membantu saya mendapatkan banyak ketrampilan yang saya gunakan pada pembelajaran di universitas dan pekerjaan saya nantinya. Saya pikir bekerja pada proyek open source membantu saya sebanyak saya membantu proyek itu sendiri.!  — @errietta, “Why I love contributing to open source software”  Berkontribusi pada open source bisa jadi merupakan cara yang bermanfaat untuk belajar, mengajar, dan membangun pengalaman pada segala ketrampilan yang dapat Anda bayangkan.Mengapa orang-orang berkontribusi pada open source? Banyak alasannya!Meningkatkan ketrampilan yang sudah adaBaik pemrograman, perancangan antar muka, desain grafis, menulis, maupun mengelola, jika Anda mencari tempat berlatih, terdapat tugas bagi Anda pada proyek open source.Bertemu orang yang tertarik pada hal yang samaProyek open source dengan komunitas yang hangat membuat orang-orang kembali selama bertahun-tahun. Banyak orang membentuk pertemanan jangka panjang melalui partisipasi mereka pada open source, baik pertemuan pada konferensi atau chat tengah malam tentang burrito.Mencari mentor dan mengajarkan ke pihak lainBekerja dengan banyak orang pada proyek berarti Anda harus menjelaskan bagaimana Anda melakukan segala sesuatu, sekaligus meminta orang lain untuk bantuan. Kegiatan belajar dan mengajar bisa menjadi aktivitas yang menyenangkan bagi semua orang yang terlibat.Membangun koleksi publik yang membantu Anda mengembangkan reputasi (dan karir)Secara definisi, semua pekerjaan open source bersifat publik, artinya Anda mendapatkan contoh gratis untuk dibawa kemana saja sebagai demonstrasi tentang apa saja yang dapat Anda lakukan.Belajar ketrampilan tentang orangOpen source menawarkan kesempatan untuk belajar ketrampilan kepemimpinan dan manajemen, seperti menyelesaikan konflik, mengelola sekelompok orang, dan memprioritaskan pekerjaan.Memberdayakan untuk membuat perubahan, meskipun kecilAnda tidak perlu menjadi kontributor jangka panjang untuk menikmati partisipasi pada open source. Apakah Anda melihat sebuah kesalahan ketik pada website, dan berharap seseorang akan memperbaikinya? Pada proyek open source, Anda bisa melakukannya. Open source membantu orang merasa memiliki hak atas hidup mereka dan bagaimana mereka merasakan bahwa dunia, dan segala isinya sangatlah memuaskan.Apa artinya berkontribusiJika Anda merupakan kontributor open source yang baru, proses ini bisa jadi menakutkan. Bagaimana Anda menemukan proyek yang sesuai? Bagaimana jika Anda tidak tahu bagaimana membuat kode program? Bagaimana jika terjadi kesalahan?Tidak perlu khawatir! Terdapat banyak cara untuk bisa ikut terlibat pada proyek open source, dan beberapa tips akan membantu Anda memaksimalkan pengalaman Anda.Anda tidak perlu memberikan kontribusi dalam bentuk kodeKesalahpahaman yang sering terjadi tentang berkontribusi pada open source adalah Anda harus memberikan kontribusi dalam bentuk kode. Kenyataannya, seringkali banyak bagian lain dari proyek yang seringkali terabaikan atau diabaikan. Anda bisa memberikan bantuan besar bagi proyek dengan menawarkan diri untuk jenis kontribusi semacam ini.    Saya menjadi terkenal karena pekerjaan saya pada CocoaPods, tetapi banyak orang tidak tahu bahwa saya tidak melakukan pekerjaan yang berarti pada perangkat CocoaPods itu sendiri. Waktu saya pada proyek lebih banyak dihabiskan untuk melakukan kegiatan seperti dokumentasi dan pencitraan.  — @orta, “Moving to OSS by default”  Meskipun Anda suka untuk menulis kode program, kontribusi jenis lain merupakan cara yang baik untuk bisa berpartisipasi pada proyek dan bertemu dengan anggota komunitas lainnya. Membangun hubungan tersebut akan memberikan Anda kesempatan untuk bekerja pada bagian lain dari proyek.    Saya pertama kali menghubungi tim pengembang Python (python-dev) ketika saya mengirimkan pesan email kepada mailing list pada 17 Juni 2002 tentang perbaikan dari saya. Saya dengan cepat menemukan kesalahan, dan memutuskan untuk mulai memilih email dari grup. Mereka memberikan saya alasan yang baik untuk bertanya tentang klarifikasi sebuah topik, tetapi yang lebih penting lagi saya mampu mendeteksi apabila seseorang menunjukkan sesuatu yang perlu diperbaiki.  — @brettcannon, “Maintainer Stories”  Apakah Anda suka merencanakan kegiatan?  Mengelola workshop atau acara pertemuan tentang proyek, seperti yang dilakukan @fzamperin untuk NodeSchool  Mengelola konferensi sebuah proyek (jika ada)  Membantu anggota komunitas menemukan konferensi yang sesuai dan mengirimkan proposal untuk berbicaraApakah Anda suka mendesain?  Restrukturisasi layout untuk meningkatkan usabilitas proyek  Melakukan penelitian pengguna untuk menata ulang dan meningkatkan navigasi atau menu proyek, seperti yang disarankan Drupal  Membuat panduan untuk membantu proyek memiliki desain visual yang konsisten  Membuat hasil seni untuk pakaian atau logo baru, seperti kontributor hapi.jsApakah Anda suka menulis?  Menulis dan meningkatkan dokumentasi proyek  Buatlah sebuah folder contoh yang menunjukkan bagaimana proyek dapat digunakan  Memulai laporan berkala untuk proyek atau buat hal-hal penting dari mailing list  Menulis tutorial untuk proyek, seperti kontributor pypa  Menulis terjemahan untuk dokumentasi proyek    Serius, [dokumentasi] sangatlah penting. Dokumentasi sejauh ini sudah sangat bagus dan merupakan fitur utama dari Babel.  Terdapat beberapa bagian yang bisa dikembangkan dan bahkan penambahan sebuah paragraf disini dan disana akan sangat dihargai.  — @kittens, “Call for contributors”  Apakah Anda suka mengelola?  Menghubungkan masalah-masalah yang duplikat dan memberikan label pada masalah untuk menjaga pengelolaan  Menyarankan menghapus laporan masalah yang lama, seperti yang dilakukan @nzakas untuk eslint  Menanyakan pertanyaan klarifikasi pada laporan masalah yang baru saja dibuat untuk diskusi kedepannyaApakah Anda suka membua kode program?  Mencari laporan masalah yang ingin diselesaikan, seperti yang dilakukan @dianjin untuk Leaflet  Bertanya jika Anda hendak membantu menuliskan fitur baru  Melakukan otomatisasi setup proyek  Meningkatkan perlengkapan dan pengujianApakah Anda suka membantu orang lain?  Menjawab pertanyaan tentang proyek, pada (misalnya) Stack Overflow (seperti contoh Postgres ini) atau reddit  Menjawab pertanyaan pada permasalahaan terbuka  Membantu memoderasi halaman diskusi atau chanel diskusiApakah Anda suka membantu orang lain dalam membuat program?  Me-review kode dari pengajuan orang lain  Menulis tutorial bagaimana proyek bisa digunakan  Menawarkan diri untuk menjadi mentor bagi kontributor lainnya, seperti yang dilakukan @ereichert untuk @bronzdoc pada RustAnda tidak harus bekerja pada proyek perangkat lunak!Meskipun “open source” seringkali merujuk pada perangkat lunak, Anda bisa berkolaborasi pada segala sesuatu. Terdapat buku, resep makanan, daftar, dan kelas yang dapat dikembangkan sebagai proyek open source.Sebagai contoh:  @sindresorhus menghasilkan daftar “awesome”  @h5bp mengelola daftar pertanyaan potensial untuk wawancara bagi kandidat developer front-end  @stuartlynn dan @nicole-a-tesla membuat kumpulan fakta lucu tentang puffinMeskipun Anda seorang pengembang perangkat lunak, bekerja pada proyek dokumentasi bisa membantu Anda untuk memulai pada open source. Seringkali bekerja pada proyek yang tidak melibatkan kode tidak terlalu menakutkan dan proses kolaborasi ini akan membangun rasa percaya diri dan pengalaman Anda.Berorientasi pada proyek baru    Jika Anda mengunjungi issue tracker dan tampaknya membingungkan, hal itu terjadi bukan hanya kepada Anda saja. Perangkat ini membutuhkan banyak pemahaman implisit, tetapi orang lain mampu membantu Anda dalam mengeksplorasi dan Anda bisa bertanya kepada mereka.  — @shaunagm, “How to Contribute to Open Source”  Untuk aktivitas yang lebih dari sekedar kesalahan penulisan, berkontribusi pada open source seperti berjalan pada sebuah kelompok orang asing pada sebuah pesta. Jika Anda berbicara tentang hewan llamas, sedangkan mereka sedang membicarakan tentang ikan mas, mungkin mereka akan memandang Anda dengan aneh.Sebelum memberikan masukan, pelajari bagaimana membaca situasi ruangan. Dengan melakukan hal ini akan meningkatkan peluang ide Anda akan dilihat dan didengarkan.Anatomi proyek open sourceSetiap komunitas open source memiliki perbedaan.Menghabiskan waktu bertahun-tahun pada satu proyek open source berarti Anda terbiasa pada satu proyek open source. Dengan berpindah pada proyek yang berbeda maka Anda akan mendapati bahwa kosa kata, norma, dan gaya komunikasi yang digunakan sangatlah berbeda.Meski demikian, banyak proyek open source mengikuti struktur organisasi yang sama. Memahami perbedaan peran komunitas yang berbeda-beda dan proses secara luas akan membantu Anda untuk beradaptasi dengan setiap proyek baru.Proyek open source pada umumnya memiliki beberapa jenis orang sebagai berikut:  Pencipta (Author): Orang atau organisasi yang menciptakan proyek  Pemilik (Owner): Orang atau organisasi yang memiliki kepemilikan administratif terhadap organisasi atau repositori (tidak selalu sama dengan pencipta awal)  Pengelola (Maintainers): Kontributor yang bertanggung jawab untuk menggerakan visi dan mengelola aspek organisasi dari proyek. (Mereka juga bisa merupakan pencipta atau pemilik dari proyek.)  Kontributor (Contributors): Semua orang yang telah mengkontribusikan sesuatu kepada proyek.  Anggota Komunitas (Community Members): Orang-orang yang menggunakan proyek. Mereka mungkin aktif pada diskusi atau mengungkapkan opini mereka pada arah sebuah proyek.Proyek yang lebih besar mungkin memiliki sub komite atau kelompok kerja yang berfokus pada tugas yang berbeda-beda, seperti peralatan, pengujian, moderasi komunitas, dan pengelola kegiatan. Lihat pada website proyek untuk halaman “anggota”, atau pada repositori untuk dokumentasi organisasi, untuk menemukan informasi ini.Sebuah proyek juga memiliki dokumentasi. Dokumentasi ini biasanya ditempatkan pada posisi teratas dari sebuah repositori.  LICENSE: Secara definisi, setiap proyek open source harus memiliki sebuah lisensi open source. Jika sebuah proyek tidak memiliki lisensi, maka proyek tersebut bukan bersifat open source.  README: Dokumen README adalah manual instruksi yang menyambut anggota komunitas baru pada sebuah proyek. Dokumen ini juga menjelaskan kenapa proyek ini berguna dan bagaimana untuk memulainya.  CONTRIBUTING: Jika README membantu orang-orang menggunakan proyek, dokumentasi kontribusi membantu orang-orang untuk berkontribusi pada proyek. Dokumen ini menjelaskan jenis kontribusi seperti apa yang diperlukan dan bagaimana cara kerja dari proses kontribusinya. Meskipun tidak setiap proyek memiliki dokumen CONTRIBUTING, keberadaan dokumen ini menandakan bahwa proyek ini menerima kontribusi.  CODE_OF_CONDUCT: Dokumen kode etik (code of conduct) menentukan aturan dasar bagi perilaku partisipan dan membantu memfasilitasi lingkungan yang kondusif dan bersahabat. Meskipun tidak setiap proyek memiliki dokumen CODE_OF_CONDUCT, keberadaan dokumen ini menandakan bahwa proyek ini menerima kontribusi.  Dokumentasi lainnya: Mungkin terdapat dokumentasi tambahan, seperti tutorial, panduan, atau kebijakan lainnya, terutama pada proyek yang lebih besar.Akhirnya, proyek open source menggunakan peralatan berikut untuk mengelola diskusi. Membaca dari arsip akan memberikan gambaran tentang bagaimana komunitas berpikir dan bekerja.  Issue tracker: Dimana orang-orang mendiskusikan laporan masalah yang berkaitan dengan proyek.  Pull requests: Dimana orang-orang mendiskusikan dan me-review perubahan yang sedang dikerjakan.  Forum diskusi atau mailing list: Beberapa proyek mungkin menggunakan media ini untuk topik diskusi (misalnya. “Bagaimana saya …“ atau “Apakah pendapat Anda tentang …“ daripada laporan kesalahan atau pengajuan fitur baru). Beberapa proyek menggunakan issue tracker untuk semua diskusi.  Media chat: Beberapa proyek menggunakan media chat (seperti Slack atau IRC) untuk diskusi sehari-hari, kolaborasi, dan pertukaran yang bersifat cepat.Menemukan sebuah proyek untuk melakukan kontribusiSetelah Anda paham bagaimana proyek open source bekerja, sekarang saatnya untuk menemukan sebuah proyek untuk berkontribusi!Jika Anda belum pernah berkontribusi ke open source sebelumnya, ambil saran dari presin Amerika Serikat John F. Kennedy, yang mengatakan demikian , “(Jangan tanyakan apa yang bisa dilakukan negara kepada dirimu - tanyakan apa yang bisa engkau lakukan untuk negaramu) - Ask not what your country can do for you - ask what you can do for your country.”Berkontribusi ke open source bisa terjadi pada semua tingkatan, pada semua bagian proyek. Anda tidak perlu berpikir berlebihan tentang apa kontribusi pertama Anda atau bagaimana bentuknya.Mulailah dengan proyek yang sudah Anda gunakan, atau ingin Anda gunakan. Proyek dimana Anda akan aktif berkontribusi didalamnya adalah proyek dimana Anda akan selalu datang kembali kepadanya.Didalam proyek-proyek tersebut, setiap kali Anda mendapati tentang segala sesuatu yang bisa ditingkatkan atau berbeda, lakukan berdasarkan insting Anda.Open source bukanlah klub ekslusif; Open source dibuat oleh orang-orang seperti Anda. “Open source” hanyalah istilah keren untuk menadai bahwa masalah yang ada di dunia sebagai sesuatu yang bisa diperbaiki.Anda bisa melihat dokumen README dan menemukan tautan yang tidak valid atau kesalahan pengetikkan. Atau Anda sebagai pengguna baru dan melihat bahwa ada yang salah, atau sebuah laporan dimana Anda rasa penting untuk didokumentasikan. Daripada mengabaikannya, atau meminta orang lain untuk memperbaikinya, cari tahu apakah Anda bisa membantu dengan ikut serta didalamnya. Itulah makna sesungguhnya dari open source!  28% dari kontribusi umum pada open source adalah berupa dokumentasi, seperti kesalahan pengetikkan, pemformatan ulang, atau menuliskan terjemahan.Anda juga bisa menggunakan salah satu dari beberapa sumber daya berikut untuk mencari dan berkontribusi pada proyek baru:  GitHub Explore  Open Source Friday  First Timers Only  Your First PR  CodeTriage  24 Pull Requests  Up For Grabs  Contributor-ninjaDaftar sebelum Anda berkontribusiKetika Anda telah menemukan sebuah proyek dimana Anda hendak melakukan kontribusi, lakukan pencarian secara cepat untuk memastikan proyek tersebut sesuai untuk menerima kontribusi. Jika tidak, usaha keras Anda mungkin tidak akan mendapatkan respon.Berikut adalah daftar yang bisa digunakan untuk mengevaluasi apakah sebuah proyek sesuai untuk kontributor baru.Memenuhi definisi open source      Apakah memiliki lisensi? Biasanya terdapat dokumen bernama LICENSE pada bagian atas dari repositori.  Proyek secara aktif menerima kontribusiLihat pada aktivitas commit pada branch master. Pada GitHub, Anda bisa melihat informasi ini pada homepage repositori.      Kapan commit terakhir ?        Berapa banyak kontributor yang dimiliki proyek?        Seberapa sering orang melakukan commit? (Pada GitHub, Anda bisa mendapatkan informasi ini dengan memilih menu \"Commits\" pada bagian atas.)  Berikutnya, lihat pada laporan masalah yang dihadapi pada proyek.        Berapa banyak laporan masalah yang masih belum diselesaikan?          Apakah pengelola merespon dengan cepat pada sebuah laporan masalah baru?          Apakah terdapat diskusi aktif pada setiap laporan masalah yang ada?          Apakah laporan masalah tersebut muncul baru-baru ini?          Apakah laporan masalah yang ada sudah diselesaikan? (Pada GitHub, klik tab \"closed\" pada halaman Issues untuk melihat laporan masalah yang sudah terselesaikan.)  Sekarang lakukan hal yang sama untuk pull request pada proyek.        Berapa banyak pull request pada proyek?          Apakah pengelola merespon dengan cepat terhadap pull request baru?          Apakah terdapat diskusi aktif pada pull request?         Apakah pull request tersebut muncul baru-baru ini?          Kapan pull request diterima? (Pada GitHub, klik tab \"closed\" pada halaman Pull Requests untuk melihat PR yang sudah diselesaikan.)  Proyek menyambutSebuah proyek yang bersahabat dan menyambut menandai bahwa mereka sangat menerima kontributor baru.        Apakah pengelola menanggapi pertanyaan pada laporan masalah dengan sangat membantu?          Apakah orang-orang bersahabat pada laporan masalah, forum diskusi, dan chat (misalnya. IRC atau Slack)?          Apakah dilakukan review terhadap pull request?          Apakah pengelola berterima kasih kepada orang lain atas kontribusinya?      Setiap kali Anda melihat diskusi yang panjang, amati respon dari pengembang inti di bagian akhir dari diskusi. Apakah mereka meringkasnya secara konstruktif dan mengambil langkah-langkah untuk mendapatkan kesimpulan tanpa mengabaikan sopan santun? Jika Anda melihat banyak perdebatan yang tidak konstruktif (flame war), biasanya merupakan sebuah tanda bahwa energi dihabiskan untuk berargumentasi dibandingkan untuk pengembangan proyek.  — @kfogel, Producing OSS  Bagaimana mengajukan kontribusiAnda telah menemukan sebuah proyek yang Anda sukai, dan Anda siap untuk membuat sebuah kontribusi. Akhirnya! Berikut adalah langkah-langkah untuk menjadikan kontribusi Anda di jalan yang benar.Berkomunikasi secara efektifApakah Anda merupakan kontributor atau mencoba untuk bergabung dengan sebuah komunitas, bekerja dengan orang lain merupakan salah satu keahlian paling penting yang perlu diasah dalam dunia open source.    [Sebagai kontributor baru,] saya menyadari bahwa saya perlu bertanya jika ingin menutup sebuah laporan masalah. Saya mengamati kode program. Setelah saya mengetahui situasinya, saya bertanya untuk pengarahan lebih lanjut. Dan akhirnya! Saya berhasil menutup sebuah laporan masalah setelah mendapatkan semua informasi relevan yang saya butuhkan.  — @shubheksha, A Beginner’s Very Bumpy Journey Through The World of Open Source  Sebelum Anda membuka sebuah laporan masalah atau pull request, atau bertanya pada media chat, perhatikan beberapa poin berikut untuk membantu ide Anda secara efektif.Berikan konteks. Bantu orang lain untuk memahami kondisinya. Jika Anda menjumpai sebuah kesalahan, jelaskan apa yang hendak Anda lakukan dan bagaimana mengulangi kesalahan tersebut. Jika Anda menyarankan sebuah ide baru, jelaskan kenapa Anda pikir itu merupakan ide yang baik untuk proyek (tidak hanya untuk Anda!).  😇 “X tidak berfungsi ketika saya melakukan Y”  😢 “X rusak! Tolong perbaiki.”Lakukan pekerjaan rumah Anda sebelumnya. Tidak masalah untuk tidak mengetahui beberapa hal, tetapi tunjukan bahwa Anda telah berusaha. Sebelum bertanya untuk meminta bantuan, pastikan untuk melihat dokumen README, dokumentasi, laporan masalah (terbuka atau tertutup), mailing list, dan cari Internet untuk sebuah jawaban. Orang-orang akan menghargai ketika Anda menunjukkan bahwa Anda berusaha untuk belajar.  😇 “Saya tidak yakin bagaimana mengimplementasikan X. Saya telah melihat dokumen bantuan dan tidak menemukan apapun.”  😢 “Bagaimana saya melakukan X?”Buatlah permintaan singkat dan langsung. Seperti halnya mengirimkan sebuah email, setiap kontribusi, sekecil apapun atau sepenting apapun, akan membutuhkan orang lain untuk me-reviewnya. Banyak proyek memiliki lebih banyak permintaan dibandingkan jumlah orang yang ada untuk membantu. Pastikan permintaan Anda jelas. Anda akan mendapatkan peluang lebih tinggi dimana seseorang akan ada untuk membantu Anda.  😇 “Saya ingin menulis tutorial API.”  😢 “Saya sedang mengemudi di jalan tol di suatu hari dan berhenti untuk mengisi bahan bakar, lalu saya mendapatkan ide cemerlang yang seharusnya kita lakukan, tetapi sebelum saya menjelaskan hal itu, ijinkan saya untuk menunjukkan kepada Anda…“Buat semua komunikasi terbuka secara publik. Meskipun hal ini sangat menarik, hindari menghubungi pengelola secara pribadi kecuali Anda perlu membagikan informasi yang bersifat sensitif (misalnya masalah keamanan atau pelanggaran berat). Ketika Anda membuat semua komunikasi terbuka secara publik, banyak orang bisa belajar dan mendapatkan manfaat dari pertukaran informasi Anda. Diskusi itu sendiri bisa menjadi sebuah kontribusi.  😇 (sebagai komentar) “@-maintainer Hallo! Bagaimana saya harus melanjutkan untuk PR ini?”  😢 (sebagai email) “Hallo, maaf menganggu Anda melalui email, tetapi saya ingin tahu apakah Anda ingin melakukan review terhadap PR saya”Tidak masalah untuk bertanya (tetapi harap sabar!). Setiap orang pernah menjadi orang baru pada sebuah proyek, dan bahkan kontributor yang berpengalaman sekalipun perlu memahami kondisi ketika mereka melihat pada sebuah proyek baru. Dengan kondisi yang sama, bahkan pengelola yang sudah lama sekalipun tidak selalu memahami dengan setiap bagian dari proyek. Berikan kesabaran yang sama seperti Anda mengharapkan mereka sabar dengan Anda.  😇 “Terima kasih karena telah melihat kesalahan ini. Saya mengikuti petunjuk Anda. Berikut hasil keluarannya.”  😢 “Kenapa Anda tidak bisa memperbaiki masalah saya? Bukankah ini proyek Anda?”Hargai keputusan komunitas. Ide Anda mungkin berbeda dengan prioritas atau visi komunitas. Mereka mungkin menawarkan masukan atau memutuskan untuk tidak melanjutkan ide Anda. Meskipun sebaiknya Anda mendiskusikan dan mencoba mencari  titik temu, pengelola harus menanggung tanggung jawab atas keputusan Anda jauh lebih lama dibandingkan Anda. Jika Anda tidak setuju dengan mereka, Anda tetap bisa bekerja pada fork Anda sendiri atau memulai proyek Anda sendiri.  😇 “Saya kecewa Anda tidak bisa mendukung kasus saya, tetapi seperti yang telah Anda jelaskan, masalah itu hanya akan berdampak pada sebagian kecil pengguna, dan saya bisa memahami. Terima kasih telah mendengarkan.”  😢 “Kenapa Anda tidak mendukung kasus saya? Hal ini tidak bisa saya terima!”Diatas itu semua, pertahankan kualitas. Open source terbentuk dari kolaborator dari seluruh penjuru dunia. Konteks menjadi hilang dalam berbagai bahasa, budaya, geografis, dan zona waktu. Lebih dari itu, komunikasi tertulis menjadikannya lebih susah untuk menyalurkan nada atau suasana hati. Selalu asumsikan niat baik dalam percapakan. Merupakan hal yang biasa untuk menolak sebuah ide secara halus, bertanya untuk konteks yang lebih lanjut, atau mengklarifikasi posisi Anda. Harap jadikan Internet tempat yang lebih baik dibandingkan ketika Anda menemukannya.Mengumpulkan konteksSebelum melakukan apapun, pastikan bahwa ide Anda belum pernah didiskusikan sebelumnya. Baca dokumen README, laporan masalah (terbuka dan tertutup), mailing list, dan Stack Overflow. Anda tidak perlu menghabiskan waktu berjam-jam untuk mencari semua informasi, tetapi cukup lakukan pencarian secara cepat untuk beberapa istilah kunci.Jika Anda tidak bisa menemukan ide Anda dimanapun, Anda siap untuk bergerak. Jika proyek tersebut berada pada GitHub, Anda bisa berkomunikasi dengan membuka sebuah laporan masalah atau melakukan pull request:  Laporan masalah (Issues) adalah seperti memulai percakapan atau diskusi  Pull requests adalah untuk memulai pekerjaan pada sebuah solusi  Untuk komunikasi yang ringan, seperti mengklarifikasi pertanyaan bagaimana, cobalah bertanya melalui Stack Overflow, IRC, Slack, atau media chat lainnya, jika ada.Sebelum Anda membuka sebuah laporan masalah atau melakukan pull request, periksa dokumen kontribusi proyek (biasanya pada dokumen bernama CONTRIBUTING, atau pada README), untuk melihat apakah Anda perlu mencantumkan informasi yang spesifik. Sebagai contoh, mereka mungkin meminta Anda untuk mengikuti sebuah template, atau mengharuskan Anda untuk menggunakan perangkat pengujian.Jika Anda hendak melakukan kontribusi yang cukup substansial, buatlah sebuah laporan masalah sebelum memulai bekerja. Sangatlah bermanfaat untuk mengamati proyek dalam kurun waktu tertentu (pada Github, Anda bisa memilih menu “Watch” untuk mendapatkan notifikasi dari semua percakapan), dan mengenal anggota komunitas, sebelum memulai pekerjaan yang belum tentu akan diterima.    Anda akan belajar banyak dari proyek yang Anda gunakan secara aktif, “melihatnya” pada GitHub dan membaca semua laporan masalah dan PR.  — @gaearon on joining projects  Membuka laporan masalahAnda biasanya akan membuka sebuah laporan masalah pada situasi berikut:  Melaporkan kesalahan yang tidak bisa Anda selesaikan sendiri  Mendiskusikan topik tingkat tinggi atau ide (misalnya komunitas, visi, kebijakan)  Mengajukan fitur baru atau ide proyek lainnyaTips untuk berkomunikasi pada laporan masalah:  Jika Anda melihat laporan masalah yang masih terbuka yang hendak Anda selesaikan, berikan komentar Anda pada laporan masalah tersebut agar orang lain tahu. Dengan cara begitu, kecil kemungkinan orang lain akan mengerjakan hal yang sama.  Jika sebuah laporan masalah baru saja dibuka beberapa saat yang lalu, ada kemungkinan bahwa laporan tersebut sedang dikerjakan oleh orang lain, atau sudah diperbaiki, sehingga berikan komentar untuk bertanya untuk konfirmasi sebelum memulai pekerjaan.  Jika Anda membuka sebuah laporan masalah, tetapi menemukan jawabannya sendiri, berikan komentar untuk menginformasikan kepada orang lain, lalu tutup laporan masalah tersebut. Bahkan mendokumentasikan hasilnya juga merupakan sebuah kontribusi pada proyek.Membuka pull requestAnda biasanya akan membuka sebuah pull request pada situasi berikut:  Mengajukan perbaikan sederhana (misalnya kesalahan ketik, link tidak valid, atau kesalahan yang jelas terlihat)  Mulai bekerja pada sebuah kontribusi yang sudah ditanyakan sebelumnya, atau yang sudah Anda diskusikan pada sebuah laporan masalah.Sebuah pull request tidak harus mencerminkan sebuah pekerjaan yang sudah selesai. Biasakan untuk membuka pull request di awal, sehingga orang lain bisa melihat atau memberikan masukan untuk perkembangan Anda. Tandai dengan “WIP” (Work in Progress) pada baris subject. Anda tetap bisa menambahkan commit lainnya.Jika proyek berada pada GitHub, berikut cara untuk membuka pull request:  Fork repositori dan clone secara lokal. Hubungkan lokal Anda dengan repositori asli “upstream” dengan menambahkannya sebagai remote. Pull semua perubahan dari “upstream” secara berkala sehingga Anda selalu up to date dan ketika Anda mengajukan pull request Anda, merge conflict akan lebih jarang terjadi. (Lihat instruksi lebih detail disini.)  Membuat sebuah branch untuk hasil pengeditan Anda.  Referensikan laporan masalah yang berhubungan atau dokumentasi pendukung pada PR Anda (Misalnya. “Menutup #37.”)  Sertakan tangkapan layar sebelum dan sesudah jika perubahan Anda meliputi perubahan pada HTML/CSS. Tarik dan letakkan gambar citra pada bagian body dari pull request Anda.  Uji perubahan Anda! Jalankan perubahan Anda terhadap pengujian jika ada dan buat uji baru jika diperlukan. Apapun kondisinya, pastikan perubahan Anda tidak merusak proyek yang sudah ada.  Kontribusi sesuai dengan gaya proyek sesuai kemampuan Anda. Hal ini berarti menggunakan indentasi, titik koma, dan komentar yang berbeda seperti yang Anda lakukan pada repositori Anda sendiri, tetapi memudahkan bagi pengelola untuk melakukan merge dan orang lain untuk memahami dan mengelolanya di masa depan.Jika ini merupakan pull request pertama Anda, lihat Make a Pull Request, yang dibuat oleh @kentcdodds sebagai sumber panduan informasi gratis.Apa yang terjadi setelah Anda mengajukan sebuah kontribusiAnda melakukannya! Selamat karena telah menjadi kontributor open source. Kami berharap ini yang pertama untuk banyak orang.Setelah Anda mengajukan kontribusi Anda, salah satu hal berikut akan terjadi:😭 Anda tidak mendapatkan respon.Semoga Anda menguji tanda-tanda aktivitas proyek sebelum memulai sebuah kontribusi. Bahkan pada proyek yang aktif, ada kemungkinan bahwa kontribusi Anda tidak akan mendapatkan respon.Jika Anda belum mendapatkan respon lebih dari satu minggu, sangatlah masuk akal untuk bertanya pada tempat yang sama, meminta orang lain untuk melakukan review. Jika Anda mengetahui orang yang tepat untuk melakukan review terhadap kontribusi Anda, Anda bisa menyebut mereka menggunakan @-kontak pada diskusi.Jangan menghubungi orang tersebut secara pribadi; harap diingat bahwa komunikasi publik sangatlah vital bagi proyek open source.Jika Anda bertanya secara sopan dan masih tidak ada yang merespon, ada kemungkinan tidak akan ada yang merespon. Ini bukan perasaan yang menyenangkan, tetapi jangan sampai membuat Anda kecewa. Hal ini terjadi pada siapapun juga Terdapat banyak alasan masuk akal kenapa Anda tidak mendapatkan respon, termasuk kondisi pribadi yang diluar kendali Anda. Cobalah untuk mencari proyek atau cara lain untuk berkontribusi. Hal ini merupakan alasan yang bagus untuk tidak menginvestasikan waktu terlalu lama dalam membuat kontribusi sebelum anggota komunitas yang lain merespon Anda.🚧 Seseorang meminta perubahan terhadap kontribusi AndaSangatlah normal dimana Anda diminta untuk membuat perubahan terhadap kontribusi Anda, apakah dalam bentuk masukan terhadap ruang lingkup ide Anda atau perubahan pada kode Anda.Ketika seseorang mengharapkan perubahan, berikan respon dengan cepat. Mereka telah meluangkan waktu untuk melakukan review terhadap kontribusi Anda. Membuka sebuah PR dan meninggalkannya merupakan contoh yang buruk. Jika Anda tidak tahu bagaimana cara membuat perubahan, lakukan pengamatan terhadap masalah, lalu bertanya jika Anda memerlukannya.Jika Anda tidak memiliki waktu untuk mengerjakan laporan masalah tersebut (misalnya jika diskusi telah berjalan selama berbulan-bulan, dan kondisi Anda sudah mengalami perubahan), berikan informasi kepada pengelola sehingga mereka tidak lagi mengharapkan adanya respon dari Anda. Mungkin terdapat orang lain yang akan mengambil alih.👎 Kontribusi Anda tidak diterima.Kontribusi Anda mungkin bisa diterima atau tidak pada akhirnya. Semoga Anda tidak menghabiskan waktu terlalu banyak. Jika Anda tidak yakin kenapa tidak diterima, sangatlah masuk akal untuk menanyakan kepada pengelola untuk masukan dan klarifikasi. Meski demikian, Anda tetap harus menghargai keputusan akhir mereka. Jangan berdebat atau bahkan menyerang. Anda selalu diijinkan untuk melakukan fork dan bekerja pada versi Anda sendiri jika Anda tidak setuju.🎉 Kontribusi Anda diterima.Hooray! Anda telah membuat kontribusi open source!Anda berhasil!Apakah Anda baru saja membuat kontribusi pertama Anda, atau Anda mencari cara baru untuk berkontribusi, kami berharap Anda terinsipirasi untuk mengambil sebuah tindakan. Meskipun jika kontribusi Anda tidak diterima, jangan lupa untuk mengucapkan terima kasih kepada pengelola yang meluangkan waktu untuk membantu Anda. Open source terbentuk oleh orang-orang seperti Anda: satu masalah, pull request, komentar, atau tos pada satu waktu.",
    "url": "/id/how-to-contribute/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/id/how-to-contribute/\">\n      Bagaimana Berkontribusi pada Open Source\n    </a>\n  </h2>\n  <h2 id=\"mengapa-berkontribusi-pada-open-source\">Mengapa berkontribusi pada open source?</h2>\n\n\n</div>\n"
  },

  
  "/id/leadership-and-governance/": {
    "title": "Kepemimpinan dan Pengelolaan",
    "content": "Memahami pengelolaan untuk proyek Anda yang semakin berkembangProyek Anda semakin berkembang, orang-orang semakin tertarik untuk bergabung, dan Anda berkomitmen untuk mempertahankan proses ini. Pada tahap ini, Anda mungkin bertanya, bagaimana melibatkan kontributor proyek Anda pada alur kerja Anda, apakah dengan memberikan akses commit pada seseoang atau menyelesaikan debat pada komunitas. Jika Anda memiliki pertanyaan, kami memiliki jawabannya.Apa contoh dari peran formal yang digunakan pada proyek open source?Banyak proyek mengikuti struktur yang serupa untuk peran dan pengakuan kontributor.Arti dari peran tersebut sangat tergantung dari Anda. Berikut adalah beberapa jenis peran yang mungkin Anda kenali:  Maintainer  Contributor  CommitterUntuk beberapa project, “maintainer” adalah satu-satunya orang pada proyek yang memiliki akses commit. Pada proyek lain, mereka adalah orang-orang yang terdaftar pada README sebagai pengelola.Seorang pengelola (maintainer) tidak harus merupakan orang yang menuliskan kode pada proyek Anda. Maintainer bisa merupakan orang yang mengembangkan proyek Anda, atau menuliskan dokumentasi agar bisa diakses oleh banyak orang. Terlepas dari apa yang mereka lakukan sehari-hari, seorang pengelola merupakan orang yang bertanggung jawab terhadap arah dari proyek dan berkomitmen untuk meningkatkannya.Seorang “kontributor” bisa siapa saja yang memberikan komentar pada sebuah masalah atau pull request, orang-orang yang memberikan nilai pada proyek (baik menyelesaikan masalah, menuliskan kode, atau mengelola sebuah acara), atau siapapun dengan pull request yang diterima (mungkin definisi tersingkat dari seorang kontributor).    [Untuk Node.js,] setiap orang yang memberikan komentar pada sebuah masalah atau mengirimkan kode adalah anggota dari komunitas proyek. Cukup dengan melihat apa yang mereka lakukan berarti mereka sudah beralih dari seorang pengguna menjadi seorang kontributor.  — @mikeal, “Healthy Open Source”  Istilah “committer” mungkin digunakan untuk membedakan akses commit, yang merupakan tanggung jawab yang spesifik, dari jenis kontribusi lainnya.Walaupun Anda bisa mendefinisikan peran pada proyek Anda sesuka Anda, pertimbangkan untuk menggunakan definisi yang lebih luas untuk mendorong lebih banyak jenis kontribusi. Anda bisa menggunakan peran kepemimpinan untuk secara formal mengakui orang-orang yang memiliki kontribusi yang besar pada proyek Anda, terlepas dari ketrampilan teknis mereka.    Anda mungkin mengenal saya sebagai “pencipta” dari Django…tetapi saya hanyalah orang yang dipekerjakan untuk bekerja pada sesuatu setelah satu tahun dibuat. (…) Orang menduga bahwa saya sukses karena ketrampilan pemrograman saya…tetapi saya hanyalah programmer biasa.  — @jacobian, “PyCon 2015 Keynote” (video)  Bagaimana saya memformalkan peran kepemimpinan ini?Meresmikan peran kepemimpinan akan membantu orang lain merasa memiliki dan memberitahukan anggota kelompok lainnya bagi yang membutuhkan.Untuk proyek yang kecil, menentukan pemimpin semudah menambahkan nama-nama mereka pada berkas README atau CONTRIBUTORS.Untuk proyek yang lebih besar, jika Anda memiliki sebuah website, buatlah halaman tim atau tuliskan pemimpin proyek Anda. Sebagai contoh, PostgreSQL memiliki halaman tim yang lengkap dengan profil singkat pada setiap kontributornya.Jika proyek Anda memiliki komunitas kontributor yang aktif, Anda mungkin perlu membuat “tim inti” dari pengelola, atau sub komite dari orang-orang yang memiliki peran pada beberapa area yang berbeda (misalnya keamanan, laporan masalah, atau kode etik). Biarkan orang lain mengatur dirinya sendiri dan berkontribusi pada peran yang mereka sukai.  [Kami] melengkapi tim inti dengan beberapa “sub tim”. Setiap sub tim berfokus pada area tertentu, misalnya desain bahasa atau pustaka. (…) Untuk memastikan koordinasi yang kuat dan global, penyamaan visi pada proyek secara keseluruhan, setiap sub tim dipimpin oleh anggota dari tim inti.  — “Rust Governance RFC”  Tim pemimpin mungkin perlu membuat chanel khusus (seperti IRC) atau bertemu secara rutin untuk mendiskusikan proyek (seperti pada Gitter atau Google Hangout). Anda bisa membuat hasil rapat tersebut secara terbuka sehingga orang lain bisa mendengarkan. Cucumber-ruby, misalnya, mengadakan jam kerja setiap minggunya.Setelah Anda mendefinisikan peran pemimpin Anda, jangan lupa untuk mendokumentasikan bagaimana orang lain bisa mencapai posisi tersebut! Buatlah proses yang jelas bagaimana seseorang bisa menjadi seorang pengelola atau bergabung pada sub komite pada proyek Anda, dan tuliskan pada GOVERNANCE.md.Peralatan seperti Vossibility bisa membantu Anda melacak siapa yang (tidak) memberikan kontribusi pada proyek. Mendokumentasikan informasi ini akan menghindari persepsi komunitas bahwa pengelola mengambil keputusan secara pribadi.Akhirnya, jika proyek Anda berada pada GitHub, pertimbangkan untuk memindahkan proyek Anda dari akun prbadi pada “Organization” dan menambahkan paling tidak satu admin cadangan. GitHub Organizations membuat pengelolaan hak akses dan banyak repository menjadi lebih mudah dan juga menjaga proyek Anda melalui berbagi kepemilikan.Kapan saya harus memberikan akses commit kepada seseorang?Beberapa orang berpikir bahwa Anda perlu memberikan akses commit pada semua orang yang memberikan kontribusi. Melakukan hal ini bisa mendorong lebih banyak orang untuk merasa memiliki proyek Anda.Disisi lain, terutama untuk proyek yang besar dan kompleks, Anda mungkin hanya akan memberikan akses commit pada orang-orang yang mendemonstrasikan komitmen mereka Tidak ada cara yang paling benar untuk melakukan hal ini - lakukan apa yang Anda rasa paling baik!Jika proyek Anda berada pada GitHub, Anda bisa menggunakan protected branches untuk mengelola siapa saja yang boleh mengirimkan pada branch tertentu, dan pada kondisi apa.    Ketika seseorang mengirimkan sebuah pull request, berikan mereka akses commit pada proyek Anda. Meskipun tampaknya hal bodoh pada awalnya, menggunakan strategi ini akan memaksimalkan kekuatan utama dari GitHub. (…) Setelah orang-orang memiliki akses commit, mereka tidak lagi khawatir bahwa perubahan mereka tidak akan digunakan…hal ini akan membuat mereka bekerja lebih keras pada perubahan yang diusulkan.  — @felixge, “The Pull Request Hack”  Apa struktur pengelolaan yang umum untuk proyek open source?Terdapat tiga struktur pengelolaan yang umumnya dipakai pada proyek open source.      BDFL: BDFL kependekan dari “Benevolent Dictator for Life”. Pada struktur ini, satu orang (biasanya pendiri proyek) memiliki keputusan final terhadap semua keputusan proyek. Python adalah contoh klasik. Proyek yang lebih kecil biasanya menganut model BDFL secara default, karena hanya terdapat satu atau dua pengelola. Sebuah proyek yang berawal dari sebuah perusahaan juga bisa masuk kedalam kategori BDFL.        Meritokrasi: (Catatan: istilah “meritokrasi” memiliki konotasi negatif pada beberapa komunitas dan sejarah sosial dan politis yang kompleks.) Pada model meritokrasi, kontributor aktif sebuah proyek (mereka yang “layak”) diberikan peran dalam pengambilan keputusan formal. Keputusan biasanya dilakukan berdasarkan konsensus voting. Konsep ini diciptakan oleh Yayasan Apache; semua proyek Apache menganut model ini. Kontribusi hanya dapat dilakukan secara perseorangan mewakili dirinya sendiri, bukan untuk sebuah perusahaan.        Kontribusi liberal: Pada model ini, orang-orang yang banyak melakukan pekerjaan adalah yang dianggap berperan, namun ini berbasiskan pada pekerjaan saat ini dan bukan kontribusi yang lampau. Pengambilan keputusan pada proyek berdasarkan pada proses pencarian konsensus dibandingkan voting murni, dan mencoba melibatkan banyak pandangan dari komunitas. Contoh populer proyek yang menggunakan model ini meliputi Node.js dan Rust.  Mana yang harus Anda gunakan? Semuanya tergantung Anda! Setiap model memiliki kelebihan dan kekurangan. Meskipun pada awalnya mereka tampak berbeda di awal, semua model memiliki banyak kesamaan. Jika Anda tertarik untuk mengadopsi salah satu model tersebut, silahkan lihat beberapa template berikut:  template model BDFL  template model meritokrasi  kebijakan kontribusi liberal Node.jsApakah saya perlu dokumentasi pengelolaan ketika Saya merilis proyek Saya?Tidak ada waktu terbaik kapan kita harus menuliskan pengelolaan proyek Anda, tetapi akan lebih mudah untuk mendefinisikannya apabila Anda telah melihat dinamika komunitas Anda mulai bermain. Bagian terbaik (dan tersulit) dari pengelolaan open source adalah karena pengelolaan tersebut dibentuk oleh komunitas!Beberapa dokumentasi awal akan membantu pengelolaan proyek Anda, sehingga mulailah menuliskannya. Sebagai contoh, Anda bisa mendefinisikan harapan yang jelas untuk perilaku, atau bagaimana proses kontributor bekerja, bahkan pada saat Anda merilis proyek Anda.Jika Anda bagian dari sebuah perusahaan yang merilis proyek open source, maka akan sangat berguna untuk melakukan diskusi internal tentang bagaimana perusahaan Anda akan mengelola dan mengambil keputusan ketika proyek sudah mulai berkembang. Anda juga mungkin perlu menjelaskan tentang bagaimana perusahaan Anda (tidak) akan terlibat dengan proyek.    Kami menugaskan kelompok kecil untuk mengelola proyek pada Github di Facebook. Sebagai contoh, React dikelola oleh pengembang React.  — @caabernathy, “An inside look at open source at Facebook”  Apa yang terjadi jika karyawan perkantoran mulai mengajukan kontribusi?Proyek open source yang sukses akan digunakan oleh banyak orang dan perusahaan, dan beberapa perusahaan mungkin akan memberikan pendanaan pada proyek. Sebagai contoh, sebuah proyek mungkin menggunakan kode dari proyek sebagai salah satu komponen pada layanan komersialnya.Seiring dengan proyek yang semakin banyak digunakan, orang-orang yang memiliki keahlian akan menjadi kebutuhan - Anda mungkin salah satunya! - dan mungkin akan dibayar untuk pekerjaan mereka pada proyek.Sangatlah penting untuk memperlakukan aktivitas komersial sebagai sesuatu yang biasa dan merupakan sumber lain dari energi pengembangan. Pengembang yang dibayar tidak perlu mendapatkan perlakuan khusus dibandingkan mereka yang tidak dibayar; tentu saja setiap kontribusi harus dievaluasi berdasarkan kelayakan teknisnya. Meski demikian, orang-orang seharusnya lebih nyaman dengan aktivitas komersial, dan merasa nyaman menyatakan kasus mereka ketika berpendapat tentang peningkatan atau fitur tertentu.“Komersial” sangatlah kompatibel dengan “open source”. “Komersial” hanya berarti ada uang yang terlibat didalamnya pada suatu titik - misalnya software yang digunakan pada perdagangan, yang kecenderungannya meningkat setelah proyek banyak diadopsi. (Ketika perangkat lunak open source digunakan sebagai bagian dari produk non open source, secara keseluruhan produk masuk terbilang “proprietary”, meskipun, seperti halnya open source, bisa digunakan untuk kepentingan komersial atau non-komersial.)Seperti halnya orang lain, pengembang yang termotivasi secara komersial mendapatkan pengaruh pada proyek melalui kualitas dan kuantitas dari kontribusinya. Jelas, pengembang yang dibayar untuk waktu mereka bisa melakukan lebih dari mereka yang tidak dibayar, tetapi hal itu sangatlah lumrah: pembayaran hanyalah satu dari banyak faktor yang bisa mempengaruhi seseorang. Pastikan diskusi proyek Anda berfokus pada kontribusi, bukan pada faktor eksternal yang memungkinkan orang untuk membuat kontribusi tersebut.Apakah saya perlu entitas legal untuk mendukung proyek Saya?Anda tidak perlu entitas legal untuk mendukung proyek open source Anda kecuali Anda mengurusi uang.Sebagai contoh, jika Anda hendak membuat bisnis komersial, Anda perlu membuat C Corp atau LLC (jika Anda berada di AS). Jika Anda hanya melakukan pekerjaan kontrak berkaitan dengan proyek open source Anda, Anda bisa menerima uang sebagai pemilik tunggal, atau membuat LLC (jika Anda berbasiskan di AS).Jika Anda hendak menerima donasi untuk proyek open source Anda, Anda bisa membuat tombol donasi (menggunakan PayPal atau Stripe misalnya), tetapi uang tersebut akan dikurangi pajak kecuali Anda adalah nirlaba (501c3 jika Anda berada di AS).Banyak proyek tidak ingin kerepotan untuk membuat nirlaba, sehingga mereka mencari sponsor fiskal nonprofit. Sponsor fiskal menerima donasi untuk Anda, biasanya dengan imbalan beberapa pesen dari donasi. Software Freedom Conservancy, Apache Foundation, Eclipse Foundation, Linux Foundation dan Open Collective adalah contoh organisasi yang melayani sebagai sponsor fiskal untuk proyek open source.    Tujuan kami adalah menyediakan infrastruktur yang bisa digunakan oleh komunitas untuk pengelolaan mandiri, sehingga menciptakan sebuah lingkungan dimana setiap orang - kontributor, pendukung, sponsor - bisa menerima keuntungan yang jelas.  — @piamancini, “Moving beyond the charity framework”  Jika proyek Anda sangat erat hubungannya dengan bahasa atau ekosistem tertentu, seringkali terdapat yayasan yang bisa Anda ajak kerjasama. Sebagai contoh, Python Software Foundation membantu PyPI, Python package manager, dan Node.js Foundation membantu Express.js, framework berbasis Node.",
    "url": "/id/leadership-and-governance/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/id/leadership-and-governance/\">\n      Kepemimpinan dan Pengelolaan\n    </a>\n  </h2>\n  <h2 id=\"memahami-pengelolaan-untuk-proyek-anda-yang-semakin-berkembang\">Memahami pengelolaan untuk proyek Anda yang semakin berkembang</h2>\n\n\n</div>\n"
  },

  
  "/id/legal/": {
    "title": "Sisi Hukum dari Open Source",
    "content": "Memahami implikasi hukum dari open sourceMembagikan pekerjaan kreatif Anda kepada dunia bisa menjadi sebuah pengalaman yang menarik dan berharga. Hal ini juga bisa berarti beberapa masalah hukum yang tidak Anda pikirkan sebelumnya. Untungnya, Anda tidak harus memulainya dari nol. Kami akan membahas beberapa masalah hukum yang Anda perlukan. (Sebelum Anda masuk lebih dalam, pastikan baca Peringatan.)Kenapa orang-orang begitu perhatian terhadap sisi hukum dari open source?Kami senang Anda bertanya! Ketika Anda membuat pekerjaan kreatif (seperti menulis, grafis, atau kode), hasil karya tersebut berada dibawah hak cipta eksklusif secara default. Maksudnya, hukum mengasumsikan bahwa sebagai pencipta hasil karya Anda, Anda memiliki hak untuk menentukan apa yang boleh dilakukan oleh orang lain terhadap hasil karya Anda.Secara umum, hal itu berarti tidak ada seorangpun yang dapat menggunakan, menyalin, mendistribusikan, atau memodifikasi hasil karya Anda tanpa terkena masalah hukum.Open source adalah sebuah kondisi yang tidak lazim, karena sang pencipta justru mengharapkan bahwa orang lain akan menggunakan, memodifikasi, dan membagikan pekerjaan mereka. Tetapi karena secara dasar hukum masih hak cipta eksklusif, Anda perlu sebuah lisensi yang menjelaskan secara eksplisit tentang hak akses ini.Jika Anda tidak menerapkan sebuah lisensi open source, semua orang yang berkontribusi terhadap proyek Anda juga menjadi pemilik hak cipta eksklusif dari pekerjaan mereka. Hal itu berarti tidak ada seorangpun yang boleh menggunakan, menyalin, mendistribusikan, atau memodifikasi kontribusi mereka – dan itu termasuk Anda.Akhirnya, proyek Anda mungkin memiliki ketergantungan dengan kebutuhan lisensi yang tidak Anda sadari sebelumnya. Komunitas proyek atau kebijakan perusahaan Anda mungkin juga memaksa proyek Anda untuk menggunakan lisensi open source yang spesifik. Kami akan membahas situasi-situasi tersebutApakah proyek publik GitHub open source?Ketika Anda membuat proyek baru pada GitHub, Anda memiliki opsi untuk membuat repositori private atau public.Membuat proyek GitHub Anda sebagai publik tidaklah sama dengan melisensikan proyek Anda. Proyek publik dibahas pada Perjanjian Layanan GitHub, yang mengijinkan orang lain untuk melihat dan melakukan fork terhadap proyek Anda, tetapi jika tidak, maka tidak ada hak akses terhadap proyek Anda.Jika Anda menginginkan orang lain untuk bisa menggunakan, menyalin, memodifikasi, atau berkontribusi balik pada proyek Anda, Anda perlu menyertakan sebuah lisensi open source. Sebagai contoh, seseorang tidak dapat menggunakan sembarang bagian dari proyek GitHub Anda pada kode mereka secara legal, meskipun bersifat publik, kecuali Anda memberikan ijin kepada mereka.Berikan ringkasan tentang apa yang saya perlukan untuk menjaga proyek saya.Anda beruntung, karena saat ini lisensi open source sudah terstandarisasi dan mudah digunakan. Anda cukup menyalin dan menggunakan lisensi yang sudah ada pada proyek Anda.MIT, Apache 2.0, dan GPLv3 adalah lisensi open source yang paling populer, tetapi terdapat opsi lain yang dapat Anda pilih. Anda bisa menemukan teks lengkap dari lisensi tersebut, termasuk instruksi bagaimana menggunakannya pada choosealicense.com.Ketika Anda menciptakan proyek baru pada GitHub, Anda akan diminta untuk menambahkan lisensi.    Sebuah lisensi yang terstandarisasi berfungsi sebagai jembatan bagi mereka yang tidak memiliki pelatihan hukum untuk tahu secara pasti apa yang mereka bisa dan tidak bisa lakukan dengan perangkat lunak. Apabila memungkinkan, hindari istilah yang aneh, modifikasi, atau tidak standar, yang akan menjadi penghambat bagi orang lain untuk menggunakan kode Anda.  — @benbalter, “Everything a government attorney needs to know about open source software licensing”  Lisensi open source mana yang sesuai untuk proyek saya?Jika Anda baru memulai, disarankan untuk menggunakan Lisensi MIT. Lisensi ini pendek, mudah dipahami, dan mengijinkan setiap orang untuk melakukan apapun selama mereka mempertahankan salinan dari lisensi, termasuk catatan hak cipta Anda. Anda bisa merilis proyek pada lisensi yang berbeda jika diperlukan.Jika Anda tidak memulai dari nol, memilih lisensi open source yang sesuai sangat bergantung dari tujuan Anda.Proyek Anda memiliki (atau akan) ketergantungan. Misalnya, jika Anda membuat proyek open source berbasis Node.js, Anda kemungkinan akan menggunakan pustaka dari Node Package Manager (npm). Setiap pustaka yang Anda gunakan akan mmemiliki lisensi open sourcenya masing-masing. Jika lisensi yang mereka gunakan bersifat “permissive” (mengijinkan hak akses publik untuk menggunakan, memodifikasi, dan berbagi tanpa adanya kondisi apapun bagi pengguna lisensi), Anda bisa menggunakan sembarang lisensi apapun. Lisensi yang bersifat permissive meliputi MIT, Apache 2.0, ISC, dan BSD.Di satu sisi, jika salah satu dari lisensi ketergantungan Anda adalah “copyleft” (juga memberikan hak akses publik yang sama, kecuali pada kondisi yang mengharuskan penggunaan lisensi yang sama pada proyek turunan), maka proyek Anda harus menggunakan lisensi yang sama. Contoh lisensi copyleft meliputi GPLv2, GPLv3, dan AGPLv3.Anda juga perlu memperhatikan komunitas akan menggunakan dan berkontribusi pada proyek Anda:  Apakah Anda ingin proyek Anda digunakan sebagai ketergantungan oleh proyek lain? Mungkin paling tepat untuk menggunakan lisensi yang paling populer pada komunitas Anda. Sebagai contoh, MIT adalah lisensi yang paling populer untuk pustaka npm.  Apakah Anda ingin proyek Anda menarik bagi kalangan bisnis skala besar? Kalangan bisnis yang berskala besar memiliki kencenderungan untuk menggunakan lisensi paten ekspress dari semua kontributor. Dalam hal ini, Apache 2.0 dapat mencakup Anda dan mereka.  Apakah Anda ingin proyek Anda menarik bagi kontributor yang tidak ingin hasil kontribusinya tidak digunakan pada perangkat lunak tertutup? GPLv3 atau (jika mereka juga tidak mau berkontribusi pada layanan tertutup) AGPLv3 merupakan pilihan yang tepat.Perusahaan Anda mungkin memiliki kebutuhan lisensi yang khusus untuk proyek open sourcenya. Sebagai contoh, mungkin perusahaan akan membutuhkan lisensi yang bersifat permissive sehingga perusahaan bisa menggunakan proyek Anda pada produk tertutup milik perusahaan. Atau perusahaan membutuhkan lisensi copyleft dan tambahan perjanjian kontributor (lihat dibawah) sehingga Anda hanya perusahaan Anda, dan bukan orang lain, yang boleh menggunakan proyek Anda pada perangkat lunak tertutup. Atau perusahaan Anda mungkin memiliki beberapa kebutuhan yang berkaitan dengan standar, tanggung jawab sosial, atau transparansi, y ang membutuhkan strategi lisensi khusus. Diskusikan dengan divisi legal perusahaan.Ketika Anda menciptakan proyek baru pada GitHub, Anda diberikan opsi untuk memilih sebuah lisensi. Menyertakan salah satu lisensi diatas akan membuat proyek GitHub Anda menjadi open source. Jika Anda hendak melihat opsi lain, lihat pada choosealicense.com untuk menemukan lisensi yang tepat pada proyek Anda, meskipun bukan perangkat lunak.Bagaimana jika saya hendak mengubah lisensi proyek saya?Sebagian besar proyek tidak perlu mengubah lisensi, Tetapi seringkali kondisi berubah.Sebagai contoh, seiring dengan perkembangan proyek diperlukan tambahan ketergantungan atau pengguna, atau perusahaan Anda mengubah strategi, yang pada akhirnya membutuhkan atau menginginkan lisensi yang berbeda. Jika Anda mengabaikan lisensi sejak awal, menambahkan lisensi sama halnya dengan mengubah lisensi. Terdapat tiga hal dasar yang perlu dipertimbangkan ketika menambahkan atau mengubah lisensi proyek Anda:Rumit. Menentukan kompatibilitas dan kesesuaian lisensi dan siapa yang memegang hak cipta bisa menjadi rumit dan membingungkan. Berpindah pada lisensi baru yang kompatibel untuk rilis dan kontribusi baru berbeda dengan melakukan perubahan lisensi pada semua kontribusi yang ada. Libatkan tim hukum untuk perubahan lisensi. Meskipun Anda bisa mendapatkan ijin dari semua pemilik hak cipta pada proyek Anda untuk perubahan lisensi, pertimbangkan dampak dari perubahan tersebut pada pengguna dan kontributor proyek Anda. Anggap perubahan lisensi sebagai sebuah “kejadian pengaturan” bagi proyek Anda yang akan berjalan lancar dengan komunikasi yang jelas dan konsultasi dengan semua yang terlibat pada proyek Anda. Hal ini juga menjadi alasan kuat untuk memilih dan menggunakan lisensi yang tepat sejak awal!Lisensi proyek Anda saat ini. Jika lisensi proyek Anda saat ini kompatibel dengan lisensi baru, Anda bisa langsung menggunakan lisensi baru. Hal itu karena jika lisensi A kompatibel dengan B, maka Anda akan sesuai dengan perjanjian pada A dan sekaligus sesuai dengan perjanjian B (tidak harus sebaliknya). Sehingga jika Anda menggunakan lisensi yang bersifat permissive (misalnya MIT), Anda bisa mengubah menjadi lisensi dengan lebih banyak kondisi, selama Anda mempertahankan salinan lisensi MIT dan catatan hak cipta yang sudah ada (dengan kata lain, terus sesuai dengan kondisi minimal dari lisensi MIT). Tetapi jika lisensi Anda saat ini tidak bersifat permissive (misalnya, copyleft, atau Anda tidak memiliki lisensi) dan Anda bukan satu-satunya pemegang hak cipta, Anda tidak bisa mengubah lisensi proyek Anda menjadi MIT. Intinya, dengan lisensi permissive, pemegang hak cipta pada proyek telah memberikan ijin di awal untuk mengubah lisensi.Pemegang hak cipta proyek Anda saat ini. Jika Anda satu-satunya kontributor pada proyek Anda maka Anda atau perusahaan Anda adalah satu-satunya pemegang hak cipta proyek. Anda bisa menambahkan atau mengubah ke lisensi yang Anda atau perusahaan Anda harapkan. Jika tidak, maka terdapat pemegang hak cipta lain yang perlu Anda ajak berdiskusi sebelum melakukan perubahan lisensi. Siapa mereka? Orang-orang yang telah melakukan commit pada proyek Anda adalah tempat terbaik untuk memulai. Tetapi pada beberapa kasus hak cipta akan dipegang oleh perusahaan yang memperkerjakan orang-orang tersebut. Pada beberapa kasus, orang-orang akan melakukan kontribusi de minimis, tetapi tidak ada aturan yang menyatakan bahwa kontribusi dibawah beberapa baris kode tidak masuk kedalam hak cipta. Apa yang harus dilakukan? Hal itu sangat tergantung dari beberapa hal. Untuk proyek yang relatif kecil dan baru, mungkin masih dimungkinkan untuk mengumpulkan semua kontributor untuk menyetujui perubahan lisensi pada sebuah laporan masalah atau pull request. Untuk proyek yang besar atau sudah berusia cukup lama, Anda perlu mencari banyak kontributor dan mungkin penerusnya. Mozilla membutuhkan waktu bertahun-tahun (2001-2006) untuk melakukan lisensi ulang Firefox, Thunderbird, dan perangkat lunak lainnya.Alternatif lain, Anda bisa mendapatkan persetujuan kontributor di awal (melalui perjanjian tambahan kontributor – lihat dibawah) untuk melakukan perubahan lisensi pada beberapa kondisi, diluar apa yang diijinkan oleh lisensi proyek open source yang sudah ada. Hal ini sedikit mengubah kompleksitas dari perubahan lisensi. Anda akan membutuhkan lebih banyak bantuan dari pengacara Anda di awal, dan Anda perlu mengkomunikasikan hal ini dengan jelas pada orang-orang yang terlibat pada proyek ketika mengeksekusi perubahan lisensi.Apakah proyek saya membutuhkan perjanjian kontributor tambahan?Kemungkinan tidak. Untuk sebagian besar proyek open source, lisensi open source secara implisit berfungsi sebagai lisensi inbound (dari kontributor) dan outbound (bagi kontributor dan pengguna lainnya). Jika proyek Anda berada pada GitHub, Perjanjian Layanan GitHub membuat aturan “inbound=outbound” default secara eksplisit.Sebuah perjanjian kontributor tambahan – seringkali disebut Contributor License Agreement (CLA) – bisa menimbulkan pekerjaan administratif tambahan bagi pengelola proyek. Seberapa banyak pekerjaan tersebut tergantung dari proyek dan implementasinya. Sebuah perjanjian yang sederhana mungkin meminta kontributor untuk melakukan konfirmasi dengan satu klik, bahwa mereka memiliki hak yang cukup untuk berkontribusi dibawah lisensi open source. Perjanjian yang lebih kompleks mungkin membutuhkan review hukum dan tanda tangan dari perusahaan yang memperkerjakan kontributor tersebut.Juga, dengan menambahkan “pekerjaan administratif” yang dipercaya oleh sebagian orang sebagai sesuatu yang tidak perlu, susah dipahami, atau tidak adil (ketika penerima perjanjian mendapatkan lebih banyak hak dibandingkan kontributor atau publik melalui lisensi open source), sebuah perjanjian kontributor tambahan juga dipandang sebagai sesuatu yang tidak ramah bagi komunitas proyek.      Kami telah menghilangkan CLA untuk Node.js. Dengan melakukan hal ini akan mengurangi hambatan bagi kontributor Node.js untuk bergabung sehingga memperluas area basis kontributor.  — @bcantrill, “Broadening Node.js Contributions”  Beberapa situasi dimana Anda ingin mempertimbangkan perjanjian kontributor tambahan pada proyek Anda meliputi:  Pengacara Anda ingin semua kontributor menerima perjanjian kontribusi (tandatangan, online atau offline), karena mereka merasa lisensi open source tidaklah cukup (meskipun sebenarnya sudah!). Jika ini merupakan satu-satunya alasan, sebuah perjanjian kontributor yang mengakui lisensi open source sudahlah cukup. Perjanjian Lisensi Kontributor Individual jQuery adalah contoh bagus dari perjanjian kontributor tambahan yang sederhana. Untuk beberapa proyek Developer Certificate of Origin mungkin menjadi alternatif yang lebih sederhana.  Proyek Anda menggunakan lisensi open source yang tidak menyertakan ijin patent (seperti MIT), dan Anda perlu pengajuan patent dari semua kontributor, beberapa diantaranya yang mungkin bekerja pada perusahaan dengan portofolio paten yang besar yang bisa digunakan untuk menyerang Anda atau kontributor atau pengguna proyek Anda. Perjanjian Lisensi Kontributor Individual Apache adalah perjanjian kontributor tambahan yang sering dipakai dan memiliki ijin penggunaan patent mengikuti apa yang bisa ditemukan pada lisensi Apache 2.0.  Proyek Anda berada dibawah lisensi copyleft, tetapi Anda juga perlu mendistribusikan versi tertutup dari proyek Anda. Anda mungkin perlu meminta setiap kontributor untuk menyatakan hak cipta kepada Anda atau memberikan ijin kepada Anda (tetapi bukan kepada publik) sebuah lisensi yang bersifat permissive. Perjanjian Kontributor MongoDB adalah contoh jenis perjanjian ini.  Anda berpikir proyek Anda perlu mengubah lisensi dikemudian hari dan ingin para kontributor untuk menyetujuinya di awal terhadap perubahan tersebut.Jika Anda membutuhkan perjanjian kontributor tambahan pada proyek Anda, pertimbangkan untuk menggunakan integrasi seperti asisten CLA untuk meminimalkan gangguan pada kontributor.“Apa yang perlu diketahui tim kuasa hukum perusahaan sayaJika Anda merilis proyek open source sebagai karyawan perusahaan, pertama-tama, tim hukum Anda perlu  tahu bahwa Anda membuat proyek open source.Beritahukan kepada mereka meskipun hal itu untuk proyek pribadi. Anda mungkin memiliki “perjanjian kekayaan intelektual karyawan” dengan perusahaan Anda yang memberikan beberapa kontrol terhadap proyek Anda, terutama jika berkaitan dengan bisnis perusahaan atau Anda menggunakan sumber daya perusahaan untuk mengembangkan proyek tersebut. Perusahaan Anda seharusnya dengan mudah memberikan Anda ijin, dan mungkin sudah melalui perjanjian yang ramah terhadap karyawan. Jika tidak, Anda bisa negosiasi (misalnya, jelaskan kenapa proyek Anda sesuai dengan tujuan pembelajaran dan pengembangan profesional perusahaan bagi Anda), atau hindari bekerja pada proyek Anda sampai Anda menemukan perusahaan yang lebih baik.Jika Anda membuat proyek open source untuk perusahaan Anda, maka pastikan mereka tahu. Tim hukum Anda mungkin memiliki beberapa kebijakan tentang apa lisensi open source (dan mungkin perjanjian kontributor tambahan) yang harus digunakan sesuai dengan kebutuhan bisnis perusahaan dan memastikan bahwa proyek Anda sesuai dengan lisensi dan ketergantungannya. Jika tidak, Anda dan mereka sangat beruntung! Tim hukum Anda akan sangat senang untuk bekerja dengan Anda untuk menyelesaikan masalah ini. Beberapa hal yang perlu diperhatikan:      Materi pihak ketiga: Apakah proyek Anda memiliki ketergantungan pada sesuatu yang dibuat oleh orang lain atau menyertakan kode milik orang lain? Jika materi itu adalah open source, Anda perlu menyesuaikan dengan lisensi open source dari materi tersebut. Hal itu mulai dengan memilih lisensi yang bekerja dengan lisensi pihak ketiga (lihat diatas). Jika proyek Anda memodifikasi atau mendistribusikan materi open source pihak ketiga, maka tim hukum Anda juga ingin tahu apakah Anda memenuhi kondisi lisensi open source pihak ketiga, seperti mempertahankan informasi hak cipta. Jika proyek Anda menggunakan kode orang lain yang tidak memiliki lisensi open source, Anda mungkin perlu bertanya pada pengelola pihak ketiga untuk menambahkan lisensi open source, dan jika Anda tidak bisa mendapatkannya, hentikan menggunakan kode mereka pada proyek Anda.        Bertukar rahasia: Pertimbangkan apakah ada sesuatu pada proyek yang tidak diharapkan oleh perusahaan untuk tersedia secara publik. Jika ada, Anda bisa membuat open source proyek Anda setelah mengambil materi yang ingin Anda jaga agar tetap rahasia.        Paten: Apakah perusahaan Anda mengajukan paten dimana membuka proyek Anda menjadi open source akan menghasilkan pengungkapan publik? Sayangnya, Anda akan diminta untuk menunggu (atau perusahaan akan mempertimbangkan kebijakan dari aplikasi). Jika Anda mengharapkan kontribusi terhadap proyek Anda dari karyawan perusahaan dengan portofolio paten yang besar, tim ukum Anda mungkin akan meminta Anda menggunakan lisensi dengan hibah paten express dari kontributor (seperti Apache 2.0 atau GPLv3), atau perjanjian kontributor tambahan (lihat diatas).        Merek dagang: Pastikan nama proyek Anda tidak konflik dengan nama yang sudah ada. Jika Anda menggunakan merek dagang perusahaan Anda pada proyek, pastikan tidak terjadi konflik. FOSSmarks adalah panduan praktis untuk memahami merek dagang pada konteks proyek open source.        Privasi: Apakah proyek Anda mengumpulkan data pengguna? “Telp rumah” ke server perusahaan? Tim hukum Anda bisa membantu dengan kebijakan perusahaan atau regulasi eksternal.  Jika Anda merilis proyek open source perusahaan Anda pertama kalinya, informasi diatas sudah lebih dari cukup (tetapi jangan khawatir, sebagian besar proyek tidak menimbulkan masalah besar).Dalam jangka panjang, tim hukum Anda bisa melakukan lebih banyak lagi dengan membantu perusahaan untuk mendapatkan lebih banyak dari keterlibatannya pada open source:  Kebijakan kontribusi karyawan: Pertimbangkan untuk mengembangkan kebijakan perusahaan yang menentukan bagaimana karyawan berkontribusi pada proyek open source. Sebuah kebijakan yang jelas akan mengurangi kebingungan  pada karyawan Anda dan membantu mereka untuk berkontribusi pada proyek open source yang penting bagi perusahaan, baik sebagai bagian dari pekerjaan mereka atau dimasa senggang mereka. Sebuah contoh bagus adalah Model IP dan Kebijakan Kontribusi Open Source milik Rackspace.    Membiarkan IP yang terkait dengan patch membangun basis pengetahuan dan reputasi karyawan. Ini menunjukkan bahwa perusahaan menekankan pengembangan karyawan dan menciptakan rasa pemberdayaan dan otonomi. Semua manfaat ini juga menyebabkan semangat kerja lebih tinggi dan retensi karyawan yang lebih baik.  — @vanl, “A Model IP and Open Source Contribution Policy”    Apa yang dirilis: (Hampir) semuanya? jika tim hukum Anda memahami dan berinvestasi pada strategi open source perusahaan Anda, mereka akan banyak membantu dibandingkan merugikan Anda.  Kesesuaian: Meskipun perusahaan Anda tidak merilis proyek open source, perusahaan Anda menggunakan perangkat lunak open source milik orang lain. Kewaspadaandan proses bisa mencegah masalah, keterlambatan produk, dan tuntutan hukum.  Organisasi harus memiliki lisensi dan strategi penyesuaian yang sesuai untuk kategori [“permissive” dan “copyleft”]. Hal ini dimulai dengan menyimpan catatan dari istilah lisensi yang digunakan pada perangkat lunak open source yang Anda gunakan — termasuk sub komponen dan ketergantungannya.  — Heather Meeker, “Open Source Software: Compliance Basics And Best Practices”    Paten: Perusahaan Anda mungkin ingin bergabung dengan Open Invention Network, sebuah kumpulan yang menjaga penggunaan proyek open source pada anggotanya, atau mencoba lisensi paten alternatif.  Pengaturan: Terutama jika dan masuk akal untuk memindahkan sebuah proyek pada entitas legal diluar perusahaan.",
    "url": "/id/legal/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/id/legal/\">\n      Sisi Hukum dari Open Source\n    </a>\n  </h2>\n  <h2 id=\"memahami-implikasi-hukum-dari-open-source\">Memahami implikasi hukum dari open source</h2>\n\n\n</div>\n"
  },

  
  "/id/metrics/": {
    "title": "Metrik Open Source",
    "content": "Kenapa mengukur segalanya?Data, ketika digunakan dengan bijaksana, bisa membantu Anda mengambil keputusan yang lebih baik sebagai pengelola open source.Dengan informasi yang lebih banyak, Anda bisa:  Memahami bagaimana pengguna bisa merespon terhadap fitur baru  Menentukan darimana asal pengguna baru  Mengidentifikasi, dan menentukan untuk mendukung fungsionalitas kasus langka  Mengkuantifikasi popularitas proyek Anda  Memahami bagaimana proyek Anda digunakan  Mendapatkan pendanaan melalui sponsor dan hibahSebagai contoh, Homebrew menemukan bahwa Google Analytics membantu mereka dalam memprioritaskan pekerjaan:  Homebrew disediakan secara gratis dan dijalankan sepenuhnya oleh sukarelawan dalam waktu senggang mereka. Sebagai hasilnya, kami tidak memiliki sumber daya untuk melakukan studi pengguna dari pengguna Homebrew untuk menentukan mendesain fitur baru dan memprioritaskan pekerjaan. Analisa agregasi pengguna anonim memampukan kami untuk memprioritaskan perbaikan dan fitur berbasiskan pada bagaimana, dimana, dan kapan orang-orang menggunakan proyek ini.Popularitas bukanlah segalanya. Semua orang masuk pada open source untuk alasan yang berbeda-beda. Jika tujuan Anda sebagai pengelola open source adalah untuk menunjukan hasil pekerjaan Anda, bersikaplah transparan tentang kode Anda, atau jika hanya untuk hiburan, metrik mungkin tidaklah penting bagi Anda.Jika Anda memang tertarik untuk memahami proyek Anda pada level yang lebih dalam, silahkan membaca lebih lanjut untuk menganalisa aktivitas proyek Anda.PenemuanSebelum setiap orang bisa menggunakan atau berkontribusi pada proyek Anda, mereka perlu tahu bahwa proyek itu ada. Tanyakan pada diri Anda: apakah orang-orang menemukan proyek ini?Jika proyek Anda berada di GitHub, Anda dapat melihat berapa banyak orang yang sampai pada proyek Anda dan darimana mereka berasal. Dari halaman proyek Anda, klik “Graphs”, lalu “Traffic”. Pada halaman ini, Anda bisa melihat:      Total pageviews: Menginformasikan berapa banyak proyek Anda dilihat        Total unique visitors: Menginformasikan berapa banyak orang yang melihat proyek Anda        Referring sites: Menginformasikan darimana pengunjung Anda berasal. Metrik ini bisa membantu Anda untuk mencari tahu dimana mencapai pengguna Anda dan apakah usaha promosi Anda berjalan dengan baik.        Popular content: Menginformasikan kemana pengunjung Anda melakuan navigasi pada proyek Anda, dilihat dari pageviews dan pengunjung unik.  GitHub stars juga bisa membantu menyediakan pengukuran dasar dari popularitas. Meskipun GitHub stars tidak serta-merta mengkorelasikan pada jumlah download dan penggunaan, informasi dari GitHub stars dapat menginformasikan berapa banyak orang yang memperhatikan pekerjaan Anda.Anda mungkin ingin melacak temuan pada tempat khusus: misalnya, Google PageRank, trafik referensi dari halaman web proyek Anda, atau referensi dari proyek open source dan website.PenggunaanOrang-orang menemukan proyek Anda pada sesuatu yang kita sebut dengan Internet. Idealnya, ketika mereka melihat proyek Anda, mereka akan tertarik untuk melakukan sesuatu. Pertanyaan kedua yang ingin Anda tanyakan adalah: apakah orang-orang menggunakan proyek ini?Jika Anda menggunakan perangkat manajemen paket, seperti npm atau RubyGems.org, untuk mendistribusikan proyek Anda, Anda bisa melacak jumlah total download dari proyek Anda.Setiap perangkat manajemen paket mungkin menggunakan definisi “download” yang berbeda, dan jumlah download tidak langsung berkorelasi dengan installasi atau penggunaan, tetapi informasi ini menyediakan dasar untuk perbandingan. Cobalah untuk menggunakan Libraries.io untuk melacak statistik pada banyak perangkat manajemen paket.Jika proyek Anda berada pada GitHub, kunjungi halaman “Traffic”. Anda bisa menggunakan clone graph untuk melihat berapa kali proyek Anda telah di-clone pada hari tertentu, dipecah pada jumlah clone dan orang-orang yang melakukan clone secara unik.Jika penggunaan ternyata rendah dibandingkan jumlah orang yang menemukan proyek Anda, terdapat dua hal yang perlu dipertimbangkan:  Proyek Anda tidak sukses dalam mengkonversi pengguna Anda, atau  Anda menarik pengguna yang salahSebagai contoh, jika proyek Anda muncul pada halaman depan dari Hacker News, Anda mungkin melihat kenaikan pada bagian traffic, tetapi nilai konversi yang rendah, karena Anda mendekati semua orang pada Hacker News. Jika proyek Ruby Anda muncul pada konferensi Ruby, Anda mungkin akan melihat nilai konversi yang tinggi dari pengguna yang ditargetkan.Cobalah untuk mencari tahu darimana asal pengguna Anda dan mintalah masukan pada halaman proyek Anda untuk menentukan manakah diantara dua masalah tersebut yang Anda alami.Setelah Anda tahu bahwa orang-orang menggunakan proyek Anda, Anda mungkin mencoba mencari tahu apa yang mereka lakukan dengan proyek Anda. Apakah mereka membangunnya dengan melakukan fork pada kode Anda dan menambahkan fitur baru? Apakah mereka menggunakannya untuk ilmu pengetahuan atau bisnis?MempertahankanOrang-orang menemukan proyek Anda dan menggunakannya. Pertanyaan berikutnya yang harus Anda tanyakan pada diri Anda adalah: apakah orang-orang berkontribusi balik pada proyek?Tidak pernah terlambat untuk mulai berpikir tentang kontributor. Tanpa mereka, Anda beresiko menempatkan posisi Anda pada situasi yang tidak sehat dimana proyek Anda terkenal (banyak orang menggunakannya) tetapi tidak didukung (tidak cukup jumlah pengelola untuk memenuhi kebutuhan).Mempertahankan juga membutuhkan masukan kontributor baru, karena kontributor aktif sebelumnya akan berpindah pada hal yang lain.Contoh dari metrik komunitas yang perlu Anda perhatikan secara berkala meliputi:  Jumlah total kontributor dan commit per kontributor: Menginformasikan berapa banyak kontributor yang Anda miliki, dan siapa yang lebih atau kurang aktif. Pada GitHub, Anda bisa melihat informasi ini pada “Graphs” -&gt; “Contributors.” Saat ini, grafik ini hanya menghitung kontributor yang telah melakukan commit pada branch default dari repositori.      Kontributor perdana, umum, dan rutin: Membantu Anda melacak apakah Anda mendapatkan kontributor baru, dan apakah mereka kembali. (Kontributor umum adalah kontributor dengan jumlah commit yang rendah. Apakah itu satu, kurang dari lima, atau jumlah commit lain sesuai definisi Anda.) Tanpa kontributor baru, komunitas proyek Anda menjadi stagnan.        Jumlah laporan masalah dan pull request yang masih terbuka: Jika jumlah ini terlalu tinggi, Anda mungkin perlu bantuan untuk membereskan masalah dan review kode.        Jumlah laporan masalah dan pull request yang dilaporkan: Laporan masalah yang dilaporkan mengindikasikan seseorang cukup perhatian terhadap proyek Anda untuk melaporkannya. Jika jumlah ini meningkat terus, hal ini mengindikasikan bahwa orang-orang tertarik dengan proyek Anda.        Jenis kontribusi: Sebagai contoh, commit, memperbaiki kesalahan ketik atau kesalahan program, atau memberikan komentar pada sebuah laporan masalah.      Open source lebih dari sekedar kode. Proyek open source yang sukses meliputi kontribusi kode dan dokumentasi bersama dengan diskusi tentang perubahan ini.  — @arfon, “The Shape of Open Source”  Aktivitas pengelolaAkhirnya, Anda ingin memastikan pengelola proyek Anda mampu menangani jumlah kontribusi yang diterima. Pertanyaan terakhir yang ingin Anda tanyakan pada diri Anda adalah: apakah saya (atau kami) merespon terhadap komunitas kami?Pengelola yang tidak responsif menjadi penghambat bagi proyek open source. Jika seseorang mengirimkan sebuah kontribusi tetapi tidak pernah mendapatkan respon dari pengelola, mereka mungkin merasa diabaikan dan pada akhirnya meninggalkan proyek Anda.Penelitian dari Mozilla menyarankan bahwa tingkat responsif pengelola merupakan faktor penting dalam mendorong kontributor yang berulang.Pertimbangkan untuk melacak berapa lama bagi Anda (atau pengelola lain) untuk merespon  terhadap kontribusi, baik laporan masalah atau pull request. Merespon tidak berarti mengambil tindakan. Merespon bisa sesederhana seperti : “Terima kasih atas kontribusi Anda! Saya akan melakukan review dalam minggu depan.”Anda juga bisa mengukur waktu yang dibutuhkan untuk berpindah dari satu fase ke fase lain pada proses kontribusi, seperti:  Waktu rata-rata sebuah laporan masalah tetap terbuka  Apakah laporan masalah ditutup oleh PRs  Apakah laporan masalah yang stagnan akhirnya ditutup  Waktu rata-rata untuk melakukan merge sebuah pull requestGunakan 📊 untuk belajar tentang orangMemahami metrik akan membantu Anda membangun proyek open source yang aktif dan berkembang. Meskipun Anda tidak melacak setiap metrik pada sebuah dashboard, gunakan kerangka diatas untuk memfokuskan perhatian Anda pada jenis perilaku yang akan membantu proyek Anda bertahan.",
    "url": "/id/metrics/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/id/metrics/\">\n      Metrik Open Source\n    </a>\n  </h2>\n  <h2 id=\"kenapa-mengukur-segalanya\">Kenapa mengukur segalanya?</h2>\n\n\n</div>\n"
  },

  
  "/id/starting-a-project/": {
    "title": "Memulai Proyek Open Source",
    "content": "“Apa” dan “kenapa” open sourceAnda berpikir untuk memulai pada open source? Selamat! Dunia ini menghargai kontribusi Anda. Mari kita bicarakan tentang apa itu open source dan kenapa orang-orang melakukannya.Apa arti “open source”?Ketika sebuah proyek bersifat open source, hal itu berarti setiap orang bisa melihat, menggunakan, memodifikasi, dan mendistribusikan proyek Anda untuk segala tujuan. Hak akses ini diakui melalui lisensi open source.Open source sangatlah berkuasa karena mengurangi hambatan untuk adopsi, memungkinkan ide untuk berkembang dengan pesat.Untuk memahami bagaimana proses ini bekerja, bayangkan teman Anda sedang makan, dan Anda membawa sebuah pai berisi buah ceri.  Semua orang mencoba pai (menggunakan)  Pai menjadi viral! Orang menanyakan resepnya kepada Anda, dan Anda berikan (lihat)  Salah seorang teman, Alex, seorang chef pastry, menyarankan untuk mengurangi gula (modifikasi)  Teman lain, Lisa, ingin menggunakannya untuk makan malam minggu depan (distribusi)Sebagai perbandingan, sebuah proses yang tertutup akan seperti dimana Anda pergi ke sebuah rumah makan dan memesan sepotong pai buah ceri. Anda harus membayar untuk memakan potongan tersebut, dan rumah makan tersebut tidak akan memberikan resepnya kepada Anda. Jika Anda membuat salinan utuh pai mereka dan menjualnya dengan nama Anda, rumah makan bisa mengambil sebuah tindakan terhadap Anda.Kenapa orang-orang membuka hasil karya mereka?    Salah satu pengalaman yang paling berharga dengan menggunakan dan berkolaborasi pada open source datang dari relasi yang saya bangun dengan pengembang yang lain ketika menghadapi masalah yang sama seperti yang saya alami.  — @kentcdodds, “How getting into Open Source has been awesome for me”  Terdapat banyak alasan kenapa seseorang atau sebuah organisasi ingin membuka proyek open source. Beberapa diantaranya meliputi:      Kolaborasi: Proyek open source bisa menerima perubahan dari siapapun juga di seluruh dunia. Exercism, sebagai contoh, adalah kerangka latihan pemrograman dengan lebih dari 350 kontributor.        Adopsi dan menggabungkan: Proyek open source bisa digunakan oleh siapapun untuk hampir semua tujuan. Bahkan bisa digunakan untuk membangun proyek lain. WordPress, sebagai contoh, dimulai dari hasil fork dari proyek yang sudah ada bernama b2.        Transparansi: Setiap orang dapat melihat kesalahan atau inkonsistensi pada proyek open source. Transparansi sangat penting bagi pemerintah seperti Bulgaria atau  Amerika Serikat, industri yang memiliki regulasi seperti perbankan atau kesehatan, dan perangkat lunak keamanan seperti Let’s Encrypt.  Open source bukan hanya untuk perangkat lunak saja. Anda bisa membuka tentang apa saja mulai dari kumpulan data hingga buku. Silahkan lihat GitHub Explore untuk ide yang dapat Anda buka sebagai open source.Apakah open source berarti “bebas biaya”?Salah satu hal yang menarik dari open source adalah tidak memerlukan biaya. “Bebas biaya”, adalah hasil sampingan dari keseluruhan nilai open source.Karena lisensi open source mewajibkan bahwa setiap orang boleh menggunakan, memodifikasi, dan menyebarkan proyek Anda untuk segala tujuan, pada umumnya proyek tersebut bersifat bebas biaya. Jika proyek memerlukan uang untuk bisa menggunakannya, setiap orang boleh membuat salinannya secara legal dan menggunakan versi gratisnya.Sebagai hasilnya, sebagian besar proyek open source bersifat gratis, tetapi “bebas biaya” bukan bagian dari definisi open source. Terdapat banyak cara untuk menarik dana bagi proyek open source secara tidak langsung  melalui lisensi ganda atau fitur yang terbatas, dan masih tetap sesuai dengan definisi resmi dari open source.Perlukah saya merilis proyek open source saya sendiri?Jawaban singkatnya adalah ya, karena apapun hasilnya, merilis proyek Anda sendiri adalah cara baik untuk belajar bagaimana open source bekerja.Jika Anda belum pernah membuka proyek Anda sebelumnya, Anda mungkin akan khawatir tentang apa yang akan dikatakan oleh orang lain, atau apakah orang lain akan melihat proyek Anda atau tidak. Jika hal ini sama seperti yang Anda rasakan, Anda tidak sendirian.!Pekerjaan open source sama seperti aktivitas kreatif lainnya, baik itu menulis maupun melukis. Terkadang bisa menakutkan untuk mempublikasikan hasil pekerjaan Anda kepada dunia, tetapi satu-satunya cara agar lebih baik adalah dengan berlatih - meskipun Anda tidak punya pengguna.Jika Anda belum yakin, berikan waktu sejenak untuk memikirkan tujuan akhir Anda.Menentukan tujuan akhir AndaTujuan akhir bisa membantu Anda menentukan apa yang akan dikerjakan, apa yang harus ditolak, dan dimana Anda akan membutuhkan bantuan dari orang lain. Mulailah dengan menanyakan kepada dirinya Anda sendiri,  kenapa saya membuat proyek saya menjadi open source?Tidak ada jawaban benar tunggal pada pertanyaan ini. Anda boleh memiliki banyak tujuan akhir untuk satu proyek tunggal, atau beberapa proyek dengan beberapa tujuan akhir.Jika tujuan akhir Anda adalah untuk menunjukkan hasil pekerjaan Anda, Anda mungkin tidak perlu adanya kontribusi, dan mungkin bisa saja dituliskan pada dokumen README Anda. Di satu sisi, jika Anda ingin adanya kontributor, Anda harus menginvestasikan waktu untuk dokumentasi yang jelas dan membuat pendatang baru merasa disambut.    Pada suatu titik saya menciptakan UIAlertView hasil modifikasi yang saya gunakan…dan saya memutuskan untuk membuatnya menjadi open source. Lalu saya memodifikasinya menjadi lebih dinamis dan menyimpannya di GitHub. Saya menulis dokumentasi pertama saya dengan menjelaskan kepada pengembang lain bagaimana untuk menggunakannya pada proyek mereka. Mungkin saja tidak ada orang lain yang akan menggunakannya karena merupakan proyek sederhana, tetapi saya memiliki perasaan yang baik tentang kontribusi yang saya lakukan.  — @mavris, “Self-taught Software Developers: Why Open Source is important to us”  Ketika proyek Anda berkembang, komunitas Anda mungkin membutuhkan lebih dari sekedar kode dari Anda. Merespon terhadap laporan masalah, melakukan review terhadap kode, dan mempopulerkan proyek Anda menjadi kegiatan penting dalam proyek open source.Meskipun jumlah waktu yang Anda habiskan untuk kegiatan yang tidak berhubungan dengan pengembangan akan sangat bergantung dari ukuran dan batasan proyek Anda, Anda harus siap sebagai pengelola untuk menjalaninya atau cari seseorang untuk membantu Anda.Jika Anda bagian dari sebuah perusahaan yang membuka proyeknya pada open source, pastikan proyek Anda memiliki sumber daya internal yang dibutuhkan untuk berkembang. Anda perlu mengindetifikasi siapa yang bertanggung jawab untuk mengelola proyek setelah diluncurkan, dan bagaimana Anda akan mendistribusikan tugas tersebut dengan komunitas.Jika Anda membutuhkan pendanaan yang permanen atau alokasi staf untuk promosi, operasi, dan pengelolaan proyek, lakukan diskusi di awal.    Ketika Anda mulai untuk membuka proyek Anda pada open source, sangatlah penting untuk memastikan bahwa proses manajemen Anda memperhatikan kontribusi dan kemampuan dari komunitas disekeliling proyek Anda. Jangan takut untuk melibatkan kontributor yang bukan merupakan karyawan sebagai aspek kunci dalam proyek - terutama jika mereka adalah kontributor yang aktif.  — @captainsafia, “So you wanna open source a project, eh?”  Kontribusi ke proyek lainJika tujuan akhir Anda adalah belajar bagaimana berkolaborasi dengan orang lain atau memahami bagaimana open source bekerja, pertimbangkan untuk berkontribusi pada proyek yang sudah ada. Mulailah dengan proyek yang sudah Anda gunakan dan Anda suka. Berkontribusi pada sebuah proyek bisa semudah memperbaiki kesalahan penulisan atau memperbarui dokumentasi.Jika Anda tidak yakin bagaimana memulai sebagai kontributor, silahkan lihat Panduan Bagaimana Berkontribusi pada Open Source.Merilis proyek open source AndaTidak ada waktu yang sempurna untuk membuka proyek Anda kepada open source. Anda bisa membuat ide Anda, pekerjaan yang sedang dalam pengembangan, atau setelah sekian lama berada dalam lingkungan yang tertutup (closed source) menjadi open source.Secara umum, Anda harus membuka proyek Anda menjadi ketika Anda merasa nyaman ketika orang lain melihat dan memberikan masukan pada pekerjaan Anda.Tidak perduli pada tahap mana Anda memutuskan untuk membuka proyek Anda, setiap proyek sebaiknya menyediakan dokumentasi berikut:  Lisensi open source  README  Panduan berkontribusi  Kode etikSebagai pengelola, komponen-komponen tersebut akan membantu Anda mengkomunikasikan ekspektasi, mengelola kontribusi, dan menjaga hak legal dari setiap orang (termasuk Anda sendiri). Dokumen-dokumen tersebut akan meningkatkan peluang Anda secara signifikan untuk mendapatkan pengalaman yang positif.Jika proyek Anda berada pada GitHub, meletakkan dokumen-dokumen diatas pada direktori induk dengan nama dokumen yang direkomendasikan akan membantu GitHub mengenalinya secara otomatis dan menampilkannya pada pengunjung.Memilih sebuah lisensiSebuah lisensi open source menjamin bahwa orang lain mampu menggunakan, menyalin, memodifikasi, dan berkontribusi kembali pada proyek Anda tanpa adanya masalah. Lisensi juga menjaga dari masalah legalitas. Anda harus menyertakan sebuah lisensi ketika Anda merilis sebuah proyek open source.Pekerjaan hukum bukan sesuatu yang menyenangkan. Berita baiknya adalah Anda bisa menyalin dan menggunakan lisensi yang sudah ada pada repositori Anda. Proses ini hanya membutuhkan waktu satu menit untuk menjaga hasil kerja keras Anda.MIT, Apache 2.0, dan GPLv3 adalah lisensi open source yang paling populer, tetapi terdapat opsi lain yang bisa Anda pilih.Ketika Anda membuat proyek baru pada GitHub, Anda diberikan pilihan untuk memilih sebuah lisensi. Menyertakan sebuah lisensi open source akan membuat proyek GitHub Anda sebagai open source.Jika Anda memiliki pertanyaan lain atau khawatir tentang aspek legalitas tentang mengelola proyek open source, kami punya solusinya.Menulis dokumen READMEREADME berisi lebih dari sekedar penjelasan bagaimana menggunakan proyek Anda. Dokumen ini juga menjelaskan kenapa proyek Anda penting, dan apa yang bisa dilakukan oleh pengguna Anda dengan proyek tersebut.Pada dokumen README, cobalah untuk menjawab pertanyaan berikut:  Apa yang dilakukan proyek ini?  Kenapa proyek ini berguna?  Bagaimana saya memulainya?  Jika saya membutuhkan bantuan, dimana saya bisa mendapatkannya?Anda bisa menggunakan README untuk menjawab pertanyaan lainnya, seperti bagaiman Anda akan menangani kontribusi, apa tujuan akhir dari proyek, dan informasi tentang lisensi. Jika Anda tidak ingin menerima kontribusi, atau proyek Anda belum siap untuk produksi, tuliskan informasi ini.    Dokumentasi yang lebih baik berarti lebih banyak pengguna, lebih sedikit bantuan untuk dukungan ke pengguna, dan lebih banyak kontributor. (…) Ingatlah bahwa pembaca bukanlah Anda. Terdapat orang-orang yang datang pada sebuah proyek yang memiliki pengalaman yang sama sekali berbeda.  — @limedaring, “Writing So Your Words Are Read (video)”  Seringkali, banyak orang menghindari untuk menulis README karena mereka merasa bahwa proyek belum selesai, atau mereka tidak menginginkan adanya kontribusi. Berikut ini adalah berbagai alasan bagus bagi Anda untuk menulis dokumen README.Untuk insipirasi lainnya, Silahkan coba “Membuat README lebih Terbaca” milik @18F atau Template README milik @PurpleBooth untuk menulis README yang lengkap.Ketika Anda menyertakan dokumen README pada direktori induk, GitHub akan secara otomatis menampilkannya pada homepage repositori.Menulis panduan kontribusi AndaSebuah dokumen CONTRIBUTING menjelaskan kepada pengguna tentang bagaimana berpartisipasi pada proyek Anda. Sebagai contoh, Anda mungkin menyertakan informasi tentang:  Bagaimana membuat laporan kesalahan (cobalah menggunakan template laporan masalah dan pull request)  Bagaimana menyarankan sebuah fitur baru  Bagaimana melakukan persiapan lingkungan pengembangan dan melakukan pengujianSelain aspek teknis, dokumen CONTRIBUTING juga merupakan kesempatan untuk mengkomunikasikan harapan Anda untuk kontribusi, misalnya  Jenis kontribusi yang Anda harapkan  Rencana jangka panjang atau visi proyek Anda  Bagaimana kontribusi bisa menghubungi AndaMenggunakan nada yang bersahabat dan menawarkan tawaran yang spesifik untuk kontribusi (misalnya menuliskan dokumentasi, atau membuat halaman web) bisa membuat pendatang merasa nyaman dan diterima serta tertarik untuk berpartisipasi.Sebagai contoh, Active Admin memulai panduan kontribusinya dengan:  Pertama-tama, terima kasih karena Anda mempertimbangkan untuk berpartisipasi pada Active Admin. Orang-orang seperti Anda yang membuat Active Admin menjadi sebuah perangkat yang hebat.Pada fase awal dari proyek Anda, dokumen CONTRIBUTING bisa sangat sederhana. Anda perlu menjelaskan bagaimana melaporkan kesalahan dan kebutuhan teknis (seperti pengujian), atau bagaimana cara berkontribusi.Seiring dengan berjalannya waktu, Anda bisa menambahkan pertanyaan yang paling sering ditanyakan pada dokumen CONTRIBUTING. Menuliskan informasi ini berarti lebih sedikit orang yang akan bertanya pertanyaan yang sama kepada Anda berulang kali.Untuk bantuan tentang penulisan dokumen CONTRIBUTING, silahkan lihat  template panduan berkontribusi milik @nayafia atau “Bagaimana Membangun Dokumen CONTRIBUTING.md” milik @mozilla.Hubungkan dokumen CONTRIBUTING dari README, sehingga lebih banyak orang yang melihatnya. Jika Anda meletakkan dokumen CONTRIBUTING pada repositori proyek, GitHub akan secara otomatis menghubungkan ke dokumen Anda ketika seorang kontributor membuat sebuah laporan masalah atau membuat pull request.Membangun kode etik    Kita semua pernah memiliki pengalaman dimana kita dihadapkan dengan penyalahgunaan, baik sebagai pengelola yang menjelaskan kenapa sesuatu harus dilakukan dengan cara tertentu, atau sebagai pengguna…bertanya sebuah pertanyaan sederhana. (…) Kode etik merupakan dokumen yang mudah untuk dijadikan referensi yang mengindikasikan bahwa tim Anda sangat memperhatikan wacana yang bersifat membangun.  — @mlynch, “Making Open Source a Happier Place”  Akhirnya, sebuah kode etik membantu menentukan aturan perilaku dasar bagi partisipan proyek Anda. Hal ini akan sangat berguna apabila Anda merilis proyek open source untuk sebuah komunitas atau perusahaan. Kode etik memampukan Anda untuk memfasilitasi perilaku yang sehat dan konstruktif, sehingga mengurangi kadar stress Anda sebagai pengelola.Untuk informasi lebih lanjut, silahkan lihat Panduan Kode Etik.Selain untuk mengkomunikasikan bagaimana Anda mengharapkan partisipan Anda untuk berperilaku, kode etik juga pada umumnya menjelaskan kepada siapa ekspektasi ini berlaku, dan ketika hal itu berlaku, apa yang harus dilakukan apabila terjadi pelanggaran.Seperti halnya lisensi open source, terdapat banyak standar untuk kode etik, sehingga Anda tidak perlu menuliskannya sendiri. Contributor Covenant adalah kode etik siap pakai yang digunakan oleh lebih dari 40.000 proyek open source, termasuk Kubernetes, Rails, dan Swift. Tanpa memperhatikan teks yang Anda gunakan, Anda harus selalu siap untuk menjalankan kode etik apabila diperlukan.Salin teks langsung pada dokumen CODE_OF_CONDUCT pada repositori Anda. Letakkan pada direktori induk pada repositori sehingga mudah ditemukan dan hubungkan dari dokumen README.Penamaan dan pencitraan proyek AndaPencitraan lebih dari sekedar logo yang mengkilap atau nama proyek yang mudah menarik. Pencitraan lebih tentang bagaimana Anda membicarakan proyek Anda dan siapa saja yang menjadi target pesan Anda.Memilih nama yang tepatPilihlah sebuah nama yang mudah diingat dan memberikan gambaran tentang apa yang dilakukan oleh proyek. Misalnya:  Sentry aplikasi monitoring untuk pelaporan kerusakan sistem  Thin adalah server web Ruby yang cepat dan sederhanaJika Anda membangun berdasarkan proyek yang sudah ada, menggunakan nama proyek terdahulu sebagai awalan bisa membantu memperjelas apa yang dilakukan proyek Anda (misalnya. node-fetch menghadirkan window.fetch pada Node.js).Perhatikan masalah kejelasan. Bercanda merupakan sesuatu yang menyenangkan, tetapi perlu diingat bahwa beberapa hal mungkin tidak dapat tersampaikan dengan baik pada budaya yang lain atau orang-orang dengan pengalaman yang berbeda dengan Anda. Sebagian dari calon pengguna Anda mungkin merupakan pegawai kantor: jangan sampai Anda membuat mereka tidak nyaman ketika mereka harus menjelaskan proyek Anda pada ruang lingkup pekerjaan mereka!Hindari konflik namaCari proyek open source dengan nama yang mirip, terutama jika Anda menggunakan bahasa atau ekosistem yang sama. Jika nama Anda memiliki kesamaan dengan proyek lain yang populer, Anda bisa membuat bingung pengguna Anda.Jika Anda menginginkan sebuah website, akun Twitter, atau hal lain yang merepresentasikan proyek Anda, pastikan Anda bisa mendapatkan nama yang Anda inginkan. Idealnya, klaim nama-nama tersebut sekarang agar Anda lega, meskipun Anda belum akan menggunakannya sekarang.Pastikan nama proyek Anda tidak melanggar merek dagang. Sebuah perusahaan mungkin meminta Anda untuk menghapus proyek Anda dikemudian hari, atau bahkan mengambil jalur hukum terhadap Anda. Resikonya sangatlah tidak sepadan.Anda bisa melihat Basis data Merek Global WIPO untuk konflik merek dagang. Jika Anda berada pada sebuah perusahaan, ini adalah satu hal dimana tim kuasa hukum Anda bisa membantu.Akhirnya, lakukan pencarian di Google untuk nama proyek Anda. Apakah orang bisa menemukan proyek Anda dengan mudah? Apakah nama lain muncul pada hasil pencarian yang tidak Anda inginkan?Bagaimana Anda menulis (dan membuat kode) bisa mempengaruhi citra Anda juga!Pada siklus hidup proyek Anda, Anda akan banyak menulis:  README, tutorial, dokumen komunitas, merespon terhadap laporan masalah, atau bahkan newsletter dan mailing list.Baik dokumentasi resmi atau email sehari-hari, gaya penulisan Anda merupakan bagian dari citra proyek Anda. Perhatikan bagaimana Anda bisa hadir pada pengguna Anda dan apakah hal itu merupakan pesan yang ingin Anda sampaikan?    Saya berusaha untuk ikut terlibat pada setiap diskusi pada mailing list, dan memberikan contoh panutan, bertindak baik kepada orang-orang, menganggap masalah mereka sebagai sesuatu yang serius, dan berusaha untuk membantu. Setelah beberapa waktu, orang-orang tidak hanya berhenti karena ada masalah, namun juga ikut membantu, dan mereka mengikuti gaya saya.  — @janl on CouchDB, “Sustainable Open Source”  Menggunakan bahasa yang hangat, inklusif (seperti “mereka”, meskipun mengacu pada satu orang) bisa membuat proyek Anda lebih nyaman bagi kontributor baru. Gunakan bahasa sederhana, karena bisa jadi banyak pengguna Anda bukan merupakan pengguna yang menggunakan bahasa Inggris sehari-harinya.Selain bagaimana Anda menuliskan kata-kata, gaya pemrograman Anda juga bisa menjadi bagian dari citra proyek Anda. Angular dan jQuery adalah dua contoh proyek dengan gaya pemrograman dan panduan yang lengkap.Tidaklah penting untuk menuliskan gaya penulisan untuk proyek Anda ketika Anda baru memulainya dan Anda mungkin senang untuk mencoba beberapa gaya pemrograman pada proyek Anda. Tetapi Anda perlu mengantisipasi bagaimana penulisan dan pemrograman Anda bisa memikat orang atau malah membuat orang untuk menghindari proyek Anda. Tahap awal dari proyek Anda adalah kesempatan untuk menentukan arah yang Anda tuju.Daftar checklist pra-rilisSudah siap untuk membuat proyek Anda open source ? Berikut daftar checklist untuk membantu. Anda sudah menyelesaikan semua kotak? Anda sudah siap! Klik”publish” dan tepuklah diri Anda sendiri.Dokumentasi        Project memiliki dokumen LICENSE dengan lisensi open source          Project memiliki dokumentasi dasar (README, CONTRIBUTING, CODE_OF_CONDUCT)          Nama proyek mudah diingat, memberikan ide tentang proyek, dan tidak konflik dengan proyek yang sudah ada atau melanggar merek dagang          Daftar masalah senantiasa baru, dengan masalah terorganisasi dengan baik dan dilabeli  Kode        Project menggunakan konvensi kode yang konsisten dan nama fungsi/metode/variabel yang jelas          Kode memiliki komentar yang lengkap, mendokumentasikan harapan dan kasus khusus          Tidak ada informasi sensitif pada sejarah revisi, laporan masalah, atau pull requests (misalnya kata sandi atau informasi pribadi lainnya)  OrangJika Anda perseorangan:      Anda telah mengunjungi kantor hukum dan/atau membahami hak cipta dan kebijakan open source pada perusahaan Anda (jika Anda merupakan karyawan pada sebuah perusahaan)  Jika Anda merupakan perusahaan atau organisasi:        Anda telah berbicara dengan divisi hukum Anda          Anda memiliki perencanaan pemasaran untuk mengumumkan dan mempromosikan proyek          Seseorang memiliki minat untuk mengelola interaksi komunitas (merespon terhadap laporan masalah, melakukan review, dan menggabungkan pull request)          Minimal terdapat dua orang yang memiliki akses admministratif pada proyek  Anda melakukannya!Selamat atas keberhasilan Anda membuka proyek open source pertama Anda. Tanpa melihat hasil akhirnya, bekerja pada lingkungan publik merupakan anugrah bagi komunitas. Dengan setiap commit, komentar, dan pull request, Anda telah menciptakan peluang bagi Anda sendiri dan orang lain untuk belajar dan berkembang.",
    "url": "/id/starting-a-project/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/id/starting-a-project/\">\n      Memulai Proyek Open Source\n    </a>\n  </h2>\n  <h2 id=\"apa-dan-kenapa-open-source\">“Apa” dan “kenapa” open source</h2>\n\n\n</div>\n"
  },

  
  "/ko/best-practices/": {
    "title": "메인테이너를 위한 모범 사례",
    "content": "What does it mean to be a maintainer?많은 사람들이 사용하는 오픈소스 프로젝트를 유지한다면, 적은 양으로 코딩하고 더 많은 이슈에 대응할 수 있습니다.프로젝트 초기 단계에서 새로운 아이디어를 실험하고 원하는 것을 기반으로 의사 결정을 내리고 있습니다. 프로젝트의 인기가 높아짐에 따라 사용자와 기여자들과 더 잘 일할 수 있습니다.프로젝트를 유지하려면 코드 이상의 것을 요구합니다. 이러한 작업은 예상치 못한 경우가 많지만 성장하는 프로젝트와 마찬가지로 중요합니다. 우리는 진행 문서화에서 시작해서 커뮤니티 활용에 이르기까지 당신의 삶을 편하게 해주는 몇 가지 방법을 모아봤습니다.Documenting your processes글을 작성하는 것은 메인테이너가 할 수있는 가장 중요한 일 중 하나입니다.문서는 자신의 생각을 분명히 할 뿐만 아니라, 다른 사람들이 물어보기도 전에 필요하거나 기대하는 것을 이해하도록 도와줍니다.글을 쓰게되면 무언가 범위에 맞지 않을 때 아무 말도 달지 않게됩니다. 또한 사람들이 쉽게 참여하게 도움을 줍니다. 다만 누가 프로젝트를 읽고 사용하는지 알 수는 없습니다.전체 단락을 사용하지 않더라도, 글 머리 기호라도 적어둔다면 아에 작성하지 않는 것보다는 좋습니다.프로젝트의 비전을 써내려가기먼저 프로젝트의 목표를 써내려갑니다. README에 추가하거나, VISION이라 불리는 별도의 파일을 작성하십시오. 프로젝트 로드맵과 같이 도움이 될 수 있는 다른 인위적인 결과물이 있는 경우, 이를 공개 할 수도 있습니다.명확하고, 문서화된 비전을 가지고 있으면 집중력을 유지하고 다른 기여자로부터 “scope creep”를 피할 수 있습니다.예를 들어, @lord는 프로젝트 비전을 가짐으로써 시간을 보낼 요청을 파악하는 데 도움이 된다는 것을 발견했습니다. 새로운 메인테이너인 그는 Slate에 대한 첫번째 기능 요청을 받았을 때 프로젝트의 범위를 고수하지 않은 것을 후회했습니다.    I fumbled it. I didn’t put in the effort to come up with a complete solution. Instead of an half-assed solution, I wish I had said “I don’t have time for this right now, but I’ll add it to the long term nice-to-have list.”  — @lord, “새로운 오픈소스 메인테이너를 위한 팁”  생각을 소통하기규칙은 신경을 쓸 수록 더 쓰일 수 있습니다. 때로는 다른 사람들의 행동을 감시하거나 모든 재미를 없애는 것처럼 느껴질 수도 있습니다.그러나 공정하게 작성되고 시행되면, 좋은 규칙은 메인테이너에게 힘을 줍니다. 그것들은 하고 싶지 않은 일을 하도록 끌리지 못하게 합니다.프로젝트를 직접 경험하는 대부분의 사람들은 메인테이너가 겪는 상황에 대해 알지 못합니다. 그들은 그것에 대해 일하기 위해 돈을 받는다고 가정할 지도 모릅니다, 특히 그들이 정기적으로 사용하고 의존하는 것들이 대부분입니다. 하지만 메인테이너는 어쩌다 한번에 프로젝트에다가 많은 시간을 할애하지만, 이제는 새로운 직업이나 가족 구성원으로인해 바빠졌습니다.이 모든 것은 완벽하게 괜찮습니다! 다른 사람들이 그것에 대해 알고 있는지 확인하시기 바랍니다.당신의 프로젝트를 아르바이트로 유지하거나 순수하게 자원 봉사로 진행하는 경우, 당신이 가진 시간에 대해 솔직하게 말하십시오. 이것은 프로젝트가 요구하는 시간, 또는 다른 사람들이 당신의 개발에 소비하기를 원하는 시간과 같지 않습니다.다음과 같은 몇 가지 규칙을 적어 두는 것이 좋습니다:  기여를 검토하고 수락하는 방법 (검사가 필요한가요? 이슈 템플릿?)  당신이 수락할 기여 유형 (코드의 특정 부분에 대해서만 도움을 원하십니까?)  후속 조치가 필요한 순간 (ex. “7일 이내에 관리자로부터 응답을 받을 수 있습니다. 그때까지 아무 것도 듣지 못했다면 쓰레드에 핑을 보내세요.”)  프로젝트에 할애하는 시간 (ex. “이 프로젝트에 일주일 중 약 5시간만 할애하고 있습니다.”)Jekyll, CocoaPods, 및 Homebrew는 메인테이너와 기여자를 위한 기본 원칙이 있는 프로젝트의 몇 가지 예시입니다.열린 소통을 유지하기상호 작용을 문서화하는 걸 잊지 마십시오. 가능한 모든 곳에서 프로젝트 공개에 대한 의사 소통을 유지하십시오. 누군가가 개인적으로 연락하여 기능 요청 또는 지원 필요성에 대해 토론하려고하면, 정중하게 메일링 리스트 또는 이슈 트래커와 같은 공개 의사 소통 채널로 안내합니다.다른 메인테이너와 만나거나, 비공개로 중요한 결정을 내릴 경우, 또는 메모를 게시하는 경우에도 마찬가지로, 공개적으로 문서에 기록하십시오.그러면, 커뮤니티에 가입한 사람은 수년간 그 곳에 있었던 사람과 동일한 정보에 접근 할 수 있습니다.Learning to say no당신이 글을 썼습니다. 이상적으로는 모든 사람이 당신의 문서를 읽을 것이지만, 실제로 이 지식이 존재한다는 것을 모르는 다른 사람들에게도 상기시켜야 할 것입니다.그러나 모든 것을 적어둔다면, 규칙을 집행해야 할 상황일때 평범한 상황으로 복귀하는 것에 도움이 됩니다.아니오라고 말하는 것은 재미없지만, “기여가 이 프로젝트의 기준과 일치하지 않습니다.” 는 “전 당신의 기여가 싫어요” 보다 개인적인 느낌이 들었습니다.당신이 메인테이너로서 만날 수 있는 많은 상황에 적용됩니다: 범위에 맞지 않는 기능 요청, 토론을 이탈한 사람, 불필요한 다른 일을 하는 사람들.친근한 대화를 유지하기가장 중요한 장소 중 하나인 No라고 말하면서 이슈와 pull request 대기열을 가져옵니다. 프로젝트 메인테이너로서, 여러분은 받아들이기를 원치않는 제안을 필연적으로 받게됩니다.기여 내용이 프로젝트의 범위를 변경하거나 비전과 일치하지 않을 수 있습니다. 어쩌면 그 아이디어가 좋지만 구현도가 낮을 수 있습니다.이유에 관계없이, 프로젝트 표준에 맞지 않는 기여 내용을 현명하게 처리할 수 있습니다.동의하지 않는 기여를 받는 경우, 첫번째 반응으로는 무시하거나 보지 못했다고 둘러댈 수 있습니다. 이렇게 한다면 다른 사람의 감정에 해를 끼칠 수 있으며 커뮤니티내의 다른 잠재적인 기여자의 능력도 떨어뜨릴 수 있습니다.    The key to handle support for large-scale open source projects is to keep issues moving. Try to avoid having issues stall. If you’re an iOS developer you know how frustrating it can be to submit radars. You might hear back 2 years later, and are told to try again with the latest version of iOS.  — @KrauseFx, “오픈소스 커뮤니티 확장하기”  죄책감을 느끼거나 좋은 사람이 되기위해 원하지 않는 기여는 하지마십시오. 시간이 지남에 귀하의 답변되지 않은 이슈와 PR은 프로젝트에 대한 작업을 훨씬 더 스트레스와 협박으로 느낄 것입니다.수락하고 싶지 않은 기여는 즉시 닫는 것이 좋습니다. 프로젝트에 이미 많은 양의 백로그가 있는 경우, @steveklabnik 는 문제를 효율적으로 분류하는 방법에 대한 제안 사항을 제공합니다.두번째로는, 기여를 무시하면 귀하의 커뮤니티에 부정적인 신호가 보내집니다. 프로젝트에 기여하는 것은 위협적일 수 있습니다. 특히 다른 사람이 처음인 경우에는 더욱 그렇습니다. 기여를 수락하지 않더라도 그 뒤에 있는 사람을 인정하고 관심을 가져 주신 것에 감사하길 바랍니다. 큰 칭찬입니다!기여를 받지 않는다고 가정한 경우에는 이렇게 하십시오:  그들의 기여에 감사해 합니다  가능한 경우 프로젝트의 범위에 맞지 않는 이유를 설명하고 개선을 위한 명확한 제안을 합니다. 친절하고 단호하게 말하십시오.  필요한 경우 관련 문서를 링크겁니다. 수락하고 싶지 않은 것에 대한 반복적인 요청을 발견한 경우, 문서를 반복하여 번복하지 않도록 합시다.  request를 닫습니다응답하는 데 1-2문장 이상 필요하지 않습니다. 예시로, celery의 사용자가 윈도우 관련 오류를 보고 했을때, @berkerpeksag는 이렇게 반응했습니다:아무도 말을 하지않는다고 해도, @jessfraz put it처럼 혼자가 아닙니다:  I’ve talked to maintainers from several different open source projects, Mesos, Kubernetes, Chromium, and they all agree one of the hardest parts of being a maintainer is saying “No” to patches you don’t want.누군가의 기여를 받아들이지 않으려고 죄책감을 느끼지 마십시오. 오픈소스의 첫 규칙은, @shykes 에 따르면: _“아니오는 일시적이며, 예는 영원합니다.”_입니다 다른 사람의 열정에 공감하는 것은 좋은 일이지만 기여를 거절하는 것은 그 뒤에있는 사람을 거절하는 것과 동일하지 않습니다.궁극적으로, 기여가 충분하지 않은 경우, 기여를 수락 할 의무는 없습니다. 사람들이 프로젝트에 기여할 때에는 친절하고 즉각적이어야 하지만, 프로젝트를 더 좋게 만들 것이라고 생각되는 변경 사항만 수락하십시오. 더 자주 아니오라고 말하는 연습을 하면 쉽게 됩니다. 약속합시다.대책 세우기처음에 원치 않는 기여를 줄이려면, 기여 가이드에 기여를 제출하고 수락하는 프로젝트 진행 과정을 설명하십시오.너무 많은 저품질 기여를 받는다면, 이와 같이 기여자들이 미리 약간의 작업을 해줄 것을 요구하십시오:  이슈 또는 PR 템플릿/체크리스트 작성하기  PR을 제출하기 전에 이슈를 열기만약 그들이 규칙에 따르지 않는다면, 즉시 이슈를 닫고 문서를 가리킵니다.이러한 접근 방식이 처음에는 불친절하다고 느낄 수도 있지만, 이 대책은 실제로 서로에게도 좋습니다. 그것은 누군가가 받아 들일 수 없는 pull request에 많은 시간 낭비를 초래할 가능성을 줄여줍니다. 또한 작업 부하를 보다 쉽게 ​​관리할 수 ​​있습니다.    Ideally, explain to them and in a CONTRIBUTING.md file how they can get a better indication in the future on what would or would not be accepted before they begin the work.  — @MikeMcQuaid, “친절한 pull request 닫기”  때로는 아니오라고 말하면 잠재적 기여자가 결정을 뒤집거나 비판할 수 있습니다. 그들의 행동이 적대적으로 된다면, 상황을 완화시키기 위한 조치를 취하십시오. 또는 건설적으로 협업하지 않으려는 경우 커뮤니티 자체에서 제거할 수도 있습니다.멘토십을 포옹하기커뮤니티의 누군가가 프로젝트 표준에 맞지 않는 기여를 정기적으로 제출할 수도 있습니다. 각자 당사자가 거절을 반복해서 거치는 것은 좌절할 수 있습니다.누군가 당신의 프로젝트에 열성적이지만 약간의 수정이 필요하다면 인내심을 가집시다. 그들의 공헌이 프로젝트의 기대에 부합하지 않는 이유를 각 상황에서 분명하게 설명합니다. 발을 젖게하기 위해 _“좋은 첫 버그,”_라고 표시된 이슈와 같이 더 쉽거나 덜 모호한 작업을 가리키도록 하십시오. 시간이 있다면, 첫번째 기여를 통해 멘토링을 고려하거나 멘토를 기꺼이 도울 수 있는 다른 사람을 커뮤니티에서 찾을 수 있습니다.Leverage your community당신은 모든 것을 스스로 할 필요가 없습니다. 프로젝트 공동체가 존재합니다! 적극적으로 참여한 커뮤니티가 없는 경우에도 많은 사용자가 있는 경우, 일하도록 하십시오.작업량을 분할하기피치를 받을 다른 사람을 찾고 있다면 주위에 물어보십시오.새로운 기여자가 반복적으로 기여를 하는 것을 보았을 때, 더 많은 책임을 제공함으로써 자신의 업무로 인정합시다. 원한다면 다른 사람들이 리더십 역할로 성장할 수 있는 방법을 문서화하십시오.@lmccart가 프로젝트 p5.js에서 발견한대로 프로젝트 소유권 공유를 권장하면 자신의 작업량을 크게 줄일 수 있습니다.    I’d been saying, “Yeah, anyone can be involved, you don’t have to have a lot of coding expertise […].” We had people sign up to come [to an event] and that’s when I was really wondering: is this true, what I’ve been saying? There are gonna be 40 people who show up, and it’s not like I can sit with each of them…But people came together, and it just sort of worked. As soon as one person got it, they could teach their neighbor.  —  @lmccart, \"”오픈소스”란 무엇을 의미합니까? p5.js Edition”  프로젝트가 중단되거나 영구히 중단되어야하는 경우, 다른 사람에게 자신을 대신하도록 요청하는 것은 부끄러운 일이 아닙니다.다른 사람들이 그 방향에 열성적이라면, 그들에게 접근을 허용하거나 공식적으로 다른 사람에게 통제 권한을 넘겨주도록 하십시오. 다른 사람이 프로젝트를 포크하고 다른 곳에서 적극적으로 유지 관리하는 경우, 원래 프로젝트의 포크에 연결하는 것이 좋습니다. 많은 사람들이 귀하의 프로젝트가 살아가기를 원합니다!@progrium은 프로젝트의 비전을 문서화한 것으로 밝혀지면서 Dokku가 프로젝트에서 물러 난 후에도 이러한 목표를 달성 할 수 있도록 도왔습니다.  I wrote a wiki page describing what I wanted and why I wanted it. For some reason it came as a surprise to me that the maintainers started moving the project in that direction! Did it happen exactly how I’d do it? Not always. But it still brought the project closer to what I wrote down.다른 사람들이 필요한 솔루션을 구축하게하기잠재적 기여자가 프로젝트에서 해야 할 일에 대해 다른 견해를 가지고 있다면, 그들을 자신의 포크로 작업하도록 부드럽게 격려하고 싶을 수 있습니다.프로젝트 포킹은 나쁜 일이 아닙니다. 프로젝트를 복사하고 수정할 수 있다는 것이 오픈소스에 관한 가장 좋은 것 중 하나입니다. 커뮤니티 회원들이 자신의 포크로 작업하도록 권장하면 프로젝트 비전과 상충하지 않고, 필요한 창의적인 판로를 제공 할 수 있습니다.    I cater to the 80% use case. If you are one of the unicorns, please fork my work. I won’t get offended! My public projects are almost always meant to solve the most common problems; I try to make it easy to go deeper by either forking my work or extending it.  — @geerlingguy, “PR을 닫는 이유”  실제로 대역폭을 구축 할 필요가 없는 솔루션을 원하는 사용자에게도 마찬가지입니다. API 및 사용자 정의 후크를 제공하면 소스를 직접 수정하지 않고도 다른 사람들이 자신의 필요를 충족시킬 수 있습니다. @orta는 CocoaPods용 플러그인이 “가장 흥미로운 아이디어 중 일부”를 이끌어 냈다는 것을 알게 되었습니다  프로젝트가 커지면 메인테이너는 새로운 코드를 어떻게 도입할 것인지 훨씬 보수적으로 판단해야합니다. 당신은 “아니오”라고 말하는 것이 좋지만 많은 사람들이 합법적인 필요를 가지고 있습니다. 따라서 도구가 대신 플랫폼으로 변환됩니다.Bring in the robots다른 사람들이 당신을 도울 수 있는 작업이 있는 것처럼, 인간도 할 일이 없어야합니다. 로봇은 당신의 친구입니다. 그것들을 사용하여 메인테이너로서의 삶을 더 쉽게 만듭니다.코드의 품질을 향상시키는 데 필요한 테스트 및 기타 검사프로젝트를 자동화하는 가장 중요한 방법 중 하나는 테스트를 추가하는 것입니다.테스트는 기여자가 아무 것도 망가트리지 않을 것이라고 확신하는 데 도움이 됩니다. 또한 기여를 신속하게 검토하고 수락하기가 더 쉽습니다. 반응이 좋을수록 커뮤니티의 참여도가 높아집니다.들어오는 모든 기여에 대해 실행할 자동 테스트를 설정하고, 기여자가 테스트를 로컬에서 쉽게 실행할 수 있도록 하십시오. 제출하기 전에 모든 코드가 테스트에 합격해야합니다. 모든 제출물에 대해 최소한의 품질 기준을 설정하는 데 도움이됩니다. GitHub의 Required status checks는 테스트 통과없이 변경 사항이 병합되지 않도록 도와줍니다.만약 테스트를 추가한다면, 그것들이 CONTRIBUTING 파일에 어떻게 작동하는지 설명합시다.    I believe that tests are necessary for all code that people work on. If the code was fully and perfectly correct, it wouldn’t need changes – we only write code when something is wrong, whether that’s “It crashes” or “It lacks such-and-such a feature”. And regardless of the changes you’re making, tests are essential for catching any regressions you might accidentally introduce.  — @edunham, “Rust’의 커뮤니티 자동화”  자동적인 기본 관리 작업 도구를 사용하기인기있는 프로젝트를 유지하는 것에 대한 좋은 소식은 다른 메인테이너가 비슷한 문제에 직면해 있고, 그에 대한 해결책을 마련한다는 것입니다.유지 보수 작업의 일부 측면을 자동화하는 데 도움이되는 다양한 도구가 있습니다. 약간의 예시입니다:  semantic-release 릴리즈를 자동화하기  mention-bot pull requests를 위한 잠재적 검토자 언급하기  Danger 코드 리뷰 자동화를 도와주기버그 보고서 및 기타 일반적인 공헌을 위해 GitHub는 이슈 템플릿과 Pull Request 템플릿를 제공합니다, 귀하가 받을 수 있는 커뮤니케이션을 합리화하기 위해 만들 수 있습니다. 이메일 필터를 설정하여 이메일 알림을 관리 할 수도 있습니다.좀 더 진보적인 스타일을 원한다면, 스타일 가이드와 linter가 프로젝트 기여를 표준화하고 검토하고 받아들이기가 쉬워질 수 있습니다.그러나, 표준이 너무 복잡하면, 기여에 대한 장벽이 높아질 수 있습니다. 모든 사람의 삶을 편하게 하기위한 규칙만 추가하고 있는지 확인하십시오.어떤 도구를 사용해야하는지 잘 모르는 경우 다른 인기있는 프로젝트, 특히 같은 생태계에 있는 프로젝트를 살펴보십시오. 예를 들어, 다른 Node 모듈에 대한 기여 진행과정은 어떻게됩니까? 유사한 도구와 접근 방식을 사용하면 진행과정은 대상 기여자에게 더 익숙하게 됩니다.It’s okay to hit pause오픈소스 작업은 한 때 기쁨을 가져다주었습니다만. 어쩌면 이제는 회피하거나 죄책감을 느낄 수 있습니다.아마도 당신은 이 프로젝트에 대해 생각할 때, 위압적이거나 두려움에 시달리고 있습니다. 그리고 그 동안 이슈와 pull request가 늘어납니다.번아웃은 특히 메인테이너 간 오픈소스 작업에서 실제로 발생하는 보편적인 문제입니다. 메인테이너로서 여러분의 행복은 모든 오픈소스 프로젝트의 생존을 위한 협상을 할 수 없는 요구 사항입니다.아무 말도하지 말고 쉬쉽시오! 휴가를 위해 번아웃될 때까지 기다릴 필요가 없습니다.파이썬 핵심 개발자인 @brettcannon은 14년간 OSS 자원 봉사를 한 후 1개월간의 휴가를 하기로 결정했습니다.다른 유형의 일과 마찬가지로 정기적인 휴식을 취하면 일에 대해 새롭고, 행복하며, 짜릿함을 유지할 수 있습니다.    In maintaining WP-CLI, I’ve discovered I need to make myself happy first, and set clear boundaries on my involvement. The best balance I’ve found is 2-5 hours per week, as a part of my normal work schedule. This keeps my involvement a passion, and from feeling too much like work. Because I prioritize the issues I’m working on, I can make regular progress on what I think is most important.  — @danielbachhuber, “조의를 표합니다, 당신은 지금 인기있는 오픈소스 프로젝트의 메인테이너입니다.”  때때로, 모든 사람들이 당신을 필요로 할 때 오픈소스 작업에서 휴식을 취하는 것이 어려울 수 있습니다. 사람들은 심지어 당신이 발걸음을 딛고 죄책감을 갖도록하려고 할 수도 있습니다.프로젝트를 떠나려는 동안 사용자와 커뮤니티에 대한 지원을 찾으려면 최선을 다하십시오. 필요한 지원을 찾을 수 없으면 어쨌든 휴식을 취하십시오. 사용할 수 없을 때, 반드시 의사 소통을 해야하므로 응답성이 부족하게하여 사람들에게 혼동을 주지 않도록하십시오.휴식을 취하는 것은 방학기간이상 적용됩니다. 주말이나 근무 시간 중에 오픈소스 작업을 하고싶지 않다면, 그 계획을 다른 사람들에게 알려줌으로써 그들은 당신을 귀찮게하지 않을 것입니다.Take care of yourself first!인기있는 프로젝트를 유지하려면 성장 초기 단계와는 다른 기술이 필요하지만 그다지 보람이 없습니다. 메인테이너로서, 소수의 사람들이 경험할 수 있는 수준에서 리더십과 개인 기술을 연습하게됩니다. 관리가 항상 쉬운 것은 아니지만, 명확한 경계를 설정하고 자신이 편안하게 느끼는 것을 취하는 것만으로도 행복하고 생기넘치며 생산적으로 머물 수 있습니다.",
    "url": "/ko/best-practices/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/ko/best-practices/\">\n      메인테이너를 위한 모범 사례\n    </a>\n  </h2>\n  <h2 id=\"what-does-it-mean-to-be-a-maintainer\">What does it mean to be a maintainer?</h2>\n\n\n</div>\n"
  },

  
  "/ko/building-community/": {
    "title": "환영하는 커뮤니티 구축",
    "content": "Setting your project up for success프로젝트를 시작하고, 단어를 전파하면, 사람들이 그것을 확인하고 있습니다. 굉장합니다! 자, 어떻게 그들을 주변에 붙이게 할까요?환영하는 커뮤니티는 프로젝트의 미래와 평판에 대한 투자입니다. 프로젝트가 처음으로 기여한 것을 보기 시작한 경우, 초반 참여자에게 긍정적인 경험을 제공하고, 그들이 계속해서 다시 돌아올 수 있도록 하십시오.사람들이 환영받는다고 느끼게하기프로젝트 커뮤니티에 대해 생각하는 한 가지 방법은 @MikeMcQuaid는 contributor funnel라고 언급했습니다:커뮤니티를 구축하면서 깔때기의 맨 위에 있는 누군가(잠재 사용자)가 이론적으로 맨 아래(활동중인 메인테이너)로 나아갈 수있는 방법을 생각해보십시오. 목표는 기여자 환경의 각 단계에서 마찰을 줄이는 것입니다. 사람들이 쉽게 이를 이겨낸다면, 더 많은 일을 하도록 동기 부여를 느낄 것입니다.문서화로 시작하기:  프로젝트를 쉽게 사용할 수 있도록하십시오. 친숙한 README와 명확한 코드 예제를 사용한다면 프로젝트에 착수한 모든 사람이 쉽게 시작할 수 있습니다.  기여 방법을 분명히 설명하십시오., CONTRIBUTING 파일를 사용하고 이슈를 최신 상태로 유지하시기 바랍니다.깃허브의 2017 오픈소스 설문에 따르면 불완전하거나 혼란스러운 문서가 오픈소스 사용자에게 가장 큰 문제임이 드러났습니다. 좋은 문서는 사람들이 프로젝트와 상호 작용하도록 유도합니다. 결국 누군가가 이슈를 열거나 pull request를 진행합니다. 이러한 상호 작용을 통해 유입 경로로 이동할 수 있습니다.  누군가 새로운 프로젝트를 시작했을 때 관심을 가져주셔서 감사합니다! 누군가가 돌아오고 싶지 않게 만드는 것은 부정적인 경험 하나로도 충분합니다.  즉각 반응합니다. 한달동안 이슈에 답변하지 않으면, 프로젝트에 대해 이미 잊어버렸을 가능성이 있습니다.  받아들일 수 있는 기여 유형에 대해 개방적이어야합니다. 많은 기여자는 버그 신고 또는 작은 수정으로 시작합니다. 프로젝트에 기여할 수 있는 많은 방법이 있습니다. 사람들이 어떻게 도와주고 싶어하는지 거들어주십시오.  당신이 동의하지 않는 기여가 있다면, 그들에게 아이디어에 대해 감사해하고, 프로젝트의 범위에 맞지 않는 이유를 설명하며, 관련 문서를 링크하면됩니다.    Contributing to open source is easier for some than others. There’s a lot of fear of being yelled at for not doing something right or just not fitting in. (…) By giving contributors a place to contribute with very low technical proficiency (documentation, web content markdown, etc) you can greatly reduce those concerns.  — @mikeal, “평범한 오픈소스를 기반으로하는 기여자 키우기”  오픈소스 제공자의 대다수는 “임시 기여자”입니다. 때때로 프로젝트에만 기여하는 사람들입니다. 캐주얼 기여자는 프로젝트 진행 속도를 최대로 끌어 올릴 시간이 없을 수도 있기 때문에, 당신의 일은 그들이 기여하기 쉽게 만드는 것입니다.다른 참여자를 격려하는 것은 자신에게도 투자입니다. 가장 열렬한 팬에게 흥분을 줄 수있는 힘을 실어 줄 때, 모든 것을 스스로 할 수있는 부담이 줄어 듭니다.모든 곳에 문서화하기    Have you ever been to a (tech-) event where you didn’t know anyone, but everyone else seemed to stand in groups and chat like old friends? (…) Now imagine you want to contribute to an open source project, but you don’t see why or how this is happening.  — @janl, “지속가능한 오픈소스”  새로운 프로젝트를 시작하면, 작업을 비공개로 유지하는 것이 자연스럽게 느껴질 수 있습니다. 그러나 오픈소스 프로젝트는 공개적으로 프로세스를 문서화할 때 번창합니다.당신이 일을 적을 때, 더 많은 사람들이 모든 단계에서 참여할 수 있습니다. 자신이 필요로 하지 않는 것에 대해서 도움을 받을 수도 있습니다.무언가를 쓰는 것은 기술 문서 이상의 것을 의미합니다. 뭔가를 쓰거나 프로젝트에 대해 개인적으로 토론할 충동을 느낄 때마다, 공개할 수 있는지 스스로에게 자문 해보십시오.프로젝트의 로드맵, 찾고있는 기여 유형, 기여 검토 방법 또는 특정 결정을 한 이유에 대해 투명하게 공개하십시오.여러 사용자가 동일한 문제를 겪고있는 경우, README에 답변을 문서화하십시오.회의의 경우, 관련 이슈에 메모나 테이크아웃을 게시하는 것을 고려하십시오. 이 투명성 수준에서 얻을 수있는 피드백은 당신을 놀라게 할 수 있습니다.모든 것을 문서화하는 것은 당신이 하는 일에도 적용됩니다. 프로젝트에 대한 실질적인 업데이트를 진행중인 경우, pull request에 넣고 진행중인 작업(WIP)으로 표시합니다. 그렇게하면 다른 사람들이 조기에 프로세스에 참여할 수 있습니다.반응하기당신의 프로젝트를 홍보하는 것처럼, 사람들은 당신을 위해 의견을 갖습니다. 그들은 어떻게 일을하는지, 시작하는 데 도움이 필요하다는 것에 대해 질문을 할 수 있습니다.누군가가 이슈를 제기하거나, pull request를 제출하거나, 프로젝트에 관한 질문을 하면 좋게 반응하십시오. 신속하게 대처할 때, 사람들은 대화의 일부에 참여했다는 기분을 느낄 것이며, 더 적극적으로 참여할 것입니다.요청을 즉시 검토할 수 없더라도 조기에 이를 인정하면 참여를 늘리는 데 도움이됩니다. @tdreyno가 Middleman의 pull request에 응답 한 방법은 다음과 같습니다:48시간 내에 코드 리뷰를 받은 기여자들이 훨씬 더 높은 수익률과 반복 기여도를 보였습니다는 것을 모질라 스터디가 발견했습니다.스택 오버플로우, 트위터 또는 레딧과 같은 인터넷상의 다른 장소에서도 프로젝트에 대한 토의가 발생할 수 있습니다. 이러한 장소중 일부에서 알림을 설정하여 누군가가 프로젝트를 언급할 때 알림을 받을 수 있습니다.커뮤니티에 모일 곳을 제공하기커뮤니티에 모일 수 있는 이유는 두 가지입니다.첫번째 이유는 그들을 위한 것입니다. 사람들이 서로를 알게 도와주세요. 공통 관심사를 가진 사람들은 필연적으로 그것에 대해 이야기 할 곳을 원할 것입니다. 커뮤니케이션이 공개되고 접근이 용이할 때, 누구나 과거 기록을 읽어 신속하게 참여하고 참여할 수 있습니다.두번째 이유는 당신을 위한 것입니다. 사람들에게 프로젝트에 관해 이야기 할 수 있는 공공장소를 제공하지 않으면 직접 연락을 취할 것입니다. 처음에는 개인 메시지에 “단지 한 번” 응답하는 것만큼 쉬운 것처럼 보일 수 있습니다. 그러나 시간이 지남에 따라 프로젝트가 대중화되면 특히 체력이 고갈될 것입니다. 개인적으로 프로젝트에 대한 사람들과 소통하려는 유혹에 현혹되지 마십시오. 대신 지정된 공개 채널로 안내하십시오.공개적인 의사소통은 사람들에게 직접 이메일을 보내거나 블로그에 댓글을 다는 대신 문제를 열도록 지시하는 것처럼 간단할 수 있습니다. 또한 메일링 리스트를 설정하거나 Twitter 계정, 슬랙 또는 IRC채널을 만들어 사람들이 프로젝트에 관해 이야기할 수 있습니다. 또는 위의 모든 것을 시도하십시오!Kubernetes kops은 커뮤니티 회원들을 돕기 위해 격주로 근무 시간을 따로 지정합니다:  Kops는 또한 격주로 커뮤니티에 도움과 안내를 제공하기 위해 시간을 마련했습니다. Kops 메인테이너는 신규 이민자와의 협력, 홍보 및 새로운 기능 토론에 전념한 시간을 별도로 마련하기로 동의했습니다.공공 커뮤니케이션에 대한 주목할만한 예외로는: 1) 보안 문제와 2) 민감한 행동 규범 위반이 있습니다. 사람들이 이러한 문제를 개인적으로 보고할 수 있는 방법을 항상 마련해야합니다. 개인 이메일을 사용하지 않으려면 전용 이메일 주소를 설정하십시오.Growing your community커뮤니티는 매우 강력합니다. 그 힘은 어떻게 사용하는지에 따라 축복이나 저주가 될 수 있습니다. 프로젝트 공동체가 성장함에 따라, 그것이 파괴가 아닌 건설의 힘이 될 수 있도록 돕는 방법이 있습니다.Don’t tolerate bad actors모든 인기있는 프로젝트는 필연적으로 커뮤니티를 돕기보다는, 해를 입는 사람들도 끌어 들일 것입니다. 그들은 불필요한 논쟁을 시작하거나, 사소한 기능을 말다툼하거나, 다른 사람들을 괴롭힐 수 있습니다.이러한 유형의 사람들에 대한 무관용 정책을 채택하기 위해 최선을 다하십시오. 선택하지 않는다면, 부정적인 사람들이 커뮤니티의 다른 사람들을 불편하게 만듭니다. 그들은 심지어 떠날지도 모릅니다.    The truth is that having a supportive community is key. I’d never be able to do this work without the help of my colleagues, friendly internet strangers, and chatty IRC channels. (…) Don’t settle for less. Don’t settle for assholes.  — @karissa, “FOSS 프로젝트를 어떻게 실행하는가”  프로젝트의 사소한 측면에 대한 정기적인 토의는 중요한 작업에 집중하는 것을 포함하여, 다른 사람을 혼란스럽게합니다. 프로젝트에 도착한 새로운 사람들은 이러한 대화를 보고 참여하기를 원하지 않을 수 있습니다.프로젝트에서 부정적인 행동이 발생하면, 공개적으로 말합니다. 친절하지만 확고한 어조로 왜 그들의 행동이 용납되지 않는지 설명합니다. 문제가 지속되면, 떠날 것을 요청해야 할 수도 있습니다. 행동 규범은 이 대화를 위해 건설적인 가이드가 될겁니다.장소에 있는 기여자를 만나기훌륭한 문서는 커뮤니티가 성장함에 따라 중요해질 것입니다. 프로젝트에 익숙하지 않은 캐주얼 기여자는, 필요한 컨텍스트를 빨리 얻기 위해 문서를 읽습니다.CONTRIBUTING 파일에서 새 참여자에게 시작 방법을 명시하십시오. 이러한 목적으로 전용 섹션을 만들고 싶을 수도 있습니다. Django를 예로 들어보면, 새로운 참여자를 환영 할 수 있는 특별 방문 페이지가 있습니다.이슈 대기열에서, 기여자의 다른 유형에 적합한 버그 라벨을 붙이십시오: 예를 들어, “first timers only”, “good first issue”, 혹은 _“documentation”_이 있습니다. 이 라벨들은프로젝트에 익숙하지 않은 사용자가 문제를 신속하게 스캔하고 시작하기가 쉽습니다.마지막으로, 문서를 사용하여 사람들이 모든 단계에서 환영받는다고 느끼게 하십시오.프로젝트에 도착한 대부분의 사람들과 결코 상호 작용하지 않습니다. 누군가가 협박을 당하거나 어디에서 시작해야할지 모르기 때문에 당신이 받지 못한 기여가 있을 수 있습니다. 몇 가지 종류의 단어조차도 누군가가 귀하의 프로젝트에서 좌절감에서 벗어나지 못하게합니다.예시로, 여기 Rubinius가 기여 가이드를 시작하는 방법은 다음과 같습니다:  Rubinius를 사용해 주셔서 감사드립니다. 이 프로젝트는 사랑의 노동이며, 버그를 포착하고 성능을 개선하며, 문서화에 도움이 되는 모든 사용자에게 감사드립니다. 모든 기여는 의미가 있으므로, 참여해 주셔서 감사합니다. 말하지면, 우리가 귀하의 문제를 성공적으로 해결할 수 있도록 따라야 할 몇 가지 지침이 있습니다.Share ownership of your project    Your leaders will have different opinions, as all healthy communities should! However, you need to take steps to ensure the loudest voice doesn’t always win by tiring people out, and that less prominent and minority voices are heard.  — @sarahsharp, “좋은 커뮤니티는 어떻게 만듭니까?”  사람들은 소유권을 느낄 때 프로젝트에 기여하게 되어 기쁩니다. 그렇다고 해서 프로젝트의 비전을 뒤집거나 원하지 않는 기여를 받아 들일 필요가 있다는 것을 의미하지는 않습니다. 그러나 당신이 다른 사람에게 더 많은 것을 줄수록, 더 많이 붙어있게됩니다.가능한 커뮤니티와 소유권을 공유하는 방법을 찾을 수 있는지 확인하십시오. 다음은 몇 가지 아이디어입니다:  쉬운(중요하지 않은) 버그를 수정하는 것을 방지하는 대신, 그것들로 새로운 기부자를 모집할 기회로 사용하거나, 기여하고자 하는 사람을 멘토링하십시오. 초기에는 부자연스럽게 보일 수 있지만, 시간이 지남에 따라 투자가 이루어집니다. 예시로, @michaeljoseph가 기여자에게 직접 아래의 Cookiecutter 이슈에 대한 pull request을 제출하도록 요청했습니다.      프로젝트에 기여한 사람(예를 들어, Sinatra)을 모두 나열하는 프로젝트의 CONTRIBUTORS 혹은 AUTHORS 파일을 시작하십시오.        만약 상당한 규모의 커뮤니티가 있다면, 기여자들에게 감사하는 뉴스 레터를 보내거나 블로그 포스트를 작성하십시오. Rust의 This Week in Rust와 Hoodie의 Shoutouts는 두개의 좋은 예시입니다.        모든 참여자에게 커밋 접근 권한을 부여하십시오. @felixge는 이것이 사람들로 하여금 패치를 작성하는 것에 더 흥분하도록 만들었고, 잠시동안 일하지 않은 프로젝트에 대한 새로운 메인테이너를 발견했습니다.        만약 프로젝트가 깃허브에 있는 경우, .프로젝트를 개인 계정에서 조직으로 옮기고 하나 이상의 백업 메인테이너를 추가하십시오. 조직에서는 외부 공동 작업자와 함께 프로젝트를 보다 쉽게 ​​작업 할 수 있습니다.  실제로 대부분의 프로젝트는 대부분의 작업을 수행하는 1 ~ 2명의 메인테이너만 있습니다. 프로젝트가 커지고, 커뮤니티가 커질수록 쉽게 도움을 얻을 수 있습니다.전화를 받는 사람을 항상 찾지는 못하더라도, 신호를 내보내는 것은 다른 사람들이 들어올 확률을 높입니다. 그리고 일찍 시작할수록 더 빨리 사람들이 도울 수 있습니다.    [It’s in your] best interest to recruit contributors who enjoy and who are capable of doing the things that you are not. Do you enjoy coding, but not answering issues? Then identify those individuals in your community who do and let them have it.  — @gr2m, “환영하는 커뮤니티”  Resolving conflicts프로젝트의 초기 단계에서, 중요한 결정을 내리는 것은 쉽습니다. 당신이 무언가를 하고 싶을 때, 그것을 하도록합니다.프로젝트가 인기화되면서, 더 많은 사람들이 의사 결정에 관심을 가질 것입니다. 기여자가 큰 커뮤니티에 없더라도, 프로젝트에 많은 사용자가 있는 경우 의사 결정에 중점을 두거나 자신의 문제를 제기하는 사람들을 찾을 수 있습니다.대부분, 친근하고 정중한 공동체를 육성하고, 공개적으로 프로세스를 문서화한 경우, 커뮤니티는 해결책을 찾아야합니다. 그러나 때로는 문제를 해결하기가 더 어려워집니다.친절에 대한 기준 설정하기귀하의 커뮤니티가 어려운 이슈로 어려움을 겪을 때, 기분이 좋아질 수 있습니다. 사람들은 화가 나거나 좌절감을 느껴 다른 사람이나 당신이 다른 사람에게 행복을 가져갈 수 있습니다.메인테이너로서의 당신의 임무는 이러한 상황이 악화되는 것을 막는 것입니다. 주제에 대해 강한 의견을 갖고 있다고해도, 시합에 뛰어 들고 의견을 피하는 대신 메인테이너 또는 진행자의 입장을 취하십시오. 누군가가 불친절하거나 대화를 독점한다면, 토론을 시민적이고 생산적으로 유지하기 위해 즉시 행동하십시오.    As a project maintainer, it’s extremely important to be respectful to your contributors. They often take what you say very personally.  — @kennethreitz, “정성을 들이거나 당신의 길로 가기”  다른 사람들은 당신에게 인도를 구합니다. 좋은 모범을 보입니다. 여전히 실망, 불행 또는 염려를 표현할 수 있지만 침착하게 행동하십시오.시원하게 유지하는 것은 쉽지 않지만, 리더십을 입증하면 커뮤니티의 건강이 향상됩니다. 인터넷에게 감사합니다.README를 헌법으로 다루기귀하의 README는 일련의 지시 사항 이상입니다. 또한 목표, 제품 비전 및 로드맵에 대해 이야기 할 수 있는 장소이기도 합니다. 사람들이 특정 기능의 장점에 대해 토론하는 데 지나치게 집중한다면, README를 다시 읽고 프로젝트의 더 높은 비전에 대해 이야기하는 것이 도움이 될 수 있습니다. README에 초점을 맞추면 대화를 비 개인화하므로 건설적인 토론을 할 수 있습니다.목적지가 아닌, 여행에 집중하기일부 프로젝트는 주요 결정을 내리기 위해 투표 프로세스를 사용합니다. 언뜻보기에 합당한 반면, 투표는 서로의 의견을 경청하고 다루기보다 “대답”을 얻는 것을 강조합니다.투표는 정치적으로 진행될 수 있으며, 커뮤니티 멤버들은 서로에게 호의를 베풀거나 특정 방식으로 투표하도록 압박을 느끼고 있습니다. 모든 사람이 투표를 하든, 다수가 침묵하든간에, 또는 사용자가 커뮤니티에서 투표를 하지 못했거나 투표를 모르는 사용자가 발생할겁니다.때로는, 투표는 필요한 동점자입니다. 그러나 합의가 아닌 당신이 할 수 있는만큼 “consensus seeking”을 강조합니다.합의를 추구하는 과정에서, 커뮤니티 구성원들은 그들이 적절하게 의견을 들을 때까지 주요 관심사에 대해 논의합니다. 사소한 우려가 남아있을 때, 커뮤니티는 앞으로 나아갑니다. “Consensus seeking”는 커뮤니티가 완벽한 대답에 도달하지 못할 수도 있음을 인정합니다. 대신 듣기와 토론의 우선 순위를 정합니다.    Part of the reason why a voting system doesn’t exist for Atom Issues is because the Atom team isn’t going to follow a voting system in all cases. Sometimes we have to choose what we feel is right even if it is unpopular. (…) What I can offer and pledge to do…is that it is my job to listen to the community.  — @lee-dohm on Atom의 의사 결정 과정  실제로 프로젝트 메인테이너로서, 합의 과정을 추구하지 않더라도 사람들이 듣고 있다는 사실을 아는 것이 중요합니다. 다른 사람들이 느끼는 것을 느끼게하고, 자신의 우려를 해결하기 위해 노력하는 것은 민감한 상황을 확산시키는 데 많은 도움이됩니다. 그런 다음, 당신의 말을 행동으로 후속 조치하십시오.결단을 내리기 위해 서두르지 마십시오. 모든 사람이 의견을 듣고 모든 정보가 공개되기 전에 공개되도록 해야합니다.대화는 행동에 초점을 맞추기토론은 중요하지만, 생산적 대화와 비생산적 대화의 차이점이 있습니다.그것이 적극적으로 결의안을 향해 움직이는 한 토론을 장려하십시오. 대화가 심해지거나 화제가 되는 것이 확실하다면, 잽이 개인적으로 달라 지거나, 사람들이 사소한 세부 사항에 대해 애매한 말을 하고 있습니다.이러한 대화를 계속하도록 허용하는 것은 당면 문제에 좋지 않을 뿐만 아니라 커뮤니티의 건강에도 좋지 않습니다. 이러한 유형의 대화가 허용되거나 심지어 권장된다는 메시지를 보내고, 사람들이 향후 문제를 제기하거나 해결하지 못하도록 막을 수 있습니다.당신이나 다른 사람들이 만든 모든 요점으로, 자신에게 _“이것이 우리를 어떻게 결의안에 더 가까이 가게 할 수 있습니까?”_라고 물어봅니다.대화가 풀리기 시작하면, 대화에 재집중하고자 _“다음 단계는 무엇입니까?”_라고 그룹에 요청하십시오.대화가 명확하게 어디로도 가지 않는 경우, 명확한 조치가 취해지지 않았거나 적절한 조치가 이미 취해져서, 문제를 종결하며 이유를 설명합니다.    Guiding a thread toward usefulness without being pushy is an art. It won’t work to simply admonish people to stop wasting their time, or to ask them not to post unless they have something constructive to say. (…) Instead, you have to suggest conditions for further progress: give people a route, a path to follow that leads to the results you want, yet without sounding like you’re dictating conduct.  — @kfogel, OSS 생성하기  현명하게 전투를 선택하기상황이 중요합니다. 토론에 참여한 사람과 그들이 커뮤니티의 나머지 부분을 대표하는 방법을 고려하십시오.커뮤니티의 모든 사람들이 이 문제에 대해 화가 나거나, 심지어 이 이슈에 관여 했습니까? 또는 트러블메이커입니까? 적극적인 목소리가 아닌 조용한 커뮤니티 회원을 고려하는 것을 잊지 마십시오.이 문제가 커뮤니티의 광범위한 요구를 반영하지 않는다면, 소수의 사람들의 우려를 인정할 필요가 있습니다. 명확한 해결 방법이 없는 반복되는 문제인 경우, 주제에 대한 이전 토론을 지정하고 스레드를 닫습니다.커뮤니티 동점자 식별하기좋은 태도와 명확한 의사 전달을 통해, 가장 어려운 상황을 해결할 수 있습니다. 그러나 생산적인 대화에서 조차, 진행 방법에 대한 견해 차이가 있을 수 있습니다. 이러한 경우에는, 동점자 역할을 할 수 있는 개인 또는 그룹을 식별하십시오.tiebreaker는 프로젝트의 주요 메인테이너가 될 수도 있고, 투표를 기반으로 결정을 내릴 수 있는 소규모 그룹일 수도 있습니다. 이상적으로, 당신은 tiebreaker와 관련 프로세스를 GOVERNANCE 파일에서 식별하여 사용해야합니다.당신의 tiebreaker는 최후의 수단이어야합니다. 분열적인 이슈는 커뮤니티가 성장하고 배울 수있는 기회입니다. 이러한 기회를 포용하고 협업 프로세스를 사용하여 가능하면 해결 방법으로 이동하십시오.Community is the ❤️ of open source건강하고, 번영하는 커뮤니티는 매주 수천 시간을 오픈소스에 쏟아 붓고 있습니다. 많은 기여자가 오픈소스에서 일하는 이유 - 또는 일하지 않는 이유 - 를 다른 사람들에게 지적합니다. 그 힘을 건설적인 방법으로 활용하는 방법을 배우면, 잊지 못할 오픈소스 경험이 있는 누군가를 도울 수 있습니다.",
    "url": "/ko/building-community/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/ko/building-community/\">\n      환영하는 커뮤니티 구축\n    </a>\n  </h2>\n  <h2 id=\"setting-your-project-up-for-success\">Setting your project up for success</h2>\n\n\n</div>\n"
  },

  
  "/ko/code-of-conduct/": {
    "title": "귀하의 행동강령",
    "content": "Why do I need a code of conduct?행동강령은 프로젝트 참가자의 행동에 대한 기대치를 설정하는 문서입니다. 행동강령을 채택하고, 시행하면 커뮤니티에 긍정적인 사회적 분위기를 조성하는데 도움이 될 수 있습니다.행동강령은 참가자뿐만 아니라, 자신을 보호하는 데 도움이 됩니다. 프로젝트를 유지하다 보면, 다른 참가자의 비생산적인 태도로 인해 시간이 지남에 따라 업무가 없어지거나 불편해질 수 있습니다.행동강령은 건강하고, 건설적인 커뮤니티 행동을 촉진할 수 있도록 해줍니다. 능동적으로 행동하면 자신이나 다른 사람들이 프로젝트에 피로를 느끼게 될 가능성을 낮추고, 누군가가 동의하지 않을 때 조치를 취할 수 있도록 도와줍니다.Establishing a code of conduct가능한 빨리 행동강령을 수립하십시오: 이상적으로, 처음 프로젝트를 만들 때입니다.귀하의 기대에 대한 의사 소통 이외에도, 행동강령은 다음을 설명합니다:  행동강령이 효력을 발생하는 곳 (이슈 및 pull requests, 또는 이벤트와 같은 커뮤니티 활동에만 필요합니까?)  행동강령이 누구에게 적용되는지 (커뮤니티 맴버와 메인테이너, 하지만 스폰서는 어떻게?)  누군가가 행동강령을 위반하면 어떻게되는가  누군가가 위반 사례를 신고 할 수 있는 방법가능한 모든 곳에서 이전 기술을 사용하십시오. 기여자 규약은 Kubernetes, Rails 및 Swift를 포함하여 40,000 개 이상의 오픈소스 프로젝트에서 사용되는 행동강령입니다.Django 행동강령과 Citizen 행동강령은 두가지 훌륭한 행동강령입니다.프로젝트의 최상단 디렉토리에 CODE_OF_CONDUCT 파일을 놓고 CONTRIBUTING 또는 README 파일에서 링크하여 커뮤니티에 표시되게 하십시오.Deciding how you’ll enforce your code of conduct  A code of conduct that isn’t (or can’t be) enforced is worse than no code of conduct at all: it sends the message that the values in the code of conduct aren’t actually important or respected in your community.  — Ada 발의  위반이 발생하기 전에 귀하의 행동강령이 어떻게 시행되는지 설명해야합니다. 이렇게해야 할 몇 가지 이유가 있습니다:      필요한 때에 행동을 취하는 것에 대해 진지하다는 것을 보여줍니다.        커뮤니티는 불만 사항이 실제로 검토 될 것이라는 것에 확신합니다.        검토 진행과정이 공정하고 투명하다는 사실을 커뮤니티에 확신시켜 줄겁니다.  행동강령을 보고하고 누가 그 보고서를 받았는지 설명하기 위해 사람들에게 사적인 (이메일 주소같은) 방법을 제공해야합니다. 메인테이너, 그룹 메인테이너 또는 행동강령 그룹이 될 수 있습니다.누군가 그 보고서를 받는 사람에 대한 위반 사항을 보고하기를 원할 수도 있다는 것을 잊지 마십시오. 이 경우, 위반 사항을 다른 사람에게 보고 할 수있는 옵션을 제공하십시오. 예시로, @ctb와 @mr-c는 그 프로젝트에 설명하고, khmer하고 있습니다:  학대, 괴롭힘 또는 기타 용납 될 수없는 행동의 사례는 C.kidman Brown과 Michael R. Crusoe에게만 보내지는 khmer-project@idyll.org 로 이메일을 보내서 신고할 수 있습니다. 두 가지 중 하나와 관련된 문제를 신고하려면  BEACON 행동 과학 연구 센터 (NSF Center for Science and Technology)의 다양성 책임자 (Diversity Director)인 Judi Brown Clarke 박사에게 이메일을 보내 주시기 바랍니다영감을 얻으려면, Django의 enforcement manual를 확인해봅시다(프로젝트의 크기에 따라 이 포괄적인 것을 필요로 하지 않을 수도 있습니다).Enforcing your code of conduct때로는, 최선의 노력에도 불구하고, 누군가 이 코드를 위반하는 행동을 취할 때가 있습니다. 부정적인 행동이나 유해한 행동을 해결할 수 있는 몇 가지 방법이 있습니다.상황에 대한 정보 수집하기각 커뮤니티 회원의 목소리를 자신의 목소리만큼 중요하게 생각하십시오. 누군가 행동강령을 위반했다는 보고를 받으면, 그 사람과 자신의 경험이 일치하지 않더라도, 진지하게 조사하여 문제를 조사하십시오. 그렇게함으로써 커뮤니티에 자신의 관점을 소중히 여기며 자신의 판단을 신뢰하게됩니다.문제의 공동체 구성원은 일관되게 다른 사람들을 불편하게하는 반복적인 범죄자일 수도 있고, 한번만 말하거나 했을 수도 있습니다. 두 가지 모두 상황에 따라 조치를 취할 근거가 될 수 있습니다.응답하기 전에, 일어난 일을 이해할 시간을 주십시오. 그 사람의 과거 의견과 대화를 통해 그들이 누구인지 이해하고 그런 행동을 한 이유에 대해 알아보십시오. 이 사람과 그들의 행동에 관해 자신의 관점 이외의 관점을 모아보십시오.  Don’t get pulled into an argument. Don’t get sidetracked into dealing with someone else’s behavior before you’ve finished dealing with the matter at hand. Focus on what you need.  — Stephanie Zvan, “그래서 당신은 스스로 정책을 가졌습니까. 지금?”  적절한 행동을 취하기충분한 정보를 수집하고 처리한 후에는, 무엇을 해야 할 지 결정해야 합니다. 다음 단계를 고려할 때, 모더레이터로서의 목표는 안전하고 존중받으며 협력적인 환경을 조성하는 것임을 기억하십시오. 문제의 상황을 다루는 방법뿐만 아니라 응답이 커뮤니티의 행동 및 기대 사항의 나머지 부분에 어떻게 영향을 미치는지 고려하십시오.누군가가 행동강령을 위반했다는 사실을 보고하면, 그것을 처리하는 것은 당신의 영역이 아닙니다. 때로는 기자가 자신의 경력, 평판 또는 신체적 안전에 큰 위험을 안고 정보를 공개하는 경우가 있습니다. 그들이 괴롭힘에 맞서도록 강요하면 기자를 타협의 입장에 놓을 수 있습니다. 기자가 명시적으로 달리 요구하지 않는 한, 문제의 사람과 직접 대화를 해야합니다.행동강령 위반에 대응할 수 있는 몇 가지 방법이 있습니다:      문제의 사람에게 공개적으로 경고를 제공하고 자신의 행동이 다른 사람, 바람직하게는 발생한 채널의 부정적인 영향을 설명합니다. 가능하다면 공개 통신은 나머지 커뮤니티에 당신이 행동 강령을 진지하게 받아 들일 수 있도록 전달합니다. 귀하의 의사 소통은 친절하지만 확고해야합니다.        자신의 행동이 다른 사람들에게 어떻게 부정적 영향을 주었는지 설명하기 위해 문제의 사람에게 개인적으로 연락하십시오. 상황에 민감한 개인 정보가 관련된 경우, 개인 통신 채널을 사용할 수 있습니다. 사적으로 누군가와 의견을 나누는 경우, 처음 상황을 보고한 사람들을 참조하면 행동을 취한 것입니다. 보고자에게 CC를 보내기 전에 동의 여부를 묻습니다.  경우에 따라, 해결 방법에 도달할 수 없습니다. 문제의 사람은 대면 할 때 공격적이거나 적대적이되거나 행동을 바꾸지 않을 수 있습니다. 이 상황에서 더 강한 행동을 취하는 것이 좋습니다. 예시입니다:      프로젝트의 모든 측면에 대한 참여를 일시적으로 금지함으로써, 시행된 문제의 사람을 일시 중지합니다.        프로젝트에서 이 사람을 영구적으로 금지합니다.  금지 회원은 영구적이고 회피 할 수 없는 관점의 차이를 나타나기 때문에 가볍게 생각해서는 안됩니다. 해결 방법에 도달할 수 없다는 것이 명백 할 때만 이러한 조치를 취해야합니다.Your responsibilities as a maintainer행동강령은 임의적으로 집행되는 법이 아닙니다. 귀하는 행동강령의 집행자이며 행동강령이 정하는 규칙을 준수하는 것은 귀하의 책임입니다.메인테이너로서 귀하는 커뮤니티를 위한 지침을 수립하고 귀하의 행동강령에 명시된 규칙에 따라 지침을 시행하십시오. 이것은 행동강령 위반 신고를 심각하게 받아들이는 것을 의미합니다. 기자는 자신의 불만을 철저하고 공정하게 검토해야합니다. 그들이 보고한 행동이 위반 사항이 아니라고 판단되면, 그 내용을 명확하게 전달하고 그에 대한 조치를 취하지 않을 이유를 설명하십시오. 그들이 하는 일은 그들에게 달린 것입니다: 문제가 있는 행동을 용인하거나 커뮤니티 참여를 중단하십시오.기술적인 행동강령을 위반하지 않는 행동 보고서는 여전히 커뮤니티에 문제가 있음을 나타낼 수 있으므로, 이 잠재적인 문제를 조사하고 그에 따라 행동해야합니다. 여기에는 수용 가능한 행동을 명확히하고 행동이 신고된 사람과 이야기하고, 행동강령을 위반하지 않았지만 예상되는 것의 가장자리를 뛰어 넘고 있으며 특정 행동을 취하는 것으로 나타남으로써 행동강령을 개정하는 것이 참가자들은 불편함을 느끼는 것에 포함될 수 있습니다.결국, 메인테이너로서, 당신은 수용 가능한 행동에 대한 기준을 설정하고 시행합니다. 프로젝트의 커뮤니티 가치를 형성 할 수 있는 능력이 있으며, 참여자는 이러한 가치를 공정하고 균등하게 적용할 것을 기대합니다.Encourage the behavior you want to see in the world 🌎프로젝트가 적대적이거나 환영받지 못하는 것처럼 보일 때, 다른 사람이 행동을 용인하는 사람이 한 명이라도 더 많은 기여자를 잃을 위험이 있으며, 그 중 일부는 절대 만나지 못할 수도 있습니다. 행동강령을 채택하거나 시행하는 것이 항상 쉬운 것은 아니지만, 친숙한 환경 조성은 커뮤니티 성장을 도울 것입니다.",
    "url": "/ko/code-of-conduct/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/ko/code-of-conduct/\">\n      귀하의 행동강령\n    </a>\n  </h2>\n  <h2 id=\"why-do-i-need-a-code-of-conduct\">Why do I need a code of conduct?</h2>\n\n\n</div>\n"
  },

  
  "/ko/finding-users/": {
    "title": "프로젝트에서 사람찾기",
    "content": "Spreading the word출시할 때 오픈소스 프로젝트를 홍보해야한다는 규정은 없습니다. 인기와 아무런 관련이 없는 오픈소스에서 일하는 많은 성취 이유가 있습니다. 그러나 다른 사람들이 오픈소스 프로젝트를 찾고 사용할 수 있기를 희망한다면, 이제는 모든 사람들에게 열심히 일하게 할 시간입니다!Figure out your message프로젝트를 홍보하기 위한 실제 작업을 시작하기 전에, 프로젝트의 기능과 중요한 이유를 설명할 수 있어야합니다.무엇이 당신의 프로젝트를 다양하고 흥미롭게 만드나요? 왜 그것을 만들었습니까? 이러한 질문을 스스로 해결하면 다른 사람들을 설득하기가 더 쉬울 것입니다.사람들이 문제를 해결하기 때문에, 사용자들은 궁극적으로는 참여자로서만 참여한다는 것을 기억하십시오. 프로젝트의 메시지와 가치에 대해 생각할 때 그들이 무엇을 원하는 것인지에 대한 렌즈를 통해 보도록 하십시오.예시로, @robb는 코드 예제를 사용하여 자신의 프로젝트인 Cartography를 효율적으로 했습니다:메시징에 대해 더 자세히 알고 싶으면, Mozilla의 “Personas and Pathways” 개발자용 연습 personas를 확인하십시오.Help people find and follow your project  You ideally need a single “home” URL that you can promote and point people to in relation to your project. You don’t need to splash out on a fancy template or even a domain name, but your project needs a focal point.  — Peter Cooper &amp; Robert Nyman, “코드에 대한 단어 확산 방법”  사람들이 단일 네임스페이스를 가리켜 프로젝트를 찾고 기억하도록 돕습니다.작업을 홍보하기 위해 명확히 처리를 하기. 트위터 핸들, GitHub URL 또는 IRC 채널을 통해 사람들을 프로젝트에 쉽게 안내 할 수 있습니다. 그들은 또한 귀하의 프로젝트가 성장하는 커뮤니티에 모일 장소를 제공합니다.프로젝트에 이 채널을 아직 설정하고 싶지 않다면, 자신의 모든 트위터 또는 GitHub 핸들을 홍보하십시오. 예를 들어, 만남이나 행사에서 말하는 경우, 소개 또는 슬라이드에 포함되어 있는지 확인하십시오. 그런식으로 사람들은 당신에게 연락하거나 일을 수행하는 방법을 알고 있습니다.    A mistake I made in those early days (…) was not starting a Twitter account for the project. Twitter’s a great way to keep people up to date about a project as well as constantly expose people to the project.  — @nathanmarz, “Apache 폭풍의 역사와 교훈”  프로젝트를 위한 웹 사이트를 만드는 것을 고려하기. 웹 사이트는 프로젝트를 보다 편리하고 쉽게 탐색할 수 있게 해주며, 특히 명확한 문서 및 자습서와 함께 사용할 수 있습니다. 또한 프로젝트가 활성화되어있어 시청자가 더 편안하게 사용할 수 있습니다. 예시를 사용하여 사람들에게 프로젝트 사용 방법에 대한 아이디어를 제공하십시오.@adrianholovaty, Django의 협력자가 말하기를 웹사이트는 _“by far the best thing we did with Django in the early days”_이라고 했습니다.만약 당신의 프로젝트가 깃허브에 호스팅된다면, GitHub 페이지를 통해 웹사이트를 쉽게 만드는 것을 보실 수 있습니다. Yeoman, Vagrant,와 Middleman은 포괄적인 사이트 중, 훌륭한 예시입니다.이제 프로젝트에 대한 메시지와 사람들이 프로젝트를 쉽게 찾을 수 있는 방법을 얻었으므로, 거기서 나와서 고객과 대화를 나눠보십시오.Go where your project’s audience is (online)온라인 홍보는 단어를 빠르게 공유하고 전파 할 수 있는 좋은 방법입니다. 온라인 채널을 사용하면 매우 광범위한 잠재적 고객에게 도달 할 수 있습니다.기존 온라인 커뮤니티 및 플랫폼을 활용하여 잠재 고객에게 도달하십시오. 만약 오픈소스 프로젝트가 소프트웨어 프로젝트라면, 아마도 스택 오버플로우, 레딧, 해커 뉴스, 또는 Quora에서 고객을 찾을 수 있을 것입니다. 사람들이 당신의 작품에 대해 가장 많은 이익을 보거나 즐거워한다고 생각하는 채널을 찾으십시오.    Each program has very specific functions that only a fraction of users will find useful. Don’t spam as many people as possible. Instead, target your efforts to communities that will benefit from knowing about your project.  — @pazdera, “오픈소스 프로젝트에서의 마케팅”  관련 방법으로 프로젝트를 공유하는 방법을 찾을 수 있는지 확인하십시오:  관련 오픈소스 프로젝트와 커뮤니티에 대해 알아보십시오. 때로는 프로젝트를 직접 홍보할 필요가 없습니다. 프로젝트가 파이썬을 사용하는 데이터 과학자에게 완벽하면, 파이썬 데이터 과학 커뮤니티에 대해 알아보십시오. 사람들이 당신을 알게되면, 자연스런 기회가 생겨 대화를 나누고 작업을 공유하게됩니다.  프로젝트가 해결하는 문제를 겪고있는 사람들을 찾으십시오. 프로젝트의 타겟층에 속한 사람들을 관련 포럼을 통해 검색하십시오. 그들의 질문에 답하고 적절한 방법으로 프로젝트를 솔루션으로 제안하십시오.  피드백 요청하기. 관련성 높고 흥미로운 청중에게 자신과 자신의 작업을 소개하십시오. 프로젝트에서 누가 이익을 얻을지 생각하는 사람에 대해 구체적으로 설명합시다. 이렇게 문장을 끝내봅니다: “누군가 Y를 하려고하면, 나는 내 프로젝트가 정말로 X를 도울 것이라고 생각합니다“.단순히 귀하의 작업을 홍보하는 것이 아니라, 다른 사람들의 의견을 경청하고 이에 응답해봅니다.일반적으로 말하면, 보답하기 전에 다른 사람들을 돕는 데 집중하십시오. 누구나 온라인으로 프로젝트를 홍보하기 쉽기 때문에, 많은 소음이 발생할 것입니다. 자신이 원하는 사람이 아니라, 무리에서 눈에 띄기 위해서 자신이 누구인지를 사람들에게 알릴 수 있습니다.아무도 주의를 기울이지 않거나 초기 봉사 활동에 응답하지 않으면, 낙심하지 마십시오! 대부분의 프로젝트 시작은 수개월 또는 수년이 걸릴 수 있는 반복 과정입니다. 처음으로 응답을 얻지 못하면 다른 전술을 시도하거나 다른 사람들의 작품에 가치를 더하는 방법을 먼저 찾으십시오. 이러한 일에는 시간과 헌신이 필요합니다.Go where your project’s audience is (offline)오프라인 이벤트는 새로운 프로젝트를 홍보하는 인기있는 방법입니다. 참여한 잠재 고객에게 도달하거나, 더 깊은 인간 관계를 구축할 수 있는 좋은 방법입니다. 특히 개발자에게 다가가려는 경우 더욱 그렇습니다.만약 새로운 공개 연설을 한다면, 프로젝트의 언어 또는 생태계와 관련된 지역 모임을 찾아보십시오.    I was pretty nervous about going to PyCon. I was giving a talk, I was only going to know a couple of people there, I was going for an entire week. (…) I shouldn’t have worried, though. PyCon was phenomenally awesome! (…) Everyone was incredibly friendly and outgoing, so much that I rarely found time not to talk to people!  — @jhamrick, “나는 PyCon을 걱정하지않고 좋아하는 방법을 어떻게 배웠나”  이전에 한번도 얘기 한 적이 없다면, 긴장을 하는 것이 정상입니다! 그들이 진정으로 당신의 일에 대해 듣고 싶어하기 때문에 청중이 거기 있다는 것을 기억합시다.이야기를 할 때, 청중이 흥미롭고 가치있는 것을 얻는 것에 집중합니다. 귀하의 언어를 친절하고 친근하게 유지하십시오. 웃고, 숨 쉬고, 재미있게 보내십시오.    When you start writing your talk, no matter what your topic is, it can help if you see your talk as a story that you tell people.  — Lena Reinhard, “기술 컨퍼런스 대화를 준비하고 작성하는 방법”  준비가 되었다면, 프로젝트 홍보를 위해 컨퍼런스에서 말하는 것을 고려하십시오. 때로는 컨퍼런스가 전 세계에서 더 많은 사람들에게 다가갈 수 있도록 도와줄겁니다.귀하의 언어 또는 생태계에서 특정한 회의를 찾으십시오. 대화를 제출하기 전에, 미리 컨퍼런스를 조사하여 참석자와 대화를 나누고 수용 할 확률을 높입니다. 연사를 보면서 회의의 청중을 이해할 수 있습니다.    I wrote very nicely to the JSConf people and begged them to give me a slot where I could present it at JSConf EU. (…) I was extremely scared, presenting this thing that I had been working on for six months. (…) The whole time I was just thinking, oh my God. What am I doing here?  — @ry, “Node.js의 기록” (video)  Build a reputation위에서 설명한 전략 외에도, 사람들을 초대하여 프로젝트에 기여하도록하는 가장 좋은 방법은 프로젝트를 공유하고 기여하는 것입니다.신입 회원을 돕고, 자원을 공유하고, 다른 사람들의 일에 사려 깊은 공헌을 하는 것은 긍정적인 평판을 얻는 데 도움이 될 것입니다. 그러면 사람들은 당신의 일에 대한 맥락을 가지게 될 것이며 관심을 기울이고 자신이 하는 일을 공유할 가능성이 높아질 것입니다.때로는, 이러한 관계가 더 넓은 생태계와의 공식 파트너십으로 이어질 수도 있습니다.    The only reason urllib3 is the most popular third-party Python library today is because it’s part of requests.  — @shazow, “오픈소스 프로젝트를 번성하게 만드는 방법”  평판을 얻기 시작하는 것이 너무 빠르거나, 혹은 너무 늦지 않았습니다. 이미 자신의 프로젝트를 시작했더라도, 다른 사람들을 도울 수 있는 방법을 모색하십시오.고객을 키우는 데는 밤새도 해결책이 없습니다. 다른 사람들의 신뢰와 존경심을 얻는 데는 시간이 걸리고 명성을 쌓는 작업은 끝나지 않습니다.    PhantomJS was released for the first time in the beginning of 2011. (…) I spread the word in the usual ways: I tweeted about it, I wrote blog posts on things you could do with it, I mentioned it during various discussions in meetups. When it became more well known in 2014, I started giving presentations about it.  — @ariya, “메인테이너 이야기”  Keep at it!때로는, 사람들이 오픈소스 프로젝트에 주목하기까지는 시간이 오래 걸립니다. 괜찮습니다! 오늘날 가장 인기있는 프로젝트 중 일부는 높은 수준의 활동에 도달하기까지 수년이 걸렸습니다. 마술 총알 대신 관계를 구축하는 데에 집중하십시오. 인내심을 갖고, 감사해하는 사람들과 일하는 결과물을 계속 공유하십시오.",
    "url": "/ko/finding-users/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/ko/finding-users/\">\n      프로젝트에서 사람찾기\n    </a>\n  </h2>\n  <h2 id=\"spreading-the-word\">Spreading the word</h2>\n\n\n</div>\n"
  },

  
  "/ko/getting-paid/": {
    "title": "오픈소스 작업에 대한 비용 지불하기",
    "content": "Why some people seek financial support대부분의 오픈소스 작업은 자원봉사입니다. 예를 들어, 누군가가 사용하는 프로젝트에서 버그를 발견하고 빠른 버그픽스를 제출하거나, 여가 시간에 오픈소스 프로젝트를 사용하여 재미있는 작업을 할 수 있습니다.  I was looking for a “hobby” programming project that would keep me occupied during the week around Christmas. (…) I had a home computer, and not much else on my hands. I decided to write an interpreter for the new scripting language I had been thinking about lately. (…) I chose Python as a working title.  — @gvanrossum, “파이썬 프로그래밍”  사람들이 오픈소스 작업을 위해 돈을 내고 싶어하지 않는 데에는 여러 가지 이유가 있습니다.  그들은 이미 좋아하는 정규직 직업을 가질 예정이여서, 여유 시간에 오픈소스에 기여할 수 있습니다.  그들은 오픈소스를 취미 또는 창조적인 탈출구로 생각하고 프로젝트에 대한 재정적 의무를 느끼고 싶지 않습니다.  그들은 오픈소스에 기여함으로써 사적인 이익을 얻고, 자신의 평판이나 포트폴리오를 구축하고, 새로운 기술을 배우며, 커뮤니티에 더 가까이 다가가는 느낌을 주는 일을 합니다.    Financial donations do add a feeling of responsibility, for some. (…) It’s important for us, in the globally connected, fast-paced world we live in, to be able to say “not now, I feel like doing something completely different”.  — @alloy, “우리가 왜 기여를 허락하면 안되는가”  다른 사람들에게, 특히 기여가 진행 중이거나 상당한 시간이 필요한 경우, 프로젝트가 요구하거나 개인적인 이유로 참여할 수 있는 유일한 방법은 오픈소스에 기여하기 위해 값을 지불하는 것입니다.대중적인 프로젝트를 유지하는 것은 한 달에 몇 시간이라 하기보다는 주당 10-20시간을 소비하는 중요한 책임입니다.    Ask any open source project maintainer, and they will tell you about the reality of the amount of work that goes into managing a project. You have clients. You are fixing issues for them. You are creating new features. This becomes a real demand on your time.  — @ashedryden, “무보수 노동 및 OSS 커뮤니티의 윤리”  또한 유료 작업을 통해 여러 계층의 사람들이 의미있는 기여를 할 수 있습니다. 어떤 사람들은 현재 재무 상태, 부채, 또는 가족 또는 다른 보살필 의무를 다하지않고 오픈소스 프로젝트에 시간을 보낼 여력이 없습니다. 즉, 세상은 자신의 시간을 자원봉사할 여력이없는 재능있는 사람들에게서 기여를 결코 볼 수 없다는 것을 의미합니다. @ashedryden이 설명한대로 윤리적 함의가 있습니다. 이미 인생에 여유가 있는 사람들에게 치우친다는 것은, 자원 봉사자들의 기여에 기초하여 추가적인 이점을 얻는 반면, 자원봉사를 할 수 없는 사람들에게는 나중에 기회를 얻지 못하여, 더더욱 오픈소스의 다양성이 부족해집니다.     OSS yields massive benefits to the technology industry, which, in turn, means benefits to all industries. (…) However, if the only people who can focus on it are the lucky and the obsessed, then there’s a huge untapped potential.  — @isaacs, “현금과 오픈소스”  재정 지원을 찾고 있다면, 고려해야 할 두 가지 경로가 있습니다. 기여자로서 자신의 시간을 투자하거나, 프로젝트에 대한 조직 자금을 찾을 수 있습니다.Funding your own time오늘날, 많은 사람들이 오픈소스에서 파트 타임 또는 풀 타임으로 일하기 위해 돈을 받습니다. 당신의 시간에 대한 대금을 받는 가장 일반적인 방법은 고용주와 상담하는 것입니다.고용주가 프로젝트를 실제로 사용하고 오픈소스 작업에 대한 사례를 만드는 것이 더 쉽지만, 자신의 계획대로 창의력을 발휘하십시오. 어쩌면 고용주가 프로젝트를 사용하지 않고 파이썬을 이용한 인기있는 파이썬 프로젝트를 유지한다면, 새로운 파이썬 개발자를 유치할 수 있습니다. 어쩌면 고용주가 일반적으로 더 개발자 친화적인 것처럼 보일 수도 있습니다.    Like many in open source, I was struggling with the burden of maintaining a project. When I first started doing open source, I used to just stay late to work on it or right when I got home. (…) I was able to discuss with my boss the issues I was facing and we came up with ideas on how we could incorporate open source tasks given our own use of Babel.  — @hzoo, “메인테이너 이야기”  기존의 오픈소스 프로젝트가 없지만 현재 작업 결과물이 오픈소스인 경우, 고용주가 내부 소프트웨어의 일부를 스스로 오픈할 수 있는 사례를 작성하십시오.많은 기업들이 브랜드를 구축하고 우수한 인재를 영입하기 위해 오픈소스 프로그램을 개발하고 있습니다.예를 들어 @hueniverse는, Walmart의 오픈소스에 대한 투자를 정당화 할 재정적인 이유가 있음을 발견했습니다. 그리고 @jamesgpearce는 Facebook의 오픈소스 프로그램이 채용에서 차이를 만들었다는 사실을 발견했습니다:  이는 해커 문화와 밀접하게 연계되어 있으며, 조직이 어떻게 인식되었는지를 보여줍니다. 우리는 직원들에게 “페이스북에서 쓰이는 오픈소스 소프트웨어 프로그램에 대해 알고 있었습니까?”라고 물었습니다. 3분의2가 “그렇다”고 답했습니다. 절반정도는 이 프로그램이 우리를 위해 일하기로 한 결정에 긍정적으로 기여했다고 전했습니다. 이것들은 한계적인 숫자가 아니며 희망을 말합니다.회사가 이 경로를 따라 간다면, 커뮤니티와 기업 활동의 경계를 분명하게 유지하는 것이 중요합니다. 궁극적으로 오픈소스는 전 세계 모든 사람들의 공헌을 통해 스스로를 유지하며, 이는 어느 회사의 위치보다 큽니다.    Getting paid to work on open source is a rare and wonderful opportunity, but you should not have to give up your passion in the process. Your passion should be why companies want to pay you.  — @jessfraz, “흐린 선”  현 고용주가 오픈소스 업무의 우선 순위를 결정할 수 없다면, 직원의 오픈소스 기여도를 높이는 새로운 고용주를 찾는 것이 좋습니다. 오픈소스 작업에 대한 헌신을 분명히 하는 회사를 찾아보십시오. 예시입니다 :  일부 회사는, 넷플릭스혹은 페이팔처럼, 오픈소스에 대한 그들의 참여를 강조하는 웹 사이트를 가지고있습니다  Rackspace는 직원을 위한 오픈소스 기여 정책을 게시했습니다Go또는 React와 같은 대기업에서 시작된 프로젝트도, 오픈소스 작업에 사람들을 고용 할 가능성이 높습니다.마지막으로, 개인적인 상황에 따라, 오픈소스 작업을 위해 독립적으로 돈을 모으는 노력을 할 수 있습니다. 예시:  @gaearon은 Patreon crowdfunding campaign을 통해 Redux에 대한 그의 작업에 펀드했습니다.  @andrewgodwin은 Django 스키마 마이그레이션 작업을 Kickstarter 캠페인을 통해 펀드했습니다.Finding funding for your project개인 기여자를 위한 준비 외에도, 때로는 프로젝트가 회사, 개인 또는 다른 사람들로부터 지속적인 자금 마련을 위해 펀드를 모으는 경우가 있습니다.조직 펀딩은 현재 참여자에게 비용을 지불하거나, 프로젝트 수행 비용(호스팅 비용 등)을 충당하거나, 새로운 기능이나 아이디어에 투자하는 쪽으로 갈 수 있습니다.오픈소스의 대중성이 높아짐에 따라, 프로젝트 펀딩은 아직 실험적이지만, 몇가지 공통적인 옵션이 있습니다.크라우드 펀딩(crowdfunding) 캠페인이나 스폰서십을 통해 당신의 업무에 돈을 모으기스폰서십을 찾는 것은 이미 강력한 잠재 고객이나 평판이 있거나, 프로젝트의 인기가 있는 경우에 효과적입니다.스폰서 프로젝트의 몇 가지 예는 다음과 같습니다.  webpack 는 OpenCollective를 통해 회사와 개인에게 돈을 모읍니다  Vue 는 Patreon를 통해 펀드됩니다  Ruby Together는, bundler, RubyGems 및 기타 Ruby 인프라 프로젝트에 대한 비용을 지불하는 비영리 단체입니다.수입원 만들기프로젝트에 따라 상업적 지원, 호스팅 옵션 또는 추가 기능에 대해 요금을 부과할 수 있습니다. 몇 가지 예는 다음과 같습니다:  Sidekiq 은 추가 지원을 위해 유료 버전을 제공합니다  Travis CI 는 제품의 유료 버전을 제공합니다  Ghost 는 유료 관리 서비스가 있는 비영리 단체입니다npm 및 Docker와 같은 일부 인기있는 프로젝트는, 사업 성장을 지원하기 위해 벤처 캐피탈을 조성하기까지 합니다.보조금 신청하기일부 소프트웨어 재단 및 회사는 오픈소스 작업에 대한 보조금을 제공합니다. 때로는 프로젝트에 대한 법적 주체를 설정하지 않고 개인에게 보조금을 지급할 수 있습니다.  Read the Docs는 Mozilla 오픈소스 지원으로부터 보조금을 받았습니다  OpenMRS work는 Stripe’s Open-Source Retreat으로부터 펀드받았습니다  Libraries.io는 Sloan 재단으로부터 보조금을 받았습니다  Python 소프트웨어 재단은 파이썬 관련 작업에 대한 보조금을 제공합니다보다 자세한 옵션과 사례 연구를 원할 경우, @nayafia 가이드 작성을 통해 오픈소스 저작물에 대한 대가를 받을 수 있습니다. 다른 유형의 기금에는 여러 가지 기술이 필요하기 때문에 어떤 옵션이 가장 적합한 지 알아 내려면 장점을 고려하십시오.Building a case for financial support프로젝트가 새로운 아이디어이든, 수년간 지속되어 왔든 타겟 기금 제공자를 파악하고 중요한 사건을 만드는데 중요하게 고려되야합니다.자신의 시간에 돈을 내거나, 프로젝트 기금 모금을 원하는 경우 다음 질문에 답할 수 있어야합니다.임펙트이 프로젝트가 왜 유용한가요? 사용자 또는 잠재적 사용자가 그렇게 좋아하는 이유는 무엇입니까? 5년후에는 어디에 있을까요?끌어주기메트릭, 일화 또는 고객의 견해와 상관없이 프로젝트가 중요하다는 증거를 수집하십시오. 현재 귀사의 프로젝트를 사용하고 있는 회사나, 주목할만한 사람들이 있습니까? 그렇지 않다면 저명한 사람이 그것을 지지합니까?자금 제공자에 주는 가치기금 제공자는 고용주 또는 보조금 재단에 관계없이 자주 기회를 제공받습니다. 다른 어떤 기회보다 프로젝트를 지원해야하는 이유는 무엇입니까? 그들은 개인적으로 어떻게 이익을 얻습니까?펀드 사용제안된 자금으로 정확히 무엇을 달성할 수 있습니까? 급여를 지급하기보다는 프로젝트 이정표 또는 결과에 중점을 둡니다.펀드로 송금하기기금 제공자의 관련 요구 사항이 있습니까? 예를 들어 비영리 단체 또는 비영리 단체 재정 보증인이 필요할 수 있습니다. 또는 자금을 조직이 아닌 개별 계약자에게 제공해야합니다. 이러한 요구 사항은 자금 제공자마다 다르므로 사전에 연구해야합니다.    For years, we’ve been the leading resource of website friendly icons, with a community of over 20 million people and been featured on over 70 million websites, including Whitehouse.gov. (…) Version 4 was three years ago. Web tech’s changed a lot since then, and frankly, Font Awesome’s gotten a bit stale. (…) That’s why we’re introducing Font Awesome 5. We’re modernizing and rewriting the CSS and redesigning every icon from top to bottom. We’re talking better design, better consistency, and better readability.  — @davegandy, Font Awesome 킥스타터 영상  Experiment and don’t give up오픈소스 프로젝트, 비영리 단체, 소프트웨어 스타트업 등 많은 돈을 모으는 것은 쉽지 않습니다. 대부분의 경우 창의력을 발휘해야합니다. 어떻게 돈을 받고, 연구를 하고, 재밌는 사람의 신발에 몸을 두는지를 확인하면 자금 지원에 대한 설득력있는 사례를 구축하는 데 도움이됩니다.",
    "url": "/ko/getting-paid/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/ko/getting-paid/\">\n      오픈소스 작업에 대한 비용 지불하기\n    </a>\n  </h2>\n  <h2 id=\"why-some-people-seek-financial-support\">Why some people seek financial support</h2>\n\n\n</div>\n"
  },

  
  "/ko/how-to-contribute/": {
    "title": "오픈소스에 기여하는 방법",
    "content": "Why contribute to open source?    Working on [freenode] helped me earn many of the skills I later used for my studies in university and my actual job. I think working on open source projects helps me as much as it helps the project!  — @errietta, “왜 나는 오프소스 소프트웨어에 기여하는 것을 좋아하는가”  오픈소스에 기여하는 것은 당신이 상상할 수 있는 모든 기술을 배우고, 가르치고, 구축하는 보람찬 방법이 될 수 있습니다.왜 사람들은 오픈소스에 기여합니까? 이에는 많은 이유가 있습니다!기존 기술 향상코딩, 사용자 인터페이스 디자인, 그래픽 디자인, 글쓰기 또는 조직화등의 실습을 원한다면 오픈소스 프로젝트에 대한 작업이 있습니다.비슷한 것에 관심이있는 사람들을 만나십시오따뜻하고 환영하는 커뮤니티가 있는 오픈소스 프로젝트는 사람들이 수년간 돌아오도록합니다. 많은 사람들이 부리토에 관한 회의나 심야 온라인 채팅를 가지고 서로를 실행하고 있든간에 오픈소스에 참여함으로써 평생동안 우정을 나누고 있습니다.멘토를 찾고 다른 사람들을 가르치십시오공유 프로젝트에서 다른 사람들과 함께 일한다는 것은 당신이 일을 어떻게하는지 설명하고, 다른 사람들에게 도움을 요청해야 함을 의미합니다. 학습하고 가르치는 행위는 관련된 모든 사람들에게 성취감있는 활동이 될 수 있습니다.평판(및 경력)을 키우는 데 도움이 되는 공공 예제 만들기정의에 따르면, 모든 오픈소스 저작물은 공개되어 있으므로, 어디서나 할 수 있는 무료 예제를 얻을 수 있습니다.사람들의 기술 습득오픈소스는 충돌 해결, 사람들의 팀 구성 및 작업 우선순위 지정과 같은 리더십 및 관리 기술을 연습 할 수있는 기회를 제공합니다.작은 것조차도 변경할 수 있는 힘이 있습니다오픈소스에 참여하는 것을 즐기는 평생 기여자가 될 필요는 없습니다. 웹 사이트에 오타가 있는 것을 본 적이 있고, 누군가 그것을 고치기를 바랬습니까? 오픈소스 프로젝트에서 여러분은 그렇게 할 수 있습니다. 오픈소스는 사람들이 삶에 대해 어떻게 대처하고 그들이 세상을 경험하는지를 느끼도록 도와줍니다.What it means to contribute새로운 오픈소스 기여자라면, 기여하는 과정이 위협적일 수 있습니다. 올바른 프로젝트를 어떻게 찾을 수 있습니까? 코딩 방법을 모르는 경우에는 어떻게 해야합니까? 뭔가 잘못되면 어떡하죠?걱정 마세요! 오픈소스 프로젝트에 참여하는 데는 여러 가지 방법이 있으며, 몇 가지 팁을 통해 경험을 최대한 활용할 수 있습니다.코드를 제공할 필요가 없습니다오픈소스에 기여하는 것에 대한 일반적인 오해는 코드를 작성해야한다는 것입니다. 실제로 대부분 프로젝트에서 무시되거나 간과되는 부분입니다 . 이러한 유형의 기여를 제공하도록 제안함으로써 프로젝트에 큰 도움을 줄 것입니다!    I’ve been renowned for my work on CocoaPods, but most people don’t know that I actually don’t do any real work on the CocoaPods tool itself. My time on the project is mostly spent doing things like documentation and working on branding.  — @orta, “기본적으로 OSS으로 이동하기”  코드 작성을 원한다고해도, 다른 유형의 기여는 프로젝트에 참여하고 다른 커뮤니티 회원을 만날 수 있는 좋은 방법입니다. 이러한 관계를 구축하면 프로젝트의 다른 부분에서 작업 할 수있는 기회가 주어집니다.    I first reached out to the Python development team (aka python-dev) when I emailed the mailing list on June 17, 2002 about accepting my patch. I quickly caught the open source bug, and decided to start curating email digests for the group. They gave me a great excuse to ask for clarifications about a topic, but more critically I was able to notice when someone pointed out something that needed fixing.  — @brettcannon, “메인테이너 이야기”  기획 행사가 마음에 드십니까?  @fzamperin이 NodeSchool에 대했던 것처럼, 프로젝트에 관한 워크샵이나 모임을 조직하기  프로젝트 컨퍼런스 구성하기 (있는 경우)  커뮤니티 구성원들이 적절한 회의를 찾고 말하기에 대한 제안서 제출하기디자인하고 싶습니까?  프로젝트의 유용성을 높이기 위해 레이아웃 재구성하기  Drupal 제안처럼,사용자 조사를 통해, 프로젝트의 네비게이션 또는 메뉴를 재구성하고 수정하기  프로젝트가 일관성있는 시각적 디자인을 가질 수 있도록, 스타일 가이드를 작성하기  hapi.js의 기여처럼, 티셔츠 혹은 새로운 로고를 위한 예슐 작품 만들기글 쓰고 싶습니까?  프로젝트의 문서 작성 및 개선하기  프로젝트 사용법을 보여주는 예제 폴더를 선별하기  프로젝트의 뉴스 레터를 시작하거나 메일링 리스트의 하이라이트를 관리하십시오.  PyPA의 기여처럼, 프로젝트의 튜토리얼을 작성하기.  프로젝트의 문서의 번역문 작성하기    Seriously, [documentation] is mega-important. The documentation so far has been great and has been a killer feature of Babel. There are sections that could certainly use some work and even the addition of a paragraph here or there is extremely appreciated.  — @kittens, “기여자 부르기”  조직하는 것을 좋아합니까?  중복된 이슈에 대한 링크 및 새로운 이슈 라벨 제안, 정리된 상태 유지하기  @nzakas가 ESLint에 했던것처럼, 열려있는 이슈를 검토하고, 오래된 이슈를 닫을 것을 제안하기  최근 열린 이슈에 대한 질문을 명확히 하여 토론으로 나아가게하기코드 작성하고 싶습니까?  @dianjin이 Leaflet 했던것처럼, 해결할 문제를 찾기  새로운 기능을 작성하는 데 도움을 줄 수 있는지 물어보기  프로젝트 설정 자동화하기  툴링 및 테스트 개선하기사람들을 돕는 것을 좋아합니까?  예를 들어, Stack Overflow의 (Postgres 예시) 혹은 Reddit과 관련된 질문에 대답해주기  열린 이슈에서 사람들의 질문에 대답해주기  토론 보드나 대화 채널의 관리 돕기다른 사람들의 코드를 돕는 것을 좋아합니까?  다른 사람들의 제출한 코드를 리뷰하기  프로젝트를 어떻게 쓰는가에 대한 튜토리얼 작성하기  @ereichert처럼 Rust에서 @bronzdoc을 사용하고, 다른 기여자를 멘토로 초대하기소프트웨어 프로젝트만으로 작업할 필요는 없습니다!“오픈소스”는 종종 소프트웨어를 의미하지만, 무엇이든간에 거의 협력 할 수 있습니다. 오픈소스 프로젝트로 개발되는 책, 요리법, 목록 및 수업이 있습니다.예시로 아래와 같습니다:  @sindresorhus는 list of “awesome” lists를 만들었습니다  @h5bp는 프론트엔드 개발자 후보군용 list of potential interview questions을 관리하고 있습니다  @stuartlynn과 @nicole-a-tesla는 collection of fun facts about puffins를 만들었습니다비록 당신이 소프트웨어 개발자일지라도, 문서 프로젝트 작업은 오픈소스에서 시작하는 데 도움이 될 수 있습니다. 코드를 포함하지 않는 프로젝트에서 작업하는 것이 종종 위협적이지 않으며, 협업 프로세스가 자신감과 경험을 쌓을 수 있습니다.Orienting yourself to a new project    If you go to an issue tracker and things seem confusing, it’s not just you. These tools require a lot of implicit knowledge, but people can help you navigate it and you can ask them questions.  — @shaunagm, “어떻게 오픈소스에 기여하는가”  오타를 수정하는 이상의 것, 오픈소스에 기여하는 것은 파티에서 낯선 사람들에게 다가가는 것과 같습니다. 라마에 대해 이야기하기 시작하면, 금붕어에 관한 토론이 깊어지면서 아마 당신을 조금 이상하게 보게 될 것입니다.자신의 제안으로 맹목적으로 뛰어 들기 전에, 먼저 방을 읽는 법을 배우십시오. 그렇게하면 아이디어가 눈에 띄고 들리게 될 확률이 높아집니다.오픈소스 프로젝트의 해부학모든 오픈소스 커뮤니티는 다릅니다.하나의 오픈소스 프로젝트에 수년을 보내다 보면 하나의 오픈소스 프로젝트를 알게되었다는 것을 의미합니다. 다른 프로젝트로 이동하면 어휘, 규범 및 의사 소통 스타일이 완전히 다른 것을 알 수 있습니다.즉, 많은 오픈소스 프로젝트는 비슷한 조직 구조를 따릅니다. 서로 다른 커뮤니티 역할과 전반적인 프로세스를 이해하면 새로운 프로젝트를 신속하게 수행할 수 있습니다.일반적인 오픈소스 프로젝트에는 다음 유형의 사람들이 있습니다:  작성자: 이 프로젝트를 만든 사람 혹은 조직  소유자: 조직 또는 저장소에 대한 관리 권한을 가진 사람 (항상 원래 작성자와 동일하지는 않음)  메인테이너: 비전을 주도하고 프로젝트의 조직 측면을 관리하는 책임이 있는 기여자. (그들은 프로젝트의 저자 또는 소유자일 수도 있습니다.)  기여자: 프로젝트에 다시 기여한 모든 사람.  커뮤니티 맴버: 프로젝트를 사용하는 사람들. 대화에서 적극적이거나 프로젝트 방향에 대한 의견을 표명할 수 있습니다.더 큰 프로젝트에는 툴링, 선별, 커뮤니티 중재 및 이벤트 조직과 같은 다양한 업무에 초점을 둔 소위원회 또는 실무 그룹이 있을 수도 있습니다. 프로젝트 웹 사이트에서 “팀” 페이지를 찾거나 거버넌스 문서 저장소에 이 정보를 찾으십시오.프로젝트에도 문서가 있습니다. 이러한 파일은 대개 저장소의 최상위 레벨에 나열됩니다.  라이선스: 정의에 의하면, 모든 오픈소스 프로젝트는 반드시 오픈소스 라이선스를 가져야 합니다. 만약 프로젝트가 라이선스를 가지지 않는다면, 이건  오픈소스가 아닙니다.  README: README는 새로운 커뮤니티 구성원을 프로젝트에 환영하게 하는 지침서입니다. 왜 프로젝트가 유용하고 시작하는 방법을 설명합니다.  CONTRIBUTING: README는 사람들이 프로젝트를 사용하는 데 도움이되지만, CONTRIBUTING 문서는 사람들이 프로젝트에 _기여_하는 데 도움이됩니다. 필요한 기여 유형과 프로세스 작동 방식을 설명합니다. 모든 프로젝트가 CONTRIBUTING 파일을 갖고있는 것은 아니지만, 공존하는 환영 프로젝트임을 알립니다.  CODE_OF_CONDUCT: code of conduct는 참가자의 행동에 대한 기본 원칙을 설정하고, 친절하고 환영할만한 환경을 조성하는 데 도움이 됩니다. 모든 프로젝트가 CODE_OF_CONDUCT 파일을 가지고있는 것은 아니지만, 그 존재가 기여할 수 있는 환영 프로젝트임을 알립니다.  다른 문서: (특히 큰 프로젝트의 경우) 튜토리얼, 연습장 또는 거버넌스 정책과 같은 추가 문서가 있을 수 있습니다.마지막으로 오픈소스 프로젝트는 다음 도구를 사용하여 토론을 구성합니다. 기록 보관소를 읽으면 커뮤니티가 어떻게 사고하고 작동하는지 잘 알 수 있습니다.  Issue tracker: 사람들이 프로젝트와 관련된 이슈를 토론하는 공간입니다.  Pull requests: 사람들이 토론하고 진행중인 변경 사항을 검토합니다.  토론 포럼 혹은 메일링 리스트: 일부 프로젝트는 회화 주제(ex. “How do I…“ or “What do you think about…“ instead of bug reports or feature requests)에 대해 이러한 채널을 사용할 수 있습니다. 다른 사람들은 모든 대화에 이슈 트래커를 사용합니다.  동기식 채널 채팅: 일부 프로젝트에서는 일상 회화, 공동 작업 및 빠른 교환을 위해 채팅 채널 (예 : 슬랙 또는 IRC)을 사용합니다.Finding a project to contribute to이제 오픈소스 프로젝트가 어떻게 작동하는지 알게 되었으니, 이제는 기여할 프로젝트를 찾아야 할 때입니다!이전에 오픈소스에 기여한 적이 없다면, John F. Kennedy 미국 대통령의 “Ask not what your country can do for you - ask what you can do for your country.” 발언에서 조언을 구하십시오.오픈소스에 기여하는 것은 프로젝트 전반에 걸쳐 모든 수준에서 발생합니다. 첫 번째 기여가 정확히 무엇인지 또는 어떻게 보일지를 생각할 필요가 없습니다.대신, 이미 사용하고 있거나 사용하고 싶은 프로젝트에 대해 생각해보십시오. 적극적으로 기여할 프로젝트는 자신이 다시 찾아 오는 프로젝트입니다.그 프로젝트 내에서, 뭔가가 더 좋거나 다를 수 있다고 생각할 때마다 본능에 따라 행동하십시오.오픈소스는 독점적인 클럽이 아닙니다; 그것은 당신 같은 사람들에 의해 만들어졌습니다. “오픈소스”는 전세계 문제를 유연하게 해결할 수 있는 멋진 용어입니다.README를 스캔하여 깨진 링크 또는 오타를 찾을 수 있습니다. 또는 새로운 사용자이고 무언가가 고장 났거나, 실제로 문서에 있어야한다고 생각되는 문제를 발견했습니다. 그것을 무시하고 계속 나아가거나, 다른 사람에게 그것을 고치라고 요구하는 대신, 피칭을 통해 도움을 줄 수 있는지 확인하십시오. 오픈소스가 무엇인지 알아보십시오!  일반적인 기여의 28%는 오타 수정, 서식 재 지정 또는 번역 작성과 같은 문서입니다.또한 다음 리소스 중 하나를 사용하여 새 프로젝트를 찾고 기여할 수 있습니다.  GitHub Explore  Open Source Friday  First Timers Only  Your First PR  CodeTriage  24 Pull Requests  Up For Grabs  Contributor-ninjaA checklist before you contribute기여하고 싶은 프로젝트를 찾았으면, 프로젝트가 기여를 받기에 적합한 지 빠르게 확인하십시오. 그렇지 않으면, 노력이 절대로 응답을 받지 못할 수도 있습니다.다음은 프로젝트가 새로운 기여자에게 좋은가에 대한 여부를 평가하는 편리한 체크리스트입니다.오픈소스의 정의를 충족시킵니다      라이선스가 있습니까? 대부분, 저장소의 최상단에 있는 LICENSE라 불리는 파일입니다.  프로젝트가 적극적으로 기여를 받습니다마스터 브랜치에서 커밋 활동을 살펴보십시오. GitHub에서는 이 정보를 저장소의 홈페이지에서 볼 수 있습니다.      최신 커밋은 언제 있습니까?        프로젝트에 참여한 기여자가 몇 명입니까?        얼마나 사람들 자주 커밋합니까? (깃허브에서는, 상단 바에 있는 \"Commits\"을 클릭하여 찾을 수 있습니다.)  다음으로, issues 프로젝트의 이슈를 봅시다.        얼마나 많은 공개 이슈가 있습니까?          메인테이너가 열린 이슈에 신속하게 대응합니까?          이슈에 대한 활발한 토론이 있습니까?          최근에 이슈가 있습니까?          이슈가 닫히고 있습니까? (깃허브에서는, 이슈 페이지에서 닫힌 이슈를 \"closed\" 탭을 눌러 볼 수 있습니다.)  이제 프로젝트의 pull requests에 대해 동일한 작업을 수행하십시오.        얼마나 많은 pull requests가 열리고 있습니까?          메인테이너가 열린 pull requests에 신속하게 대응합니까?          pull requests에서 활발히 토론이 나옵니까?          최근 pull requests가 있습니까?          최근 모든 pull requests가 병합되고 있습니까? (깃허브에서는,pull requests 페이지에서 \"closed\" 탭을 눌러 닫힌 PR을 볼 수 있습니다.)  프로젝트가 환영합니다프로젝트가 친근하게 환영한다는 신호로 새로운 기여자를 받아 들일 것입니다.        관리자가 이슈의 질문에 도움이 됩니까?          이슈, 토론 포럼 및 채팅(예를 들어. IRC 혹은 Slack)에 있는 사람들이 친절합니까?          pull requests가 리뷰를 받고 있습니까?          메인테이너가 기여자들에게 고마워합니까?      Whenever you see a long thread, spot check responses from core developers coming late in the thread. Are they summarizing constructively, and taking steps to bring the thread to a decision while remaining polite? If you see a lot of flame wars going on, that’s often a sign that energy is going into argument instead of into development.  — @kfogel, OSS 생산  How to submit a contribution원하는 프로젝트를 찾았으면 기꺼이 기여할 준비가되었습니다. 마침내! 올바른 방법으로 기여를 받는 방법은 다음과 같습니다.효과적으로 의사 소통하기일회 기여자이든 커뮤니티에 참여하려고하든, 관계없이 다른 사람들과 협력하는 것은 오픈소스에서 개발할 가장 중요한 기술 중 하나입니다.    [As a new contributor,] I quickly realized I had to ask questions if I wanted to be able to close the issue. I skimmed through the code base. Once I had some sense of what was going on, I asked for more direction. And voilà! I was able to solve the issue after getting all the relevant details I needed.  — @shubheksha, 초보자가 오픈소스 세계를 통해 즐기는 매우 울퉁불퉁한 여정  이슈를 열거나 pull request를 하기 전에, 또는 채팅에서 질문을 하기 전에, 아이디어를 효과적으로 전달할 수 있도록 이러한 점을 명심하십시오.context 제공하기. 다른 사람들이 신속하게 속도를 낼 수 있도록 도와주십시오. 오류가 발생하는 경우, 수행하려는 작업과 오류를 재현하는 방법을 설명하십시오. 새로운 아이디어를 제안하는 경우, 프로젝트에 유용하다고 생각하는 이유를 설명하십시오 (귀하뿐 아니라!).  😇 “제가 Y를 하려면 X가 안됩니다”  😢 “X 가 망가졌네요! 이거 고쳐주세요.”미리 과제하기. 무언가 알지는 못하지만 시도한 것을 보여주십시오. 도움을 요청하기 전에 프로젝트의 README, 문서, 이슈 (공개 또는 비공개), 메일링 리스트를 확인하고 인터넷에서 답변을 검색하십시오. 사람들은 당신이 배우려고한다는 것을 증명할 때 감사해할 것입니다.  😇 “X를 구현하는 방법을 잘 모르겠네요. 도움말 문서를 확인했고 모든 멘션도 찾지 못했습니다.”  😢 “X는 어떻게 해요?”요청을 짧고 직접적으로 유지하기. 이메일을 보내는 것과 마찬가지로 모든 기여는 아무리 간단하거나 도움이된다 하더라도, 다른 사람의 검토가 필요합니다. 많은 프로젝트는 도움을 줄 수있는 사람들보다 많은 요청을 받고 있습니다. 간결하게 하십시오. 누군가가 당신을 도울 수있는 기회를 증가시킬 것입니다.  😇 “API 튜토리얼을 작성하고 싶습니다.”  😢 “저는 다른 날 고속도로를 몰고 가스로 달려 들었어요. 그리고 나서 저는 우리가 해야 할 일에 대해 이 놀라운 생각을 가지고 있었고요. 그렇지만 제가 설명하기 전에, 님께 보여주기 위해서…“모든 커뮤니케이션을 공개하기. 유혹스러운 일이긴하지만, 중요한 정보(예 : 보안 문제 또는 심각한 행동 위반)를 공유해야하는 경우가 아니면 메인테이너에게 개인적으로 연락하지 마십시오. 대화를 공개 할 때 더 많은 사람들이 귀하의 교류를 통해 배우고 이익을 얻을 수 있습니다. 토론은 그 자체로 기여할 수 있습니다.  😇 (댓글로) “@-메인테이너 안녕하세요! 이 PR은 어떻게 진행되고 있나요?”  😢 (이메일로) “안녕하세요, 이메일을 보내서 죄송합니다만.제 PR을 검토할 기회가 있었는지 궁금합니다.”질문을 하는 것은 괜찮습니다(그러나 참을성 있으십시오!). 누구나 프로젝트를 처음 접했을뿐 아니라 경험 많은 공헌자도 새로운 프로젝트를 볼 때 속도를 높여야 합니다. 마찬가지로, 오랜 기간의 메인테이너가 프로젝트의 모든 부분을 항상 잘 알고있는 것은 아닙니다. 그들에게 당신이 보여주기를 바라는 것과 같은 인내심을 보여주십시오.  😇 “이 오류 찾아주셔서 고맙습니다. 저는 이 제안에 따를게요. 이렇게 출력되네요.”  😢 “왜 내 문제를 해결할 수 없어요? 이 프로젝트는 님이 만든게 아닌가요?”커뮤니티의 의사 결정을 존중하기. 귀하의 아이디어는 커뮤니티의 우선 순위 또는 비전과 다를 수 있습니다. 그들은 의견을 제시하거나 아이디어를 추구하지 않기로 결정할 수 있습니다. 토론하고 타협을 찾아야하지만, 메인테이너는 당신보다 더 오래 결정을 내리지 않고 살아야합니다. 당신이 그들의 방향에 동의하지 않으면, 당신은 항상 자신의 포크에서 일하거나 자신의 프로젝트를 시작할 수 있습니다.  😇 “제 use case를 지원할 수 없다는 점에 실망했지만, 사용자의 작은 부분에만 영향을 주었다고 설명하셨으니 이해됩니다. 들어주셔서 감사합니다.”  😢 “왜 use case를 지원하지 않나요? 납득할 수 없네요!”무엇보다도 고급스러움을 유지하기. 오픈소스는 전 세계의 공동 작업자로 구성됩니다. 컨텍스트는 언어, 문화, 지역 및 시간대에 걸쳐 손실됩니다. 또한 서면 의사 소통을 통해 분위기 나 분위기를 전달하기가 더 어려워집니다. 이 대화에서 좋은 의도를 가정하십시오. 정중하게 생각을 뒤로 밀거나, 더 많은 맥락을 묻거나, 더 자세하게 설명하는 것은 좋습니다. 인터넷을 찾은 때보다 더 나은 곳을 떠나보십시오.컨텍스트 수집어떤 일을 하기 전에, 빠른 시일내에 당신의 아이디어가 다른 곳에서 논의되지 않았는지 확인하십시오. 프로젝트의 README, 이슈(공개 및 폐쇄), 메일링 리스트 및 스택 오버플로우를 생략하십시오. 모든 것을 처리하는 데 몇 시간을 허비하지 않아도 되지만, 핵심 용어에 대한 빠른 검색은 먼 길을 가집니다.다른 곳에서 아이디어를 찾을 수 없다면, 움직일 준비가 된 것입니다. 프로젝트가 GitHub에 있다면, 이슈를 열거나 pull request을 열어 소통할 수 있습니다:  이슈는 대화나 토론을 시작하는 것과 같습니다  Pull requests 는 솔루션에서 일을 시작하기 위한 것입니다  명확한 질문이나 How-To 질문과 같은 간단한 커뮤니케이션의 경우, 프로젝트에 하나의 채팅 채널이있으면 스택 오버플로우, IRC, 슬랙 또는 다른 채팅 채널을 요청합니다이슈를 열거나 pull request을 요청하기 전에, 프로젝트의 기여 문서(일반적으로 CONTRIBUTING 또는 README 파일)를 확인하여 구체적인 내용을 포함해야하는지 확인하십시오. 예를 들어, 템플릿을 따르거나 테스트를 사용하도록 요청할 수 있습니다.실질적인 기여를 하고 싶다면, 이슈를 열고 작업하십시오. 수락되지 않을 수 있는 일을 하기 전에(깃허브에서는, “Watch”를 클릭하여 토론을 알림 받을 수 있습니다), 잠시동안 프로젝트를 보고 커뮤니티 멤버를 알게되면 도움이됩니다.    You’ll learn a lot from taking a single project you actively use, “watching” it on GitHub and reading every issue and PR.  — @gaearon 프로젝트 합류  이슈 열기일반적으로 다음과 같은 상황에서 이슈를 열어야합니다:  스스로 해결할 수 없는 오류를 보고  높은 수준의 주제 또는 아이디어 (예시. 커뮤니티, 비전, 정책) 토론  새로운 기능이나 다른 프로젝트 아이디어 제안이슈에서 의사소통을 위한 팁:  해결하려는 이슈가 공개적으로 보이면, 사람들이 당신이 그것에 대해 알 수 있도록 이슈에 대해 의견을 말하십시오. 그렇게하면 사람들은 중복으로 작업할 가능성이 줄어 듭니다.  이슈가 조금 전에 열렸다면, 다른 곳에서 해결되었거나, 이미 해결되었기 때문에 작업을 시작하기 전에 확인을 요청하십시오.  이슈를 열었지만 나중에 대답을 알아 낸 경우, 사람들에게 알리고 이슈를 해결할 수 있도록 이슈에 대한 의견을 말하십시오. 그 결과를 문서화하는 것조차도 프로젝트에 대한 기여입니다.pull request 열기일반적으로 다음 상황에서 pull request를 열어야합니다:  사소한 수정 사항 제출 (예 : 오타, 깨진 링크 또는 분명한 오류)  이미 이슈를 열었거나 이미 논의한 내용을 기여로 시작하기pull request은 완료된 작업을 나타내지 않아도됩니다. 일반적으로 초기에 pull request을 열면 다른 사람이 진행 상황을 보거나 피드백을 줄 수 있습니다. 제목 줄에 “WIP”(진행중인 작업)이라고 표시하십시오. 나중에 커밋을 더 추가 할 수 있습니다.프로젝트가 GitHub에 있는 경우, pull request을 제출하는 방법은 다음과 같습니다:  저장소를 포크하고 로컬에 클론합니다. 리모트로 추가하여 로컬을 원래의 “업스트림”저장소에 연결하십시오. “업스트림”의 변경 사항을 자주 가져 와서 최신 상태로 유지하면 pull request을 제출할 때, 병합 충돌이 덜 발생할 수 있습니다. (이 곳에서 더 자세한 지침보기.)  수정을 위한 브랜치 생성하기.  모든 관련있는 이슈 혹은 PR에서 지원중인 문서 참조하기 (ex. “#37 닫음.”)  전후의 스크린 샷 포함합니다 변경 사항에 HTML/CSS의 차이가 포함되어있는 경우, pull request의 본문에 이미지를 끌어다 놓습니다.  변경점을 테스트합니다! 기존 테스트가 있는 경우 변경 사항을 실행하고 필요한 경우 새 테스트를 작성하십시오. 테스트의 존재 여부와 상관없이 변경 사항이 기존 프로젝트를 손상시키지 않는지 확인하십시오.  당신의 능력을 최대한 발휘하여 프로젝트 스타일에 기여하십시오. 이는 들여 쓰기, 세미콜론 또는 주석을 자신의 저장소에서와 다르게 사용하는 것을 의미 할 수 있지만, 메인테이너가 병합하기 쉽고, 다른 사람들이 나중에 이해하고 유지할 수 있게 해줍니다.만약 이것이 첫 pull request 라면, @kentcdodds가 무료 walkthrough 리소스로 생성한 Make a Pull Request를 확인하십시오.What happens after you submit a contribution훌륭합니다! 오픈소스 기여자가 되신 것을 축하드립니다. 우리는 그것이 많은 사람들 중 첫번째가 되기를 바랍니다.기여를 제출하면 다음 중 하나가 발생합니다.😭 당신은 응답을 얻지 못합니다.기여를 하기 전에, 활동의 징조가 있는지 프로젝트를 확인했기를 바랍니다. 그러나 활발한 프로젝트에서도 기여가 응답을 받지 못할 수도 있습니다.1주일 이내에 응답을 받지 못했다면, 같은 쓰레드에서 정중하게 응답하여 누군가에게 검토를 요청하는 것이 좋습니다. 기여자를 검토할 수있는 적절한 사람의 이름을 아는 경우, 해당 스레드에서 이름을 @로 표기할 수 있습니다.절대 그 사람에게 개인적으로 연락하지 마세요; 공개적인 의사소통은 오픈소스 프로젝트에서 필수적이라는 것을 기억하십시오.정중한 충돌을 하고도 아직 아무도 응답하지 않으면, 아무도 응답하지 않을 가능성이 있습니다. 그것은 큰 감정이 아니지만, 그것이 당신을 낙담하게 하지마십시오. 모두에게 일어난 일입니다! 귀하가 통제 할 수 없는 개인적 상황을 포함하여 응답을 받지 못한 이유는 여러 가지가 있을 수 있습니다. 다른 프로젝트나 기여 방법을 찾으십시오. 다른 커뮤니티 구성원들이 참여하고 반응하기 전에 기여에 많은 시간을 투자하지 않는 것이 좋은 이유입니다.🚧 누군가 기여를 변경 요청해야합니다.아이디어의 범위에 대한 피드백이든 코드의 변경 사항이든, 기여 내용을 변경하라는 메시지가 표시되는 것이 일반적입니다.누군가 변경 사항을 요청하면, 반응적입니다. 그들은 당신의 기여를 검토할 시간을 가졌습니다. PR을 열고 멀리두는 것은 나쁜 형태입니다. 만약 변경 방법을 모르는 경우, 문제를 조사한 다음 필요한 경우 도움을 요청하십시오.만약 더 이상 문제를 해결할 시간이 없다면 (예를 들어, 대화가 몇 달 동안 계속되고 상황이 변경된 경우), 메인테이너에게 알려서 응답을 기대하지 않도록 하십시오. 다른 사람이 기꺼이 받아 들일 수 있습니다.👎 귀하의 기여가 받아지지 않았습니다.귀하의 기여는 결국 받아지거나 수락되지 않을 수도 있습니다. 다행히도 이미 너무 많은 작업을 하지 않았으면 합니다. 왜 그것이 받아들여지지 않았는지 확신할 수 없다면, 메인테이너 담당자에게 피드백과 설명을 요청하는 것이 합리적입니다. 그러나 궁극적으로 이것이 자신의 결정임을 존중해야합니다. 논쟁하거나 적대적인 태도를 취하지 마십시오. 동의하지 않으면, 항상 자신의 버전을 포크하고 작업할 수 있습니다!🎉 귀하의 기여가 받아졌습니다.만세! 성공적으로 오픈소스 기여를 만들었습니다!You did it!처음으로 오픈소스에 기여한 사람이든, 새로운 방식으로 기여할 사람을 찾고 있든, 우리는 이 행동에 영감을 얻으시기 바랍니다. 기여가 승인되지 않더라도, 관리자가 당신을 돕기 위해 노력할 때 감사하다는 말을 잊지 마십시오. 오픈소스는 당신과 같은 사람들이 만듭니다: one issue, pull request, comment, or high-five at a time.",
    "url": "/ko/how-to-contribute/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/ko/how-to-contribute/\">\n      오픈소스에 기여하는 방법\n    </a>\n  </h2>\n  <h2 id=\"why-contribute-to-open-source\">Why contribute to open source?</h2>\n\n\n</div>\n"
  },

  
  "/ko/leadership-and-governance/": {
    "title": "리더십과 정치",
    "content": "Understanding governance for your growing project프로젝트가 성장하고 있고, 사람들이 종사하고 있으며, 당신은 이 일을 계속 지키려고합니다. 이 단계에서 누군가가 프로젝트에 커밋하거나 커뮤니티 토론을 해결할 때, 정기적인 프로젝트 참여자를 워크플로우에 통합하는 방법에 대해 궁금해 할 수 있습니다. 질문이 있으시면 답변을 드리겠습니다.What are examples of formal roles used in open source projects?많은 프로젝트가 기여자 역할과 인식을 위해 유사한 구조를 따릅니다.이 역할들이 실제로 의미하는 바는 전적으로 당신에게 달렸습니다. 다음과 같은 몇 가지 유형의 역할을 인식 할 수 있습니다:  메인테이너  기여자  커미터약간의 예시로, “메인테이너”는 커밋 권한이있는 프로젝트의 유일한 사람입니다. 다른 프로젝트에서는 단순히 README에 메인테이너로 올라온 사람들입니다.메인테이너는 반드시 프로젝트에 코드를 작성하는 사람일 필요는 없습니다. 그것은 프로젝트를 전파하는 많은 일을 한 사람일 수도 있고, 프로젝트를 다른 사람들이 더 쉽게 이용할 수 있도록 작성한 문서일 수도 있습니다. 메인테이너가 매일 수행하는 업무와 관계없이 메인테이너는 프로젝트 방향에 대한 책임감을 느끼고, 이를 개선하기 위해 최선을 다하는 사람입니다.모든 사람이 될 수 있는 “기여자”는 이슈 혹은 pull request에 대한 의견을 말하거나, 프로젝트에 가치를 부여하는 사람 (이슈를 다루거나, 코드 작성 혹은 이벤트 구성), 또는 병합된 pull request을 소유한 사람(아마도 기여자의 가장 좁은 정의)이 될 수 있습니다.    [For Node.js,] every person who shows up to comment on an issue or submit code is a member of a project’s community. Just being able to see them means that they have crossed the line from being a user to being a contributor.  — @mikeal, “건강한 오픈소스”  “커미터”라는 용어는 특정 유형의 책임인 커밋 액세스를 다른 형태의 기여와 구별하는 데 사용될 수 있습니다.원하는 방식으로 프로젝트 역할을 정의할 수 있지만, 보다 폭 넓은 정의를 사용하여 더 많은 기여 양식을 권장하십시오. 리더십 역할을 사용하여 기술 능력에 관계없이 프로젝트에 뛰어난 기여를 한 사람을 공식적으로 인정할 수 있습니다.    You might know me as the “inventor” of Django…but really I’m the guy who got hired to work on a thing a year after it was already made. (…) People suspect that I’m successful because of my programming skill…but I’m at best an average programmer.  — @jacobian, “파이콘 2015 키노트” (비디오)  How do I formalize these leadership roles?리더십 역할을 공식화하면 사람들이 소유권을 느끼게되고 도움이 필요한 다른 커뮤니티 회원에게도 도움이 됩니다.소규모 프로젝트의 경우, 리더 지정은 README 또는 CONTRIBUTORS 텍스트 파일에 이름을 추가하는 것처럼 간단할 수 있습니다.대규모 프로젝트의 경우,만약 웹사이트를 가지고있다면, 팀 페이지를 만들거나 거기에 프로젝트 리더를 나열하십시오. 예시로, Postgres는 각각 기여자를 위한 짧은 프로필을 포괄적인 팀 페이지에 넣었습니다.만약 프로젝트에 매우 활발하게 기여한 커뮤니티가 있는 경우, 메인테이너 또는 다른 이슈 영역(예시. 보안, 이슈 security, 시위, 커뮤니티 행동)의 소유권을 가진 사람들의 소위원회로 “핵심 팀”을 구성 할 수 있습니다. 사람들이 자신을 할당하는 것이 아니라, 가장 흥분되는 역할에 대해 스스로 조직하고 자원 봉사하게 하십시오.  [We] supplement the core team with several “subteams”. Each subteam is focused on a specific area, e.g., language design or libraries. (…) To ensure global coordination and a strong, coherent vision for the project as a whole, each subteam is led by a member of the core team.  — “Rust 가버넌스 RFC”  리더십 팀은 IRC와 같이 지정된 채널을 만들거나 프로젝트를 토론하기 위해 정기적으로 (Gitter 또는 Google 행 아웃과 같은)모임을 갖기를 원할 수 있습니다. 다른 사람들이 들을 수 있도록 그 모임을 공개할 수도 있습니다.예시로, Cucumber-ruby는, 매주 근무 시간에 가졌습니다.리더십 역할을 확립한 후에는 사람들이 어떻게 달성할 수 있는지 문서화하는 것을 잊지 마십시오! 누군가가 어떻게 메인테이너나 프로젝트의 소위원회에 참여할 수 있는지에 대한 명확한 프로세스를 수립하고 GOVERNANCE.md에 기록합시다.Vossibility와 같은 도구는 프로젝트에 기여한 사람(또는 참여하지 않은 사람)을 공개적으로 추적하는 데 도움이 될 수 있습니다. 이 정보를 문서화하면, 메인테이너가 사적인 결정을 내리는 그들만의 커뮤니티라는 인식을 피할 수 있습니다.마지막으로, 프로젝트가 GitHub에 있을 경우, 프로젝트를 개인 계정에서 조직으로 옮기고 적어도 하나의 백업 관리자를 추가하는 것을 고려하십시오. GitHub Organizations에서는 권한 및 여러 저장소를 쉽게 관리하고 공유 소유권을 통해 프로젝트의 유산을 보호합니다.When should I give someone commit access?어떤 사람들은 당신이 기여하는 모든 사람에게 헌신적으로 접근해야한다고 생각합니다. 그렇게하면 더 많은 사람들이 프로젝트 소유권을 느낄 수 있습니다.반면에, 특히 더 크고 복잡한 프로젝트의 경우, 자신의 의지를 입증한 사람들에게만 커밋 액세스 권한을 부여할 수 있습니다. 그렇게하는 데 올바른 방법이 없습니다 - 당신을 가장 편안하게 만드는 것은 무엇입니까!만약 GitHub에 프로젝트가 있다면, protected branches를 사용하여 특정 브랜치로 푸시 할 수있는 사람과 상황을 관리할 수 ​​있습니다.    Whenever somebody sends you a pull request, give them commit access to your project. While it may sound incredibly stupid at first, using this strategy will allow you to unleash the true power of GitHub. (…) Once people have commit access, they are no longer worried that their patch might go unmerged…causing them to put much more work into it.  — @felixge, “Pull Request 핵”  What are some of the common governance structures for open source projects?오픈소스 프로젝트와 관련된 세 가지 공통 관리 구조가 있습니다.      BDFL: BDFL은 “생명을 위한 자비로운 독재자”(Benevolent Dictator for Life)의 약자입니다. 이 구조하에서 한 사람(보통 프로젝트의 초기 저자)은 모든 주요 프로젝트 결정에 대해 최종 결정권을 갖습니다. 파이썬은 고전적인 예시입니다. 작은 프로젝트는 한명 또는 두명의 관리자가 있기 때문에 기본적으로 BDFL일 것입니다. 한 회사에서 시작된 프로젝트도 BDFL 범주에 속할 수도 있습니다.        실력주의: (Note: “능력주의”라는 용어는 일부 지역 사회에 부정적인 의미를 지니며 복잡한 사회 정치적 역사를 가지고있습니다.) 능력있는 사회에서 활동적인 프로젝트 기여가 (“공로”를 입증하는 사람들)에게 공식적인 의사 결정 역할이 부여됩니다. 결정은 일반적으로 순수한 투표 컨센서스를 기반으로합니다. 실력주의 개념은 Apache Foundation에 의해 개척되었습니다; 모든 아파치 프로젝트는 장점이 있습니다. 기여는 회사가 아니라 집단을 대표하는 개인이 할 수 있습니다.        자유주의 기여: 자유주의 기여 모델하에서, 가장 많은 일을 하는 사람들이 가장 영향력있는 사람으로 인식되지만, 이것은 역사적인 기여가 아니라 현재의 일을 기반으로합니다. 주요 프로젝트 결정은 순수한 표결보다는 합의를 모색하는 과정(주요 불만 사항을 논의)을 토대로 이루어지며, 가능한 많은 공동체 관점을 포함하기 위해 노력합니다. 프로젝트의 인기있는 예제는 Node.js와 Rust에 포함된 자유주의 기여 모델을 사용합니다.  어느 것을 사용해야합니까? 그것은 당신에게 달렸습니다! 모든 모델에는 장점과 절충점이 있습니다. 처음에는 전혀 다른 것처럼 보일 수 있지만, 세 모델 모두 공통적으로 보입니다. 이 모델 중 하나를 채택하는 데 관심이 있다면 다음 템플릿을 확인하십시오:  BDFL 모델 템플릿  실력주의 모델 템플릿  Node.js의 자유주의 기여 정책Do I need governance docs when I launch my project?프로젝트 관리 방식을 작성할 적절한 시기는 없지만, 커뮤니티 역학 관계가 성립했다면 정의하는 것이 훨씬 쉽습니다. 오픈소스 관리에 대한 가장 좋은(그리고 가장 어려운) 부분은 그것이 커뮤니티에 의해 형성된다는 것입니다!일부 초기 문서는 필연적으로 프로젝트 관리에 기여할 것이므로, 가능하다면 글을 써내려가는 것을 시작하십시오. 예를 들어, 프로젝트 시작시에도 동작에 대한 명확한 기대치 또는 기여 프로세스가 어떻게 작동하는지 정의할 수 있습니다.오픈소스 프로젝트를 시작한 회사의 일원이라면, 회사가 앞으로 나아갈 프로젝트에 대한 결정을 유지하고 결정할 방법에 대해 공개하기 전에 내부 토론을 가질 필요가 있습니다. 귀사가 프로젝트에 참여하는 방법에 대해 공개적으로 설명하고 싶을 수도 있습니다.    We assign small teams to manage projects on GitHub who are actually working on these at Facebook. For example, React is run by a React engineer.  — @caabernathy, “Facebook의 오픈소스에 대한 내부 모습”  What happens if corporate employees start submitting contributions?성공적인 오픈소스 프로젝트는 많은 사람들과 회사에서 사용되며, 결국 일부 회사는 궁극적으로 프로젝트에 묶인 수익원을 갖게 될 것입니다. 예를 들어, 회사는 상용 서비스에서 프로젝트 코드를 하나의 구성 요소로 사용할 수 있습니다.프로젝트가 널리 사용됨에 따라 전문 지식을 보유한 사람들은 더 많은 수요가 생깁니다. - 때로는 프로젝트에서 수행하는 일에 대해 보수를 받습니다.상업 활동을 평범하고 또 다른 개발 에너지 원으로 간주하는 것이 중요합니다. 유료 개발자는 물론 지불하지 않은 애플리케이션에 대해서는 특별한 대우를 받아서는 안됩니다. 각 기부금은 기술적 장점으로 평가되어야합니다. 그러나 사람들은 상업 활동에 익숙해져야하며, 특정 향상이나 기능을 선호할 때 자신의 use cases에 대해 쉽게 알 수 있어야합니다.“상용”은 “오픈소스”와 완전히 호환됩니다. “상업적”이란 말은 어딘가에 돈이 들어 있다는 의미입니다. 소프트웨어가 상용으로 사용되고 있다는 것이고, 프로젝트가 채택되면서 점점 더 많이 이용 될 가능성이 높습니다. 오픈소스 소프트웨어가 비 오픈소스 제품의 일부로 사용될 때, 전체 제품은 여전히 ​​”독점”소프트웨어이지만, 오픈소스와 마찬가지로 상업적 또는 비상업적 용도로 사용될 수 있습니다.다른 사람들과 마찬가지로, 상업적 동기를 부여받은 개발자는 기여도의 질과 양을 통해 프로젝트에 영향력을 행사합니다. 분명히 일정한 시간동안 돈을 지불한 개발자는 돈을 지불하지 않은 사람보다 더 많은 것을 할 수 있지만, 괜찮습니다. 지불은 누군가가 얼마나 많은 영향을 줄 수 있는지에 대한 많은 요인 중 하나일뿐입니다. 사람들이 그 기여를 할 수 있게 해주는 외적 요인이 아닌, 기여에 초점을 맞춘 프로젝트 토론을 유지하십시오.Do I need a legal entity to support my project?돈을 처리할 필요가 없다면, 오픈소스 프로젝트를 지원하는 법인이 필요하지 않습니다.예시로, 상업용 비즈니스를 만들고 싶다면 C Corp 또는 LLC(미국에 거주하는 경우)를 설정해야합니다. 오픈소스 프로젝트와 관련된 계약 업무를 수행하는 중이라면, 독점 주인으로 돈을 받거나 LLC (미국에있는 경우)를 설립할 수 있습니다.만약 오픈소스 프로젝트에 대한 기부를 받고 싶다면, (예를 들어 PayPal 또는 Stripe을 사용하여)기부 버튼을 설정할 수 있지만, 하지만 자격이 되는 비영리 단체(미국에 거주하는 경우 501c3)가 아닌 이상 돈은 세금 공제되지 않습니다.많은 프로젝트가 비영리 단체를 설립하는 문제를 겪고 싶어하지 않으므로, 대신 비영리 재정 스폰서를 찾습니다. 재정 보증인은 귀하를 대신하여 기부금을 수령합니다. Software Freedom Conservancy, 아파치 재단, 이클립스 재단, 리눅스 재단 그리고 Open Collective는 오픈소스 프로젝트를 위한 회계 스폰서 역할을하는 조직의 예시입니다.    Our goal is to provide an infrastructure that communities can use to be self sustainable, thus creating an environment where everyone — contributors, backers, sponsors — get concrete benefits out of it.  — @piamancini, “자선 단체의 틀을 넘어서”  프로젝트가 특정 언어 또는 생태계와 밀접하게 관련되어 있다면, 함께 작업할 수 있는 관련 소프트웨어 기반이 있을겁니다. 예시로, 파이썬 소프트웨어 재단은 파이썬 패키지 관리자인 PyPI를 돕고, Node.js 재단은 노드 기반 프레임워크인 Express.js를 돕습니다.",
    "url": "/ko/leadership-and-governance/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/ko/leadership-and-governance/\">\n      리더십과 정치\n    </a>\n  </h2>\n  <h2 id=\"understanding-governance-for-your-growing-project\">Understanding governance for your growing project</h2>\n\n\n</div>\n"
  },

  
  "/ko/legal/": {
    "title": "오픈소스의 법적 측면",
    "content": "Understanding the legal implications of open source세계와 창의적인 작업을 공유하는 것은 흥미롭고 보람있는 경험이 될 수 있습니다. 그것은 또한 당신이 모른다고 걱정해야한다는 것을 합법적이라는 걸로 의미 할 수 있습니다. 고맙게도 처음부터 다시 시작할 필요는 없습니다. 귀하의 법적 요구 사항이 있습니다. (이 내용을 파기전에, 면책조항을 읽으십시오.)Why do people care so much about the legal side of open source?물어봤다는건 다행입니다! 창의적인 작업(작성, 그래픽 또는 코드)을 할 때, 그 저작물은 기본적으로 독점적인 저작권하에 있습니다. 즉, 법은 귀하의 저작물의 작성자로서 다른 사람들이 할 수 있는 것에 대해 귀하가 말하고있는 것으로 간주합니다.일반적으로, 이는 타인이 인계, 훼손 또는 소송의 위험이 없이 작업을 사용, 복사, 배포 또는 수정할 수 있음을 의미합니다.그러나 오픈소스는 다른 사람들이 작업을 사용, 수정 및 공유하기를 기대하기 때문에 드문 경우입니다. 그러나 법적 기본값은 독점적인 저작권이므로 명시적으로 이러한 사용 권한을 명시한 사용권이 필요합니다.오픈소스 라이선스를 신청하지 않으면, 프로젝트에 기여한 모든 사람도 자신의 저작물의 독점적인 저작권자가 됩니다. 즉, 아무도 자신의 기여를 사용, 복사, 배포 또는 수정할 수 없으며 “아무도”에서는 귀하를 포함하지 않는다는 의미입니다.마지막으로, 프로젝트는 사용자가 알지 못하는 라이선스 요구 사항과의 종속성을 가질 수 있습니다. 프로젝트의 커뮤니티 또는 고용주의 정책에 따라 프로젝트에서 특정 오픈소스 라이선스를 사용해야 할 수도 있습니다. 아래에서 이러한 상황을 다룰 것입니다.Are public GitHub projects open source?깃허브에서 새로운 프로젝트를 만들려고 할 때, 비공개 또는 공개 저장소로 만드는 옵션을 선택할 수 있습니다.GitHub 프로젝트를 공개하는 것은 프로젝트 라이센싱과 동일하지 않습니다. 공개 프로젝트는 GitHub의 서비스 약관에 명시되어 있으며, 다른 사람들이 프로젝트를 포크화할 수는 있지만, 그렇지 않은 경우에는 권한이 없습니다.다른 사람들이 프로젝트를 사용, 복사, 수정 또는 다시 사용할 수 있게하려면, 오픈소스 라이선스를 포함해야합니다. 예를 들어, 권한을 부여하지 않는다는 조건에서는 공개적으로 GitHub 프로젝트의 일부를 코드에 명시적으로 사용할 수는 없습니다.Just give me the TL;DR on what I need to protect my project.운이 좋았습니다. 오늘날 오픈소스 라이선스는 표준화되어 있고 사용하기 쉽기 때문입니다. 기존 라이선스를 프로젝트에 직접 복사하여 붙여넣을 수 있습니다.MIT, Apache 2.0, 그리고 GPLv3는 가장 인기있는 오픈소스 라이선스입니다, 그러나 선택할 수 있는 다른 옵션도 있습니다. choosealicense.com에서 이러한 라이선스의 전체 텍스트 및 사용 방법에 대한 지침을 찾을 수 있습니다.GitHub에서 새로운 프로젝트를 만들 때, 라이선스를 추가할 것인지 물어봅니다.    A standardized license serves as a proxy for those without legal training to know precisely what they can and can’t do with the software. Unless absolutely required, avoid custom, modified, or non-standard terms, which will serve as a barrier to downstream use of the agency code.  — @benbalter, “정부 변호인이 오픈소스 소프트웨어 라이선스에 대해 알아야할 모든 것”  Which open source license is appropriate for my project?빈 슬레이트에서 시작한다면, MIT 라이선스를 잘못 읽는 것은 어렵습니다. 짧고 이해하기 쉽기 때문에 저작권 고지를 포함하여 라이선스 사본을 보관하는 한 누구나 아무 것도 할 수 없습니다. 필요한 경우 다른 라이선스로 프로젝트를 릴리스 할 수 있습니다.그렇지 않으면 프로젝트에 적합한 오픈소스 라이선스를 선택하는 것이 목표에 달려 있습니다.프로젝트에 의존성이 있을 가능성이 큽니다. 예를 들어, Node.js 프로젝트를 오픈소스로 사용하는 경우 노드 패키지 관리자(npm)의 라이브러리를 사용할 수 있습니다. 의존하는 각 라이브러리에는 자체 오픈소스 라이선스가 있습니다. 각 라이선스가 “허용”(다운스트림 라이선스의 조건없이 공용 사용, 수정 및 공유할 수 있는 권한 부여)되어 있으면, 원하는 라이선스를 사용할 수 있습니다. 일반적인 허용 라이선스에는 MIT, Apache 2.0, ISC 및 BSD가 포함됩니다.반대로, 종속성 라이선스가 “강력한 카피레프트”(동일한 라이선스를 다운스트림으로 사용하는 조건하에 공개 권한을 부여하는 경우)인 경우, 프로젝트는 동일한 라이선스를 사용해야 합니다. 일반적인 강력한 카피레프트 라이선스에는 GPLv2, GPLv3 및 AGPLv3이 포함됩니다.프로젝트를 사용하고 기여할 수 있는 커뮤니티를 고려해보십시오:  프로젝트를 다른 프로젝트의 종속성으로 사용 하시겠습니까? 관련 커뮤니티에서 가장 많이 사용되는 라이선스를 사용하는 것이 가장 좋습니다. 예시로, MIT는 npm libraries에서 가장 인기있는 라이선스입니다.  프로젝트를 대기업에 어필하고 싶습니까? 대기업은 모든 참여자의 명시적인 특허 라이선스를 원할 것입니다. 이 경우, Apache 2.0는 귀하(그리고 그들)을 커버해 줄것 입니다.  독점 소스 소프트웨어에서 기여를 사용하고 싶지 않은 기여자에게 프로젝트를 어필하고 싶습니까? GPLv3 혹은 (또한 독점 소스 서비스에 기여하지 않으려는 경우) AGPLv3은 잘될 것 입니다.귀하의 회사는 오픈소스 프로젝트에 대한 특정 라이선스 요구 사항을 가지고 있을 수 있습니다. 예를 들어, 회사에서 회사의 독점 소스 제품에서 프로젝트를 사용할 수 있도록 허용 라이선스가 필요할 수 있습니다. 또는 귀사만 독점 소스 소프트웨어에서 프로젝트를 사용할 수 있도록 강력한 카피 레프트 라이선스와 추가 기여자 계약(아래 참조)이 필요할 수 있습니다. 또는 표준, 사회적 책임 또는 투명성과 관련된 특정 요구 사항이 있을 수 있습니다. 이러한 요구 사항에는 특정 라이선스 전략이 필요할 수 있습니다. 귀하의 회사 법률 부서에 이야기하십시오.GitHub에서 새 프로젝트를 만들면, 라이선스를 선택할 수 있는 옵션이 제공됩니다. 위에서 언급한 라이선스 중 하나를 포함하면 GitHub 프로젝트가 오픈소스로 됩니다. 다른 옵션을 보려면 choosealicense.com에서 소프트웨어가 아닌 프로젝트에 적합한 라이선스를 찾으십시오.What if I want to change the license of my project?대부분의 프로젝트는 라이선스를 변경할 필요가 없습니다. 그러나 때때로 상황이 바뀝니다.예를 들어, 프로젝트가 커짐에 따라 종속성이나 사용자가 추가되거나 회사에서 전략을 변경합니다. 전략 중 하나는 다른 라이선스를 요구하거나 원할 수 있습니다. 또한 처음부터 프로젝트 라이선스를 소홀히했다면, 라이선스를 추가하는 것은 사실상 라이선스를 변경하는 것과 같습니다. 프로젝트 라이선스를 추가하거나 변경할 때 고려해야 할 세 가지 기본 사항이 있습니다.복잡합니다. 라이선스 호환성 및 규정 준수 여부를 결정하고 저작권을 보유한 사람은 매우 복잡하고 혼란스러울 수 있습니다. 새로운 릴리즈 및 기여용으로 새롭지만 호환되는 라이선스로 전환하는 것은 기존 기여를 모두 재 라이선스하는 것과 다릅니다. 법률팀에 라이선스 변경 희망의 첫 번째 힌트를 포함시키십시오. 프로젝트의 저작권 소유자로부터 라이선스 변경에 대한 허가를 받았거나 취득할 수있는 경우에도 변경 사항이 프로젝트의 다른 사용자 및 제공자에게 미치는 영향을 고려하십시오. 라이선스 변경은 프로젝트의 이해 관계자와 명확한 커뮤니케이션 및 협의를 통해 원활하게 진행될 수 있는 프로젝트의 “거버넌스 이벤트”라고 생각하십시오. 프로젝트를 시작할 때부터 적절한 라이선스를 선택하여 사용하는 더 많은 이유가 있습니다!프로젝트의 기존 라이선스가 있습니다. 프로젝트의 기존 라이선스가 변경하려는 라이선스와 호환되는 경우, 새 라이선스를 사용하기만 하면됩니다. 라이선스 A가 라이선스 B와 호환되면 B의 조건을 준수하면서 A의 조건을 준수하게됩니다(반대의 경우도 가능). 따라서 현재 MIT와 같은 허가된 라이선스를 사용하고 있다면 MIT 라이선스 사본 및 관련 저작권 고지를 보유하는 한 더 많은 조건으로 라이선스로 변경할 수 있습니다(즉, 계속해서 MIT 라이선스의 최소 조건 준수). 그러나 현재 라이선스가 허용되지 않는 경우(예:카피 레프트 또는 라이선스가 없는 경우), 저작권자가 유일하지 않은 경우, 프로젝트 라이선스를 MIT로 변경할 수 없습니다. 근본적으로 허가된 라이선스로 프로젝트의 저작권 소유자는 라이선스 변경을 사전 허가합니다.프로젝트의 기존 저작권 보유자가 있습니다. 귀하가 프로젝트에 단독으로 기여한 경우, 귀하 또는 귀하의 회사는 프로젝트의 유일한 저작권자입니다. 귀하 또는 귀하의 회사에서 원하는 모든 라이선스를 추가하거나 변경할 수 있습니다. 그렇지 않으면 라이선스를 변경하기 위해 동의해야하는 다른 저작권 소유자가 있을 수 있습니다. 그들은 누구입니까? 프로젝트에 커밋을 한 사람은 시작하기 좋은 곳입니다. 그러나 어떤 경우, 저작권은 해당 사용자의 고용주가 보유하게됩니다. 어떤 경우에는 사람들이 최소한의 기여를 했을 뿐이지만, 몇 줄의 코드가 저작권의 대상이 되지않는다는 단호하고 신속한 규칙은 없습니다. 그럼 무엇을 해야합니까? 상대적으로 규모가 작고 젊은 프로젝트의 경우에는, 기존의 모든 기여자가 문제의 라이선스 변경에 동의하거나 이슈 혹은 pull request할 수 있습니다. 크고 수명이 긴 프로젝트의 경우, 많은 기여가와 소유인을 찾아야 할 수도 있습니다. 모질라는 파이어폭스, 썬더버드 및 관련 소프트웨어를 재 라이선스하기 위해 수년(2001-2006)을 보냈습니다.또는 기여자가 기존 오픈소스 라이선스에서 허용하는 것 이상으로 특정 조건하에서 특정 라이선스 변경 사항에 대해 사전에 동의할 수 있습니다 (추가 기여자 계약 - 아래 참조). 이렇게하면 라이선스 변경의 복잡성이 조금씩 바뀝니다. 변호사의 도움이 더 필요합니다. 라이선스 변경을 수행할 때는, 프로젝트의 이해 관계자와 명확하게 의견을 나눌 수 있습니다.Does my project need an additional contributor agreement?아마도 그렇지 않습니다. 대다수의 오픈소스 프로젝트에서 공개 소스 라이선스는 인바운드(기여자)와 아웃바운드(다른 참여자 및 사용자) 라이선스로 암묵적으로 사용됩니다. 프로젝트가 GitHub에 있는 경우, GitHub 서비스 약관은 “인바운드 = 아웃 바운드”명시적 기본값로 지정합니다.기여자 라이선스 계약(CLA)이라고도 부르는 추가 기여자 계약은 프로젝트 메인테이너를 위한 관리 작업을 생성할 수 있습니다. 계약서에 얼마나 많은 작업을 추가할지는 프로젝트와 구현에 달려 있습니다. 간단한 동의는 프로젝트 참여자가 프로젝트 오픈소스 라이선스하에 기여할 수 있는 권리를 클릭으로 확인해야 할 수도 있습니다. 보다 복잡한 합의는 법적 검토와 기여자 고용주의 서명을 요구할 수 있습니다.또한 일부 사람들은 불필요하거나 이해하기 힘들거나 불공정하다고 생각되는 “서류 작업”을 추가함으로써 (계약 수령자가 프로젝트 참여자보다 더 많은 권리를 얻거나 일반인이 프로젝트의 오픈소스 라이선스를 통해 수행 할 때) 추가 기여자 계약이  프로젝트의 커뮤니티에 비우호적이라고 인식될 수 있습니다.      We have eliminated the CLA for Node.js. Doing this lowers the barrier to entry for Node.js contributors thereby broadening the contributor base.  — @bcantrill, “Node.js 기여 확대”  프로젝트에 대한 추가 기여자 계약을 고려할 수 있는 몇 가지 상황은 다음과 같습니다:  변호사는 기여자가 오픈소스 라이선스 자체가 충분하지 않다고 생각하기 때문에 모든 기여자가 기여 조항을 명시적으로 (sign, 온라인 또는 오프라인) 받아들이기를 원합니다. 이것이 유일한 관심사라면, 프로젝트의 오픈소스 라이선스를 인정하는 기여자 계약만으로 충분할 것입니다. jQuery Individual Contributor License Agreement는 경량 추가 제공자 계약의 좋은 예입니다. 일부 프로젝트의 경우, 개발자 인증서 발급을 사용할 수 있습니다.  귀하의 프로젝트는 익스프레스 특허 부여 (MIT 등)가 포함되지 않은 오픈소스 라이선스를 사용하며, 모든 기여자의 특허 보조금이 필요합니다. 그 중 일부는 귀하를 타겟으로 삼을 수있는 대규모 특허 포트폴리오를 보유한 회사 또는 프로젝트의 다른 참여자 및 사용자에서 사용할 수 있습니다. Apache Individual Contributor License Agreement는 일반적으로 사용되는 추가 기여자 계약으로 Apache License 2.0에서 발견된 특허권 부여를 미러링합니다.  프로젝트에 카피레프트 라이선스가 있지만, 프로젝트의 독점 버전을 배포해야합니다. 모든 저작자가 저작권을 양도하거나 관할권을 부여할 수 있는 허가권을 사용자에게 부여해야합니다. MongoDB Contributor Agreement는 이러한 유형의 계약입니다.  평생동안 프로젝트를 변경하고 기여자가 그러한 변경 사항에 동의하기를 원한다고 생각하십시오.프로젝트에 기여자 계약을 추가로 사용해야하는 경우 기여자 산만을 최소화하기 위해 CLA 어시스턴트와 같은 통합 사용을 고려하십시오.What does my company’s legal team need to know?오픈소스 프로젝트를 회사 직원으로 공개하는 경우, 먼저 법률팀이 오픈소스 프로젝트임을 알고 있어야합니다.더 좋든 나쁘든, 개인 프로젝트일지라도 알려주도록하십시오. 특히 회사의 비즈니스와 관련이 있거나 프로젝트를 개발하기 위해 회사 자원을 사용하는 경우, 프로젝트 관리를 제공하는 회사와 “직원 IP 계약”을 체결했을 수도 있습니다. 귀사는 귀사에게 쉽게 허가권을 부여해야하며, 직원 친화적인 IP 계약 또는 회사 방침을 이미 거쳐야 할 수도 있습니다. 그렇지 않은 경우, 협상을 통해 (예 : 프로젝트가 회사의 전문 학습 및 개발 목표를 제공한다고 설명), 또는 더 나은 회사를 찾을 때까지 프로젝트 작업을 하지 않을 수 있습니다.당신이 회사를 위해 프로젝트를 오픈소스화하고 있다면, 분명히 알려주십시오. 법무팀은 이미 귀사의 비즈니스 요구 사항 및 전문성을 토대로 프로젝트가 종속성의 라이선스를 준수하는지 확인하기 위해 오픈 소스 라이선스 (및 추가로 제공되는 계약자 계약)에 대한 정책을 이미 가지고 있습니다. 그렇지 않다면, 당신과 그들은 운에 따라야 합니다! 귀하의 법률팀은 당신과 함께 이 일을 이해하기 위해 열심히 노력해야 합니다. 생각해야될 몇 가지 사항이 있습니다:      서드파티 부속 프로젝트에 다른 사람이 만든 종속성이 있거나 다른 사람의 코드를 포함하거나 사용합니까? 오픈소스인 경우, 자료의 오픈소스 라이선스를 준수해야합니다. 먼저 타사 오픈소스 라이선스 (위 참조)와 함께 작동하는 라이선스를 선택하십시오. 프로젝트가 제 3자 오픈소스 자료를 수정 또는 배포하는 경우, 법률팀은 저작권 침해와 같은 제 3자 오픈소스 라이선스의 다른 조건을 충족하고 있음을 알고 싶어합니다. 프로젝트에서 오픈소스 라이선스가 없는 다른 사용자의 코드를 사용하는 경우, 타사 관리자에게 오픈소스 라이선스 추가를 요청해야합니다. 얻을 수 없다면 프로젝트에서 코드 사용을 중단하십시오.        영업 기밀: 프로젝트에서 회사가 일반 대중에게 공개하기를 원하지 않는 것이 있는지 여부를 고려하십시오. 그렇다면 비공개로 유지하려는 자료를 추출한 후, 프로젝트의 나머지 부분을 소스로 열 수 있습니다.        특허: 귀하의 회사가 귀하의 프로젝트를 공개하여 특허를 신청할 계획입니까? 안타깝게도, 기다려달라는 요청을 받을 수 있습니다 (또는 회사에서 애플리케이션의 지혜를 재고 할 수도 있음). 대규모 특허 포트폴리오를 보유한 회사의 직원으로부터 프로젝트에 대한 기여가 기대되는 경우, 법무팀은 기여자(Apache 2.0 또는 GPLv3 등)의 명시적인 특허 지원 또는 추가 기부자 동의서를 사용하여 라이선스를 사용하기를 원할 수 있습니다(위 참조).        상표: 프로젝트 이름이 기존 상표와 충돌하지 않는지 다시 확인하십시오. 만약 프로젝트에서 자신의 회사 상표를 사용하는 경우에 충돌이 발생하지 않는지도 확인하십시오. FOSSmarks는 무료 및 오픈소스 프로젝트의 맥락에서 상표를 이해하는 실질적인 가이드입니다.        개인 정보: 프로젝트가 사용자에 대한 데이터를 수집합니까? 법률팀은 회사 정책 및 외부 규정을 준수하도록 도울 수 있습니다.  만약 회사의 첫번째 오픈소스 프로젝트를 릴리스하는 경우, 위의 내용만으로도 충분합니다 (걱정하지 마십시오. 대부분의 프로젝트가 큰 우려를 제기해서는 안됩니다).장기적으로, 법률팀은 오픈소스에 대한 참여를 통해 더 많은 것을 얻고, 안전을 유지할 수 있도록 더 많은 일을 할 수 있습니다:  직원 기여 정책: 직원이 오픈소스 프로젝트에 기여하는 방법을 지정하는 기업 정책을 개발하는 것을 고려하십시오. 분명한 정책은 직원들 사이의 혼란을 줄이고 작업의 일부 또는 자유 시간에 상관없이, 회사의 이익을 최대한 활용하여 오픈소스 프로젝트에 기여할 수 있도록 지원합니다. 좋은 예시는 Rackspace의 모델 IP 및 오픈소스 기여 정책입니다.    Letting out the IP associated with a patch builds the employee’s knowledge base and reputation. It shows that the company is invested in the development of that employee and creates a sense of empowerment and autonomy. All of these benefits also lead to higher morale and better employee retention.  — @vanl, “모델 IP 및 공개 소스 기여 정책”    공개 할 내용: (거의) 다? 귀하의 법무팀이 귀하의 회사 오픈소스 전략을 이해하고 투자한다면, 귀하의 노력을 방해하는 것보다 최선을 다 할 수 있습니다.  준수: 회사가 오픈소스 프로젝트를 공개하지 않더라도, 다른 회사의 오픈 소스 소프트웨어를 사용합니다. Awareness and process는 두통, 제품 지연 및 법적 소송을 예방할 수 있습니다.  Organizations must have a license and compliance strategy in place that fits both [“permissive” and “copyleft”] categories. This begins with keeping a record of the licensing terms that apply to the open source software you’re using — including subcomponents and dependencies.  — Heather Meeker, “오픈소스 소프트웨어 : 규정 준수 기본 사항 및 모범 사례”    특허: 귀사는 회원사의 주요 오픈소스 프로젝트 사용을 보호하거나 다른 대체 특허 라이센싱을 모색하기 위해, Open Invention Network에 가입 할 수 있습니다.  가버넌스: 특히 프로젝트를 회사 외부의 법인으로 옮기는 것이 이치에 맞을 경우에 할 수 있습니다.",
    "url": "/ko/legal/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/ko/legal/\">\n      오픈소스의 법적 측면\n    </a>\n  </h2>\n  <h2 id=\"understanding-the-legal-implications-of-open-source\">Understanding the legal implications of open source</h2>\n\n\n</div>\n"
  },

  
  "/ko/metrics/": {
    "title": "오픈소스 측정항목",
    "content": "Why measure anything?데이터를 현명하게 사용하면, 오픈소스 메인테이너로서 더 나은 의사 결정을 내릴 수 있습니다.자세한 정보를 통해 다음을 수행 할 수 있습니다:  사용자가 새로운 기능에 어떻게 반응하는지 이해하기  새로운 사용자가 어디서 왔는지 파악하기  이상한 사용 사례 또는 기능을 식별하거나 지원할지 여부를 결정하기  프로젝트의 인기를 정량화하기  프로젝트 사용 방법 이해하기  스폰서십과 보조금을 통해 돈을 모으기예시로, Homebrew는 Google 웹 로그 분석으로 우선 순위를 결정하는 데 도움이 되는 것으로 나타났습니다:  Homebrew는 무료로 제공되며, 여가 시간에 자원 봉사자들에 의해 전적으로 운영됩니다. 결과적으로, 우리는 미래의 기능을 설계하고 현재 작업의 우선 순위를 정하는 최선의 방법을 결정하기 위해 Homebrew 사용자에 대한 상세한 사용자 연구를 할 수 있는 자원이 없습니다. 익명 집계 사용자 분석을 사용하면 사람들이 Homebrew를 사용하는 방법, 장소 및 시기에 따라 수정 및 기능의 우선 순위를 지정할 수 있습니다.인기가 모든 것이 아닙니다. 누구나 다른 이유로 오픈소스를 사용합니다. 오픈소스 메인테이너로서의 목표가 업무를 과시하거나, 코드에 대해 투명하게 표현하거나, 재미있게 만나는 것이라면, 측정이 중요하지 않을 수도 있습니다.If you are interested in understanding your project on a deeper level, read on for ways to analyze your project’s activity.Discovery누구든지 프로젝트를 사용하거나 기여할 수 있게 하기전에, 이것이 존재 하는 지를 알아야합니다. 자신에게 물어보십시오: 이 프로젝트를 찾는 사람들입니까?얼마나 많은 사람들이 당신의 프로젝트에 도착했는지, 어디에서 왔는지를 볼 수 있습니다. 프로젝트 페이지에서 “그래프”를 클릭 한 다음, “트래픽”을 클릭하십시오. 이 페이지에서 다음을 볼 수 있습니다:      총 페이지 뷰: 얼마나 많은 조회 횟수로 프로젝트를 보았는지 알려줍니다        총 고유 방문자수: 얼마나 많은 사람들이 프로젝트를 보았는지 알려줍니다        참고한 사이트: 방문자가 어디에서 왔는지 알려줍니다. 이 통계는 잠재 고객에게 도달할 수있는 위치와 홍보 활동의 효과를 파악하는 데 도움이됩니다.        인기 컨텐츠: 방문자가 프로젝트에서 어디로 이동했는지 알려주며, 페이지 뷰와 고유 방문자별로 세분화됩니다.  GitHub stars는 또한 인기의 기준치 측정을 제공하는 데 도움이 될 수 있습니다. GitHub star는 반드시 다운로드 및 사용량과 상관 관계가 있는 것은 아니지만, 얼마나 많은 사람들이 귀하의 작업에 주의를 기울이고 있는지 말해 줄 수 있습니다.특정 장소에서 검색 가능성을 추적 할 수도 있습니다: 예를 들어, Google 페이지랭크, 프로젝트 웹 사이트의 추천 트래픽 또는 다른 오픈소스 프로젝트 또는 웹 사이트의 추천을 포함 할 수 있습니다.Usage사람들은 우리가 인터넷이라고 부르는 이 거칠고 미친 일로 프로젝트를 찾고 있습니다. 이상적으로는, 프로젝트를 보았을 때 뭔가 할 것을 강요 당할 것입니다. 두 번째 질문은 다음과 같습니다: 이 프로젝트를 사용하는 사람들입니까?npm 또는 RubyGems.org와 같은 패키지 관리자를 사용하여 프로젝트를 배포하는 경우 프로젝트 다운로드를 추적할 수 있습니다.각 패키지 매니저는 “다운로드”와 약간 다른 정의를 사용할 수 있으며, 다운로드가 반드시 설치 또는 사용과 관련이 있는 것은 아니지만 비교를 위한 기준을 제공합니다. Libraries.io를 사용해 많은 인기있는 패키지 매니저의 사용 통계를 추적 해보십시오.만약 프로젝트가 깃허브에 있다면, “Traffic”페이지로 사디 이동하보십시오. clone graph를 사용하여 주어진 날에 프로젝트가 복제 된 횟수를 전체 클론 및 클론 받은 사람으로 세분화 할 수 있습니다.프로젝트를 발견한 사람의 수에 비해 사용량이 적을 경우, 고려해야 할 두 가지 문제가 있습니다. 어느 한 쪽으로는:  프로젝트가 잠재 고객을 성공적으로 전환하지 못했거나, 또는  틀린 지지자를 끌어들이고 있습니다.예를 들어, 프로젝트가 Hacker News의 첫 페이지에있는 경우, Hacker News의 모든 사용자에게 도달했기 때문에 발견(트래픽)은 증가하지만 전환율은 낮아질 수 있습니다. 그러나 Ruby 프로젝트가 Ruby 컨퍼런스에 등장한다면 타겟 잠재 고객의 전환율이 높아질 가능성이 큽니다.잠재 고객이 어디에서 왔는지 파악하고 프로젝트 페이지에서 다른 사람들에게 당신이 직면한 두가지 문제점을 파악하도록 요청하십시오.사람들이 프로젝트를 사용하고 있다는 것을 알게되면, 사람들이 프로젝트를 통해 무엇을 하고 있는지 파악하려고 할 수 있습니다. 그들은 당신의 코드를 포크하고 기능을 추가함으로써 그것을 구축하고 있습니까? 그들은 과학이나 비즈니스를 위해 그것을 사용하고 있습니까?Retention사람들이 프로젝트를 찾고 있으며 프로젝트를 사용하고 있습니다. 다음 질문은 스스로에게 물어볼 것입니다: 이 프로젝트에 다시 기여한 사람들입니까?기여자를 생각하는 것은 너무 이릅니다.다른 사람이 참여하지 않으면 프로젝트가 인기있고(많은 사람들이 그것을 사용하지만) _지원_되지 않는(요구 사항을 충족시키는 데 필요한 유지 보수 시간이 충분하지 않음) 좋지 못한 상황에 처할 위험이 있습니다.보유자는 이전에 활동적인 기여자가 결국 다른 것들로 이동하기 때문에 새로운 기여자가 유입되어야합니다.정기적으로 추적할 수 있는 커뮤니티 측정 항목의 예는 다음과 같습니다:  기여자 중 총 기여 수 및 커밋 수 : 얼마나 많은 기여자가 있고, 누가 더 많이 또는 적게 활동 하는지를 알려줍니다. GitHub에서는 “Graphs”-&gt; “Contributors”에서 볼 수 있습니다. 현재 이 그래프는 저장소의 기본 브랜치에 작성한 기여자만 계산합니다.      처음, 캐주얼, 그리고 다시 기여한 사람: 새로운 참여자를 얻었는지 여부와 그들이 다시 돌아 왔는지 여부를 추적하는 데 도움이됩니다. (캐주얼 기여자는 커밋 수가 적고 커밋 수가 5회 이하이거나, 또 다른 기준은 당신에게 달려 있습니다.) 새로운 참여자가 없으면 프로젝트 커뮤니티가 정체 될 수 있습니다.        열린 이슈와 pull requests의 수:  수치가 너무 높으면 이슈 검토 및 코드 검토에 대한 도움이 필요할 수 있습니다.        열렸던 이슈와 열렸던 pull requests의 수: 열렸던 이슈는 누군가가 프로젝트의 이슈를 열어 신청할 수 있음을 의미합니다. 그 숫자가 시간이 지남에 따라 증가하면 사람들이 귀하의 프로젝트에 관심을 보였다고 나타낼수 있습니다.        기여 유형: 예시로, 커밋, 오타 혹은 버그 수정, 또는 이슈에 답변하기가 있습니다.      Open source is more than just code. Successful open source projects include code and documentation contributions together with conversations about these changes.  — @arfon, “오픈소스의 형태”  Maintainer activity마지막으로, 프로젝트 메인테이너가 받은 기여 분량을 처리 할 수 있는지 확인하여 루프를 닫으십시오. 자신에게 묻고 싶은 마지막 질문은 다음과 같습니다: 나는 (또는 우리가) 우리 커뮤니티에 반응하고 있습니까?응답이 없는 메인테이너는 오픈소스 프로젝트의 병목 현상이 됩니다. 누군가 기여를 제출했지만 메인테이너가 듣지 못하면 기분이 나빠져서 떠나기도 합니다.Mozilla의 연구는 관리자의 응답성이 반복 기여도를 장려하는 중요한 요소임을 시사합니다.당사자(또는 다른 메인테이너)가 이슈 또는 pull request 여부에 관계없이 기여에 응답하는 데 걸리는 시간을 고려하십시오. 응답은 조치를 취할 필요가 없습니다. 다음과 같이 간단하게 말할 수 있습니다: “제출해 주셔서 감사합니다. 저는 다음 주에 이것을 검토 할 것입니다.”다음과 같이 기여 프로세스의 단계간에 이동하는 데 걸리는 시간을 측정 할 수도 있습니다:  이슈가 열려있는 평균 시간  이슈가 PR에 의해 폐쇄되는지 여부  부실 이슈가 종결 되는지 여부  pull request을 병합하는 평균 시간Use 📊 to learn about people측정 기준을 이해하면 적극적으로 성장하는 오픈소스 프로젝트를 구축하는 데 도움이됩니다. 대시 보드의 모든 측정치를 추적하지 않더라도, 위의 프레임워크를 사용하여 프로젝트가 성공하는 데 도움이 되는 동작 유형에 주의를 기울이십시오.",
    "url": "/ko/metrics/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/ko/metrics/\">\n      오픈소스 측정항목\n    </a>\n  </h2>\n  <h2 id=\"why-measure-anything\">Why measure anything?</h2>\n\n\n</div>\n"
  },

  
  "/ko/starting-a-project/": {
    "title": "오픈소스 프로젝트 시작하기",
    "content": "The “what” and “why” of open source따라서 오픈소스를 시작하는 것에 대해 생각하고 있습니까? 축하합니다! 세상은 당신의 기여를 높이 평가합니다. 오픈소스란 무엇이며, 왜 사람들이 그렇게하는지 이야기해 봅시다.“오픈소스”란 무엇을 의미합니까?즉 누구나 프로젝트를 보고, 사용하고, 수정하고, 배포 할 수 있습니다. 이러한 권한은 오픈소스 라이선스를 통해 시행됩니다.오픈소스는 채택의 장벽을 낮추어 아이디어가 빠르게 확산될 수 있기 때문에 강력합니다.그것이 어떻게 작동하는지 이해하려면, 친구가 potluck을 가지고 있다고 상상해보고, 체리 파이를 가지고 오십시오.  모두가 파이를 먹습니다 (사용)  파이가 히트를 쳤습니다! 그들은 당신에게 파이 제조법을 묻습니다 (보기)  한 친구인, 제과점 주방장 Alex는 설탕을 줄이는 것이 좋다고 조언합니다 (수정)  다른 친구인, Lisa는 다음 주 저녁 식사에 그것을 사용할 것을 요청합니다 (배포)비교해 보면, 독점 소스 과정은 식당에 가서 체리 파이 한 조각을 주문할 것입니다. 당신은 파이를 먹기 위해 수수료를 지불해야하며, 레스토랑은 아마도 당신에게 요리 방법을 알려주지 않을 것입니다. 만약 파이를 정확하게 복사하여 같은 이름으로 팔면, 레스토랑이 당신을 상대로 고소할 수도 있습니다.왜 사람들은 자신의 작업을 오픈소스로 공개합니까?    One of the most rewarding experiences I get out of using and collaborating on open source comes from the relationships that I build with other developers facing many of the same problems I am.  — @kentcdodds, “어떻게 오픈 소스에 빠져야 나에게 멋진가?”  사람이나 조직이 프로젝트 소스를 공개하려는 데는 여러 가지 이유가 있습니다. 몇 가지 예는 다음과 같습니다:      협업: 오픈소스 프로젝트는 전 세계 누구나 변화를 수용 할 수 있습니다. Exercism를 예시로 들면, 350명이 넘는 기여자가 참여하는 프로그래밍 연습 플랫폼입니다.        채택과 재가공: 오픈소스 프로젝트는 거의 모든 목적으로 누구나 사용할 수 있습니다. 사람들은 그것을 사용하여 다른 것을 만들 수도 있습니다. WordPress를 예시로 들면, b2라는 기존 프로젝트의 포크로 시작되었습니다.        투명도: 누구나 오픈소스 프로젝트에서 오류나 불일치를 검사 할 수 있습니다. 투명성은 불가리아 또는 미국과 같은 정부, 은행 또는 건강 관리와 같은 규제 대상 산업, Let’s Encrypt와 같은 보안 소프트웨어와 관련이 있습니다.  오픈소스는 소프트웨어만을 위한 것이 아닙니다. 데이터 세트에서부터 서적에 이르기까지 모두 오픈소스할 수 있습니다. GitHub Explore에서 다른 오픈소스 아이디어를 확인하십시오.오픈소스는 “무료”를 의미합니까?오픈소스의 가장 큰 매력 중 하나는 비용이 들지 않는다는 것입니다. 그러나 “무료 비용”은 오픈소스의 전반적인 가치의 부산물입니다.오픈소스 라이선스는 누구나 거의 모든 목적으로 프로젝트를 사용, 수정 및 공유 할 수 있어야 하므로 프로젝트 자체는 무료입니다. 만약 프로젝트에 사용할 비용이 들었다면, 누구나 합법적으로 복사본을 만들어 무료 버전을 사용할 수 있습니다.결과적으로 대부분의 오픈소스 프로젝트는 무료이지만, “무료”는 오픈소스 정의의 일부가 아닙니다. 오픈소스의 공식적인 정의를 계속 준수하면서 이중 라이선스 또는 제한된 기능을 통해 간접적으로 오픈소스 프로젝트를 청구할 수있는 방법이 있습니다.Should I launch my own open source project?짧은 결과는 예입니다. 결과에 관계없이, 자신의 프로젝트를 시작하는 것이 오픈소스의 작동 방식을 배우기위한 훌륭한 방법이기 때문입니다.이전에 프로젝트의 소스를 공개 한 적이 없다면, 다른 사람이 의견을 말하지 않거나 전혀 눈치채지 못할거라고 불안해 할 수 있습니다. 이게 당신의 이야기처럼 들린다면, 당신은 혼자가 아닙니다!오픈소스 작품은 글쓰기나 페인팅과 비슷한 다른 창의적인 활동과 같습니다. 전세계에 당신의 작품을 공유하는 것이 무섭다는 생각이 들지만, 청중이 없는 경우에도 연습하는 것이 유일한 방법입니다.아직 확신하지 못했다면, 잠시 시간을 내어 목표가 무엇인지 생각해보십시오.목표 설정하기목표는 어떤 일을 해야할 건지, 어떤 말을 하지 않을건지, 다른 사람들에게 도움이 필요한 곳을 파악하는 것에 도움이 될 수 있습니다. 스스로에게 물어보십시오,  왜 내가 이 프로젝트를 오픈 소스로 만들었습니까?이 질문에 대한 정답은 아무도 없습니다. 한 프로젝트에 대해 여러 가지 목표를 가질 수도 있고, 다른 목표를 가진 다른 프로젝트를 가질 수도 있습니다.귀하의 유일한 목표가 귀하의 업무를 과시하는 것이라면, 귀하는 README에 기여를 원한다고 말할 수 없습니다. 다른 한편으로는, 기여자를 원한다면 명확한 문서화에 시간을 투자를 통해 신규 방문자가 환영받는다고 느끼게 될 것입니다.    At some point I created a custom UIAlertView that I was using…and I decided to make it open source. So I modified it to be more dynamic and uploaded it to GitHub. I also wrote my first documentation explaining to other developers how to use it on their projects. Probably nobody ever used it because it was a simple project but I was feeling good about my contribution.  — @mavris, “독학 소프트웨어 개발자: 오픈소스가 우리에게 중요한 이유”  프로젝트가 성장함에 따라 커뮤니티는 단순한 코드 그 이상을 필요로 할 수 있습니다. 이슈에 대응하고, 코드를 검토하고, 프로젝트를 홍보하는 것은 오픈소스 프로젝트에서 중요한 작업입니다.비코딩 작업에 소요되는 시간은 프로젝트의 크기와 범위에 따라 다르지만, 직접 해결하거나 도움을 줄 담당자를 준비해야합니다.만약 프로젝트를 오픈소스화하는 회사의 일원이라면, 프로젝트가 번창하기 위해 필요한 내부 자원이 있는지 확인하십시오. 시작한 후에 프로젝트를 유지 관리 할 책임이 있는 사람과 해당 작업을 커뮤니티와 공유하는 방법을 식별해야합니다.홍보, 운영 및 프로젝트 유지를 위해 전담 예산이나 인력이 필요하다면 일찍 대화를 시작하십시오.    As you begin to open source the project, it’s important to make sure that your management processes take into consideration the contributions and abilities of the community around your project. Don’t be afraid to involve contributors who are not employed in your business in key aspects of the project — especially if they are frequent contributors.  — @captainsafia, “그래서 당신은 프로젝트를 오픈소스화하고 싶습니까?”  다른 프로젝트에 기여하기다른 사람들과 협력하거나 오픈소스가 어떻게 작동하는지 이해하는 방법을 배우는 것이 목표라면, 기존 프로젝트에 기여하는 것을 고려하십시오. 이미 사용하고 사랑하는 프로젝트부터 시작하십시오. 프로젝트에 기여하는 것은 오타를 수정하거나 문서를 업데이트하는 것만큼 간단합니다.기여자로 시작하는 방법을 모르는 경우에는, 오픈소스에 기여하는 방법 가이드를 확인하십시오.Launching your own open source project당신의 일을 오픈 소스화 할 완벽한 시간은 없습니다. 아이디어, 진행중인 작업 또는 독점 소스가 된 이후의 수년이 지난 뒤에도 오픈소스화 할 수 있습니다.일반적으로 말하면, 다른 사람들이 보기에 편하게 느끼고 프로젝트에 대한 피드백을 주려면 프로젝트를 오픈소스화 해야합니다.프로젝트를 오픈소스로 결정한 단계에 관계없이, 모든 프로젝트에는 다음과 같은 문서가 포함되어야합니다:  오픈소스 라이선스  README  기여 가이드라인  Code of conduct메인테이너는 이러한 구성 요소를 사용하여 기대를 전달하고, 기여를 관리하고, (자신의 권리를 포함한) 모든 사람의 법적 권리를 보호 할 수 있습니다. 그들은 긍정적인 경험을 가질 기회를 상당히 증가시킵니다.프로젝트가 GitHub에 있는 경우, 권장 파일 이름을 사용하여 이러한 파일을 루트 디렉토리에 저장하면 GitHub에서 해당 파일을 인식하여 자동으로 사용자에게 보여줍니다.라이선스 선택하기오픈소스 라이선스는 타인이 영향을 주지 않고 프로젝트에서 사용, 복사, 수정 및 기여할 수 있음을 보증합니다. 또한 복잡하게 얽혀있는 법적 상황으로부터 당신을 보호합니다. 오픈소스 프로젝트를 시작할 때 라이선스를 포함해야합니다.법률 업무는 재미 없습니다. 좋은 소식은 기존 라이선스를 복사하여 저장소에 붙여 넣을 수 있다는 것입니다. 당신의 노력을 보호하는 데 단지 1분 정도만 소요됩니다.MIT, Apache 2.0, 그리고 GPLv3는 가장 인기있는 오픈소스 라이선스입니다, 그러나 선택할 수있는 다른 옵션도 있습니다.GitHub에서 새 프로젝트를 만들면, 라이선스를 선택할 수 있는 옵션이 제공됩니다. 오픈소스 라이선스를 포함하면 GitHub 프로젝트를 오픈소스로 만들 수 있습니다.만약 오픈소스 프로젝트를 관리하는 법적 측면에 대해 다른 질문이나 우려 사항이 있으시면, 이 내용은 귀하를 대상으로합니다.Writing a READMEREADME는 프로젝트 사용 방법을 설명하는 것 이상을 수행합니다. 또한 프로젝트가 중요한 이유와 사용자가 수행 할 수 있는 작업에 대해 설명합니다.README에 다음 질문에 답하십시오:  이 프로젝트는 무엇을 합니까?  이 프로젝트는 왜 유용합니까?  어떻게 시작합니까?  필요할 경우, 어디에서 더 많은 도움을 받을 수 있습니까?README를 사용하여 기여를 처리하는 방법, 프로젝트의 목표가 무엇인지, 라이선스 및 속성에 대한 정보와 같은 다른 질문에 답할 수 있습니다. 기여를 받고 싶지 않거나, 프로젝트가 아직 준비되지 않은 경우에는 이 정보를 적어 두십시오.    Better documentation means more users, less support requests, and more contributors. (…) Remember that your readers aren’t you. There are people who might come to a project who have completely different experiences.  — @limedaring, “읽힐 단어 쓰기 (비디오)”  때로는, 사람들이 프로젝트가 끝나지 않았거나 기부를 원치 않기 때문에 README를 쓰지 않는 경우가 있습니다. 이것은 모두 하나를 쓰는 아주 좋은 이유입니다.더 많은 영감을 얻으려면, @18F의 “Making READMEs Readable” 혹은 @PurpleBooth의 완전한 README를 작성하는README template를 사용해보십시오.README 파일을 루트 디렉토리에 포함시키면, GitHub가 자동으로 저장소 홈페이지에 표시합니다.Writing your contributing guidelinesCONTRIBUTING 파일은 잠재 고객에게 프로젝트 참여 방법을 알려줍니다. 예를 들어 다음 정보를 포함 할 수 있습니다:  버그 보고서를 제출하는 방법 (이슈와 pull request 템플릿을 사용해보십시오)  새로운 기능을 제안하는 방법  환경 설정 및 테스트 실행 방법기술적 세부 사항 외에도, CONTRIBUTING 파일은 기여에 대한 귀하의 기대를 전달할 수 있는 기회입니다, 예로 들면 :  당신이 찾고있는 기여의 종류  프로젝트 로드맵 또는 비전  참여자가 귀하와 연락해야 (또는 하지 말아야) 하는 방법따뜻하고 친숙한 분위기의 음색을 사용하고, 기여에 대한 구체적인 제안 (예를 들어 문서 작성 또는 웹 사이트 만들기)을 제공하면 신규 방문자가 참여하고 환영하게 될 것입니다.예시로, Active Admin은 다음과 함께 기여 가이드를 시작합니다:  먼저 Active Admin에 기여 해 주셔서 감사합니다. Active Admin을 훌륭한 도구로 만드는 것은 여러분과 같은 사람들입니다.프로젝트의 가장 초기 단계에서, CONTRIBUTING 파일을 간단하게 만들 수 있습니다. 버그 또는 파일 문제를 보고하는 방법과 (테스트에 필요한) 기술적 요구 사항을 항상 설명하여 기여를 해야합니다.시간이 지나면, 다른 자주 묻는 질문을 CONTRIBUTING 파일에 추가 할 수 있습니다. 이 정보를 적어두면 같은 질문을 반복해서 하는 사람들이 줄어들 것입니다.CONTRIBUTING 파일을 작성하는 데 도움이 필요하면, check out @nayafia의 contributing guide template 혹은 @mozilla의 “How to Build a CONTRIBUTING.md”를 보십시오.README에 CONTRIBUTING 파일을 링크하면 더 많은 사람들이 볼 수 있습니다. 만약 당신이 CONTRIBUTING 파일을 프로젝트의 저장소에 두면, GitHub는 참여자가 이슈를 생성하거나 pull request를 열면 자동으로 파일에 연결됩니다.행동강령 세우기    We’ve all had experiences where we faced what was probably abuse either as a maintainer trying to explain why something had to be a certain way, or as a user…asking a simple question. (…) A code of conduct becomes an easily referenced and linkable document that indicates that your team takes constructive discourse very seriously.  — @mlynch, “오픈소스를 보다 행복한 곳으로 만들기”  마지막으로, 행동강령은 프로젝트 참가자의 행동에 대한 기본 규칙을 설정하는 데 도움이 됩니다. 이는 커뮤니티나 회사를 위해 오픈소스 프로젝트를 시작하는 경우 특히 유용합니다. 행동강령은 건강하고 건설적인 커뮤니티 행동을 촉진하도록 권한을 부여하며, 이는 메인테이너로서의 스트레스를 감소시킵니다.자세한 정보를 확인하려면, 행동강령 가이드를 보십시오.행동강령은 참여자가 어떻게 행동 할 것으로 기대하는지 의사 소통하는 것 외에도, 이러한 기대 사항이 적용되는 대상, 적용시기, 위반이 발생할 경우 수행 할 작업을 설명하는 경향이 있습니다.오픈소스 라이선스와 마찬가지로 행동강령에 대한 새로운 기준도 있으므로, 사용자가 직접 작성할 필요는 없습니다. Contributor Covenant는 Kubernetes, Rails 및 Swift를 포함하여 40,000개 이상의 오픈소스 프로젝트에서 사용되는 행동 강령입니다. 어떤 텍스트를 사용하든 필요에 따라 행동강령을 시행 할 준비가 되어 있어야합니다.텍스트를 저장소의 CODE_OF_CONDUCT 파일에 직접 붙여 넣으십시오. 프로젝트의 루트 디렉토리에 파일을 보관하여 찾기 쉽도록 하고, README에서 링크를 연결하십시오.Naming and branding your project브랜딩은 화려한 로고 또는 재미있는 프로젝트 이름 이상입니다. 그것은 당신의 프로젝트에 대해 어떻게 이야기하고, 당신의 메시지를 가지고 도달했는지에 관한 것입니다.올바른 이름 고르기기억하기 쉬운 이름을 골라야하며, 이상적으로 프로젝트가 하는 일에 대한 아이디어를 제공하십시오. 예시입니다:  Sentry는 충돌보고를 위해 앱을 모니터링합니다  Thin은 빠르고 간단한 Ruby 웹 서버입니다기존 프로젝트를 기반으로 하는 경우, 그 이름을 접두사로 사용하면 프로젝트가 수행하는 작업을 분명히 알 수 있습니다 (예시. node-fetch는  Node.js에서 window.fetch를 가져옵니다).무엇보다 명확성을 고려하십시오. 농담은 재미 있지만, 일부 농담은 다른 문화나 다른 경험을 가진 사람들로 번역되지 않을 수도 있음을 기억하십시오. 잠재적인 사용자 중 일부는 회사 직원일 수 있습니다: 그들이 직장에서 당신의 프로젝트를 설명해야 할 때 불편하게 하고 싶지는 않습니다!Avoiding name conflicts비슷한 이름의 오픈소스 프로젝트가 있는지 확인하십시오, 특히 동일한 언어 또는 같은 생태계를 공유하는 경우, 이름이 기존의 인기있는 프로젝트와 겹치면 잠재적인 고객을 혼동시킬 수 있습니다.웹 사이트, Twitter 핸들 또는 프로젝트를 나타내는 다른 속성을 원하면 원하는 이름을 가져올 수 있는지 확인하십시오. 이상적으로는, 아직 사용하지 않으려는 경우에도 마음의 평화를 위해 지금 해당 이름을 예약하십시오.프로젝트 이름이 상표를 침해하지 않는지 확인하십시오. 회사는 나중에 프로젝트를 중단하거나, 법적 조치를 취할 것을 요구할 수 있습니다. 위험 부담이 되지 않습니다.You can check the WIPO Global Brand Database for trademark conflicts. If you’re at a company, this is one of the things your legal team can help you with.마지막으로, 프로젝트 이름에 대한 빠른 Google 검색을 수행하십시오. 사람들이 프로젝트를 쉽게 찾을 수 있습니까? 검색 결과에 표시하고 싶지 않은 것이 있습니까?당신이 쓰는 방법(그리고 코드)은 당신의 브랜드에도 영향을 미칩니다!프로젝트가 진행되는 동안, 많은 글을 쓸 것입니다: README, 튜토리얼, 커뮤니티 문서, 이슈에 대한 회신, 뉴스레터 및 메일링 리스트 등.그것이 공식적인 문서이건 캐주얼 이메일이건, 당신의 작문 스타일은 프로젝트의 브랜드의 일부입니다. 잠재 고객에게 도달하는 방법과 전달하려는 톤인지 여부를 고려하십시오.    I tried to be involved with every thread on the mailing list, and showing exemplary behaviour, being nice to people, taking their issues seriously and trying to be helpful overall. After a while, people stuck around not to only ask questions, but to help with the answering as well, and to my complete delight, they mimicked my style.  — @janl on CouchDB, “지속 가능한 오픈소스”  따뜻하고 포괄적인 언어 (예를 들어 한 사람을 언급 할 때도 “그들”과 같이)를 사용하면, 이 프로젝트가 새로운 참여자에게 환영받는 느낌을 줄 수 있습니다. 많은 독자가 원어민이 아니기 때문에 간단한 언어에 충실하십시오.단어 작성 방법 이외에도, 코딩 스타일이 프로젝트 브랜드의 일부가 될 수도 있습니다. Angular와 jQuery는 엄격한 코딩 스타일과 가이드 라인을 가진 프로젝트의 두 가지 예시입니다.프로젝트를 시작할 때 스타일 가이드를 작성할 필요가 없으며, 어쨌든 다른 코딩 스타일을 프로젝트에 통합하는 것을 즐긴다는 것을 알 수 있습니다. 그러나 글쓰기와 코딩 스타일이 다른 유형의 사람들을 끌어 모으거나 방해 할 수있는 방법을 예상해야합니다. 프로젝트의 가장 초기 단계는 보고자하는 선례를 설정할 기회입니다.Your pre-launch checklist프로젝트를 오픈소스로 할 준비가 되셨습니까? 다음은 도움이 되는 체크리스트입니다. 모든 체크박스를 확인하시겠습니까? 이제 갈 준비가 되었습니다! “공개”를 클릭하고 등 뒤에서 몸을 담그십시오.문서        프로젝트에는 오픈소스 라이선스가 있는 LICENSE 파일이 있습니다          프로젝트는 기본적인 문서가 있습니다 (README, CONTRIBUTING, CODE_OF_CONDUCT)          이름은 기억하기 쉽고, 프로젝트가 하는 일에 대한 아이디어를 제공하며, 기존 프로젝트와 충돌하거나 상표를 침해하지 않습니다          이슈 대기열은 항상 최신상태이며,명확하게 정리되고 라벨이 지정된 이슈가 있습니다  코드        프로젝트는 일관된 코드 규칙을 사용하고 함수/메소드/변수 이름을 지웁니다          코드는 명확하게 주석 처리되어 있으며, 의도와 엣지 케이스를 문서화합니다          버전관리 기록, 이슈, 혹은 pull requests에 민감한 자료가 없습니다 (예. 비밀번호나 비공개 정보)  사람개인의 경우:      법무 부서와 상담하고 (직원이 어딘가에 있다면)회사의 IP 및 오픈소스 정책을 이해했습니다  만약 회사나 조직일 경우:        법무 부서에 얘기했습니다          프로젝트 발표 및 홍보를 위한 마케팅 계획이 있습니다          누군가는 커뮤니티 (이슈에 응답하고 pull requests을 검토 및 병합)상호 작용을 관리하는 데 전념합니다           프로젝트에 대한 관리 권한이 있는 사람이 두명이상 있습니다  You did it!첫번째 프로젝트를 오픈소스화한 것을 축하합니다. 결과에 관계없이 공개적으로 일하는 것은 공동체에 대한 선물입니다. 모든 커밋, 설명 및 pull request을 풀어 쓰면, 자신과 다른 사람들이 배우고 성장할 수 있는 기회가 만들어집니다.",
    "url": "/ko/starting-a-project/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/ko/starting-a-project/\">\n      오픈소스 프로젝트 시작하기\n    </a>\n  </h2>\n  <h2 id=\"the-what-and-why-of-open-source\">The “what” and “why” of open source</h2>\n\n\n</div>\n"
  },

  
  "/leadership-and-governance/": {
    "title": "Leadership and Governance",
    "content": "Understanding governance for your growing projectYour project is growing, people are engaged, and you’re committed to keeping this thing going. At this stage, you may be wondering how to incorporate regular project contributors into your workflow, whether it’s giving someone commit access or resolving community debates. If you have questions, we’ve got answers.What are examples of formal roles used in open source projects?Many projects follow a similar structure for contributor roles and recognition.What these roles actually mean, though, is entirely up to you. Here are a few types of roles you may recognize:  Maintainer  Contributor  CommitterFor some projects, “maintainers” are the only people in a project with commit access. In other projects, they’re simply the people who are listed in the README as maintainers.A maintainer doesn’t necessarily have to be someone who writes code for your project. It could be someone who’s done a lot of work evangelizing your project, or written documentation that made the project more accessible to others. Regardless of what they do day-to-day, a maintainer is probably someone who feels responsibility over the direction of the project and is committed to improving it.A “contributor” could be anyone who comments on an issue or pull request, people who add value to the project (whether it’s triaging issues, writing code, or organizing events), or anybody with a merged pull request (perhaps the narrowest definition of a contributor).    [For Node.js,] every person who shows up to comment on an issue or submit code is a member of a project’s community. Just being able to see them means that they have crossed the line from being a user to being a contributor.  — @mikeal, “Healthy Open Source”  The term “committer” might be used to distinguish commit access, which is a specific type of responsibility, from other forms of contribution.While you can define your project roles any way you’d like, consider using broader definitions to encourage more forms of contribution. You can use leadership roles to formally recognize people who have made outstanding contributions to your project, regardless of their technical skill.    You might know me as the “inventor” of Django…but really I’m the guy who got hired to work on a thing a year after it was already made. (…) People suspect that I’m successful because of my programming skill…but I’m at best an average programmer.  — @jacobian, “PyCon 2015 Keynote” (video)  How do I formalize these leadership roles?Formalizing your leadership roles helps people feel ownership and tells other community members who to look to for help.For a smaller project, designating leaders can be as simple as adding their names to your README or a CONTRIBUTORS text file.For a bigger project, if you have a website, create a team page or list your project leaders there. For example, Postgres has a comprehensive team page with short profiles for each contributor.If your project has a very active contributor community, you might form a “core team” of maintainers, or even subcommittees of people who take ownership of different issue areas (for example, security, issue triaging, or community conduct). Let people self-organize and volunteer for the roles they’re most excited about, rather than assigning them.  [We] supplement the core team with several “subteams”. Each subteam is focused on a specific area, e.g., language design or libraries. (…) To ensure global coordination and a strong, coherent vision for the project as a whole, each subteam is led by a member of the core team.  — “Rust Governance RFC”  Leadership teams may want to create a designated channel (like on IRC) or meet regularly to discuss the project (like on Gitter or Google Hangout). You can even make those meetings public so other people can listen. Cucumber-ruby, for example, hosts office hours every week.Once you’ve established leadership roles, don’t forget to document how people can attain them! Establish a clear process for how someone can become a maintainer or join a subcommittee in your project, and write it into your GOVERNANCE.md.Tools like Vossibility can help you publicly track who is (or isn’t) making contributions to the project. Documenting this information avoids the community perception that maintainers are a clique that makes its decisions privately.Finally, if your project is on GitHub, consider moving your project from your personal account to an Organization and adding at least one backup admin. GitHub Organizations make it easier to manage permissions and multiple repositories and protect your project’s legacy through shared ownership.When should I give someone commit access?Some people think you should give commit access to everybody who makes a contribution. Doing so could encourage more people to feel ownership of your project.On the other hand, especially for bigger, more complex projects, you may want to only give commit access to people who have demonstrated their commitment. There’s no one right way of doing it - do what makes you most comfortable!If your project is on GitHub, you can use protected branches to manage who can push to a particular branch, and under which circumstances.    Whenever somebody sends you a pull request, give them commit access to your project. While it may sound incredibly stupid at first, using this strategy will allow you to unleash the true power of GitHub. (…) Once people have commit access, they are no longer worried that their patch might go unmerged…causing them to put much more work into it.  — @felixge, “The Pull Request Hack”  What are some of the common governance structures for open source projects?There are three common governance structures associated with open source projects.      BDFL: BDFL stands for “Benevolent Dictator for Life”. Under this structure, one person (usually the initial author of the project) has final say on all major project decisions. Python is a classic example. Smaller projects are probably BDFL by default, because there are only one or two maintainers. A project that originated at a company might also fall into the BDFL category.        Meritocracy: (Note: the term “meritocracy” carries negative connotations for some communities and has a complex social and political history.) Under a meritocracy, active project contributors (those who demonstrate “merit”) are given a formal decision making role. Decisions are usually made based on pure voting consensus. The meritocracy concept was pioneered by the Apache Foundation; all Apache projects are meritocracies. Contributions can only be made by individuals representing themselves, not by a company.        Liberal contribution: Under a liberal contribution model, the people who do the most work are recognized as most influential, but this is based on current work and not historic contributions. Major project decisions are made based on a consensus seeking process (discuss major grievances) rather than pure vote, and strive to include as many community perspectives as possible. Popular examples of projects that use a liberal contribution model include Node.js and Rust.  Which one should you use? It’s up to you! Every model has advantages and trade-offs. And although they may seem quite different at first, all three models have more in common than they seem. If you’re interested in adopting one of these models, check out these templates:  BDFL model template  Meritocracy model template  Node.js’s liberal contribution policyDo I need governance docs when I launch my project?There is no right time to write down your project’s governance, but it’s much easier to define once you’ve seen your community dynamics play out. The best (and hardest) part about open source governance is that it is shaped by the community!Some early documentation will inevitably contribute to your project’s governance, however, so start writing down what you can. For example, you can define clear expectations for behavior, or how your contributor process works, even at your project’s launch.If you’re part of a company launching an open source project, it’s worth having an internal discussion before launch about how your company expects to maintain and make decisions about the project moving forward. You may also want to publicly explain anything particular to how your company will (or won’t!) be involved with the project.    We assign small teams to manage projects on GitHub who are actually working on these at Facebook. For example, React is run by a React engineer.  — @caabernathy, “An inside look at open source at Facebook”  What happens if corporate employees start submitting contributions?Successful open source projects get used by many people and companies, and some companies may eventually have revenue streams eventually tied to the project. For example, a company may use the project’s code as one component in a commercial service offering.As the project gets more widely used, people who have expertise in it become more in-demand - you may be one of them! - and will sometimes get paid for work they do in the project.It’s important to treat commercial activity as normal and as just another source of development energy. Paid developers shouldn’t get special treatment over unpaid ones, of course; each contribution must be evaluated on its technical merits. However, people should feel comfortable engaging in commercial activity, and feel comfortable stating their use cases when arguing in favor of a particular enhancement or feature.“Commercial” is completely compatible with “open source”. “Commercial” just means there is money involved somewhere - that the software is used in commerce, which is increasingly likely as a project gains adoption. (When open source software is used as part of a non-open-source product, the overall product is still “proprietary” software, though, like open source, it might be used for commercial or non-commercial purposes.)Like anyone else, commercially-motivated developers gain influence in the project through the quality and quantity of their contributions. Obviously, a developer who is paid for her time may be able to do more than someone who is not paid, but that’s okay: payment is just one of many possible factors that could affect how much someone does. Keep your project discussions focused on the contributions, not on the external factors that enable people to make those contributions.Do I need a legal entity to support my project?You don’t need a legal entity to support your open source project unless you’re handling money.For example, if you want to create a commercial business, you’ll want to set up a C Corp or LLC (if you’re based in the US). If you’re just doing contract work related to your open source project, you can accept money as a sole proprietor, or set up an LLC (if you’re based in the US).If you want to accept donations for your open source project, you can set up a donation button (using PayPal or Stripe, for example), but the money won’t be tax-deductible unless you are a qualifying nonprofit (a 501c3, if you’re in the US).Many projects don’t wish to go through the trouble of setting up a nonprofit, so they find a nonprofit fiscal sponsor instead. A fiscal sponsor accepts donations on your behalf, usually in exchange for a percentage of the donation. Software Freedom Conservancy, Apache Foundation, Eclipse Foundation, Linux Foundation and Open Collective are examples of organizations that serve as fiscal sponsors for open source projects.    Our goal is to provide an infrastructure that communities can use to be self sustainable, thus creating an environment where everyone — contributors, backers, sponsors — get concrete benefits out of it.  — @piamancini, “Moving beyond the charity framework”  If your project is closely associated with a certain language or ecosystem, there may also be a related software foundation you can work with. For example, the Python Software Foundation helps support PyPI, the Python package manager, and the Node.js Foundation helps support Express.js, a Node-based framework.",
    "url": "/leadership-and-governance/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/leadership-and-governance/\">\n      Leadership and Governance\n    </a>\n  </h2>\n  <h2 id=\"understanding-governance-for-your-growing-project\">Understanding governance for your growing project</h2>\n\n\n</div>\n"
  },

  
  "/legal/": {
    "title": "The Legal Side of Open Source",
    "content": "Understanding the legal implications of open sourceSharing your creative work with the world can be an exciting and rewarding experience. It can also mean a bunch of legal things you didn’t know you had to worry about. Thankfully, you don’t have to start from scratch. We’ve got your legal needs covered. (Before you dig in, be sure to read our disclaimer.)Why do people care so much about the legal side of open source?Glad you asked! When you make a creative work (such as writing, graphics, or code), that work is under exclusive copyright by default. That is, the law assumes that as the author of your work, you have a say in what others can do with it.In general, that means nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation.Open source is an unusual circumstance, however, because the author expects that others will use, modify, and share the work. But because the legal default is still exclusive copyright, you need a license that explicitly states these permissions.If you don’t apply an open source license, everybody who contributes to your project also becomes an exclusive copyright holder of their work. That means nobody can use, copy, distribute, or modify their contributions – and that “nobody” includes you.Finally, your project may have dependencies with license requirements that you weren’t aware of. Your project’s community, or your employer’s policies, may also require your project to use specific open source licenses. We’ll cover these situations below.Are public GitHub projects open source?When you create a new project on GitHub, you have the option to make the repository private or public.Making your GitHub project public is not the same as licensing your project. Public projects are covered by GitHub’s Terms of Service, which allows others to view and fork your project, but your work otherwise comes with no permissions.If you want others to use, distribute, modify, or contribute back to your project, you need to include an open source license. For example, someone cannot legally use any part of your GitHub project in their code, even if it’s public, unless you explicitly give them the right to do so.Just give me the TL;DR on what I need to protect my project.You’re in luck, because today, open source licenses are standardized and easy to use. You can copy-paste an existing license directly into your project.MIT, Apache 2.0, and GPLv3 are the most popular open source licenses, but there are other options to choose from. You can find the full text of these licenses, and instructions on how to use them, on choosealicense.com.When you create a new project on GitHub, you’ll be asked to add a license.    A standardized license serves as a proxy for those without legal training to know precisely what they can and can’t do with the software. Unless absolutely required, avoid custom, modified, or non-standard terms, which will serve as a barrier to downstream use of the agency code.  — @benbalter, “Everything a government attorney needs to know about open source software licensing”  Which open source license is appropriate for my project?If you’re starting from a blank slate, it’s hard to go wrong with the MIT License. It’s short, very easy to understand, and allows anyone to do anything so long as they keep a copy of the license, including your copyright notice. You’ll be able to release the project under a different license if you ever need to.Otherwise, picking the right open source license for your project depends on your objectives.Your project very likely has (or will have) dependencies. For example, if you’re open sourcing a Node.js project, you’ll probably use libraries from the Node Package Manager (npm). Each of those libraries you depend on will have its own open source license. If each of their licenses is “permissive” (gives the public permission to use, modify, and share, without any condition for downstream licensing), you can use any license you want. Common permissive licenses include MIT, Apache 2.0, ISC, and BSD.On the other hand, if any of your dependencies’ licenses are “strong copyleft” (also gives public same permissions, subject to condition of using the same license downstream), then your project will have to use the same license. Common strong copyleft licenses include GPLv2, GPLv3, and AGPLv3.You may also want to consider the communities you hope will use and contribute to your project:  Do you want your project to be used as a dependency by other projects? Probably best to use the most popular license in your relevant community. For example, MIT is the most popular license for npm libraries.  Do you want your project to appeal to large businesses? A large business will likely want an express patent license from all contributors. In this case, Apache 2.0 has you (and them) covered.  Do you want your project to appeal to contributors who do not want their contributions to be used in closed source software? GPLv3 or (if they also do not wish to contribute to closed source services) AGPLv3 will go over well.Your company may have specific licensing requirements for its open source projects. For example, it may require a permissive license so that the company can use your project in the company’s closed source product. Or your company may require a strong copyleft license and an additional contributor agreement (see below) so that only your company, and nobody else, can use your project in closed source software. Or your company may have certain needs related to standards, social responsibility, or transparency, any of which could require a particular licensing strategy. Talk to your company’s legal department.When you create a new project on GitHub, you are given the option to select a license. Including one of the licenses mentioned above will make your GitHub project open source. If you’d like to see other options, check out choosealicense.com to find the right license for your project, even if it isn’t software.What if I want to change the license of my project?Most projects never need to change licenses. But occasionally circumstances change.For example, as your project grows it adds dependencies or users, or your company changes strategies, any of which could require or want a different license. Also, if you neglected to license your project from the start, adding a license is effectively the same as changing licenses. There are three fundamental things to consider when adding or changing a your project’s license:It’s complicated. Determining license compatibility and compliance and who holds copyright can get complicated and confusing very quickly. Switching to a new but compatible license for new releases and contributions is different from relicensing all existing contributions. Involve your legal team the first hint of any desire to change licenses. Even if you have or can obtain permission from your project’s copyright holders for a license change, consider the impact of the change on your project’s other users and contributors. Think of a license change as a “governance event” for your project that will more likely go smoothly with clear communications and consultation with your project’s stakeholders. All the more reason to choose and use an appropriate license for your project from its inception!Your project’s existing license. If your project’s existing license is compatible with the license you want to change to, you could just start using the new license. That’s because if license A is compatible with license B, you’ll comply with the terms of A while complying with the terms of B (but not necessarily vice versa). So if you’re currently using a permissive license (e.g., MIT), you could change to a license with more conditions, so long as you retain a copy of the MIT license and any associated copyright notices (i.e., continue to comply with the MIT license’s minimal conditions). But if your current license is not permissive (e.g., copyleft, or you don’t have a license) and you aren’t the sole copyright holder, you couldn’t just change your project’s license to MIT. Essentially, with a permissive license the project’s copyright holders have given permission in advance to change licenses.Your project’s existing copyright holders. If you’re the sole contributor to your project then either you or your company is the project’s sole copyright holder. You can add or change to whatever license you or your company wants to. Otherwise there may be other copyright holders that you need agreement from in order to change licenses. Who are they? People who have commits in your project is a good place to start. But in some cases copyright will be held by those people’s employers. In some cases people will have only made minimal contributions, but there’s no hard and fast rule that contributions under some number of lines of code are not subject to copyright. What to do? It depends. For a relatively small and young project, it may be feasible to get all existing contributors to agree to a license change in an issue or pull request. For large and long-lived projects, you may have to seek out many contributors and even their heirs. Mozilla took years (2001-2006) to relicense Firefox, Thunderbird, and related software.Alternatively, you can have contributors agree in advance (via an additional contributor agreement – see below) to certain license changes under certain conditions, beyond those allowed by your existing open source license. This shifts the complexity of changing licenses a bit. You’ll need more help from your lawyers up front, and you’ll still want to clearly communicate with your project’s stakeholders when executing a license change.Does my project need an additional contributor agreement?Probably not. For the vast majority of open source projects, an open source license implicitly serves as both the inbound (from contributors) and outbound (to other contributors and users) license. If your project is on GitHub, the GitHub Terms of Service make “inbound=outbound” the explicit default.An additional contributor agreement – often called a Contributor License Agreement (CLA) – can create administrative work for project maintainers. How much work an agreement adds depends on the project and implementation. A simple agreement might require that contributors confirm, with a click, that they have the rights necessary to contribute under the project open source license. A more complicated agreement might require legal review and sign-off from contributors’ employers.Also, by adding “paperwork” that some believe is unnecessary, hard to understand, or unfair (when the agreement recipient gets more rights than contributors or the public do via the project’s open source license), an additional contributor agreement may be perceived as unfriendly to the project’s community.      We have eliminated the CLA for Node.js. Doing this lowers the barrier to entry for Node.js contributors thereby broadening the contributor base.  — @bcantrill, “Broadening Node.js Contributions”  Some situations where you may want to consider an additional contributor agreement for your project include:  Your lawyers want all contributors to expressly accept (sign, online or offline) contribution terms, perhaps because they feel the open source license itself is not enough (even though it is!). If this is the only concern, a contributor agreement that affirms the project’s open source license should be enough. The jQuery Individual Contributor License Agreement is a good example of a lightweight additional contributor agreement. For some projects, a Developer Certificate of Origin can be an alternative.  Your project uses an open source license that does not include an express patent grant (such as MIT), and you need a patent grant from all contributors, some of whom may work for companies with large patent portfolios that could be used to target you or the project’s other contributors and users. The Apache Individual Contributor License Agreement is a commonly used additional contributor agreement that has a patent grant mirroring the one found in the Apache License 2.0.  Your project is under a copyleft license, but you also need to distribute a proprietary version of the project. You’ll need every contributor to assign copyright to you or grant you (but not the public) a permissive license. The MongoDB Contributor Agreement is an example this type of agreement.  You think your project might need to change licenses over its lifetime and want contributors to agree in advance to such changes.If you do need to use an additional contributor agreement with your project, consider using an integration such as CLA assistant to minimize contributor distraction.What does my company’s legal team need to know?If you’re releasing an open source project as a company employee, first, your legal team should know that you’re open sourcing a project.For better or worse, consider letting them know even if it’s a personal project. You probably have an “employee IP agreement” with your company that gives them some control of your projects, especially if they are at all related to the company’s business or you use any company resources to develop the project. Your company should easily give you permission, and maybe already has through an employee-friendly IP agreement or a company policy. If not, you can negotiate (for example, explain that your project serves the company’s professional learning and development objectives for you), or avoid working on your project until you find a better company.If you’re open sourcing a project for your company, then definitely let them know. Your legal team probably already has policies for what open source license (and maybe additional contributor agreement) to use based on the company’s business requirements and expertise around ensuring your project complies with the licenses of its dependencies. If not, you and they are in luck! Your legal team should be eager to work with you to figure this stuff out. Some things to think about:      Third party material: Does your project have dependencies created by others or otherwise include or use others’ code? If these are open source, you’ll need to comply with the materials’ open source licenses. That starts with choosing a license that works with the third party open source licenses (see above). If your project modifies or distributes third party open source material, then your legal team will also want to know that you’re meeting other conditions of the third party open source licenses such as retaining copyright notices. If your project uses others’ code that doesn’t have an open source license, you’ll probably have to ask the third party maintainers to add an open source license, and if you can’t get one, stop using their code in your project.        Trade secrets: Consider whether there is anything in the project that the company does not want to make available to the general public. If so, you could open source the rest of your project, after extracting the material you want to keep private.        Patents: Is your company applying for a patent of which open sourcing your project would constitute public disclosure? Sadly, you might be asked to wait (or maybe the company will reconsider the wisdom of the application). If you’re expecting contributions to your project from employees of companies with large patent portfolios, your legal team may want you to use a license with an express patent grant from contributors (such as Apache 2.0 or GPLv3), or an additional contributor agreement (see above).        Trademarks: Double check that your project’s name does not conflict with any existing trademarks. If you use your own company trademarks in the project, check that it does not cause any conflicts. FOSSmarks is a practical guide to understanding trademarks in the context of free and open source projects.        Privacy: Does your project collect data on users? “Phone home” to company servers? Your legal team can help you comply with company policies and external regulations.  If you’re releasing your company’s first open source project, the above is more than enough to get through (but don’t worry, most projects shouldn’t raise any major concerns).Longer term, your legal team can do more to help the company get more from its involvement in open source, and stay safe:  Employee contribution policies: Consider developing a corporate policy that specifies how your employees contribute to open source projects. A clear policy will reduce confusion among your employees and help them contribute to open source projects in the company’s best interest, whether as part of their jobs or in their free time. A good example is Rackspace’s Model IP and Open Source Contribution Policy.    Letting out the IP associated with a patch builds the employee’s knowledge base and reputation. It shows that the company is invested in the development of that employee and creates a sense of empowerment and autonomy. All of these benefits also lead to higher morale and better employee retention.  — @vanl, “A Model IP and Open Source Contribution Policy”    What to release: (Almost) everything? If your legal team understands and is invested in your company’s open source strategy, they’ll be best able to help rather than hinder your efforts.  Compliance: Even if your company doesn’t release any open source projects, it uses others’ open source software. Awareness and process can prevent headaches, product delays, and lawsuits.  Organizations must have a license and compliance strategy in place that fits both [“permissive” and “copyleft”] categories. This begins with keeping a record of the licensing terms that apply to the open source software you’re using — including subcomponents and dependencies.  — Heather Meeker, “Open Source Software: Compliance Basics And Best Practices”    Patents: Your company may wish to join the Open Invention Network, a shared defensive patent pool to protect members’ use of major open source projects, or explore other alternative patent licensing.  Governance: Especially if and when it makes sense to move a project to a legal entity outside of the company.",
    "url": "/legal/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/legal/\">\n      The Legal Side of Open Source\n    </a>\n  </h2>\n  <h2 id=\"understanding-the-legal-implications-of-open-source\">Understanding the legal implications of open source</h2>\n\n\n</div>\n"
  },

  
  "/metrics/": {
    "title": "Open Source Metrics",
    "content": "Why measure anything?Data, when used wisely, can help you make better decisions as an open source maintainer.With more information, you can:  Understand how users respond to a new feature  Figure out where new users come from  Identify, and decide whether to support, an outlier use case or functionality  Quantify your project’s popularity  Understand how your project is used  Raise money through sponsorships and grantsFor example, Homebrew finds that Google Analytics helps them prioritize work:  Homebrew is provided free of charge and run entirely by volunteers in their spare time. As a result, we do not have the resources to do detailed user studies of Homebrew users to decide on how best to design future features and prioritise current work. Anonymous aggregate user analytics allow us to prioritise fixes and features based on how, where and when people use Homebrew.Popularity isn’t everything. Everybody gets into open source for different reasons. If your goal as an open source maintainer is to show off your work, be transparent about your code, or just have fun, metrics may not be important to you.If you are interested in understanding your project on a deeper level, read on for ways to analyze your project’s activity.DiscoveryBefore anybody can use or contribute back to your project, they need to know it exists. Ask yourself: are people finding this project?If your project is hosted on GitHub, you can view how many people land on your project and where they come from. From your project’s page, click “Insights”, then “Traffic”. On this page, you can see:      Total page views: Tells you how many times your project was viewed        Total unique visitors: Tells you how many people viewed your project        Referring sites: Tells you where visitors came from. This metric can help you figure out where to reach your audience and whether your promotion efforts are working.        Popular content: Tells you where visitors go on your project, broken down by page views and unique visitors.  GitHub stars can also help provide a baseline measure of popularity. While GitHub stars don’t necessarily correlate to downloads and usage, they can tell you how many people are taking notice of your work.You may also want to track discoverability in specific places: for example, Google PageRank, referral traffic from your project’s website, or referrals from other open source projects or websites.UsagePeople are finding your project on this wild and crazy thing we call the internet. Ideally, when they see your project, they’ll feel compelled to do something. The second question you’ll want to ask is: are people using this project?If you use a package manager, such as npm or RubyGems.org, to distribute your project, you may be able to track your project’s downloads.Each package manager may use a slightly different definition of “download”, and downloads do not necessarily correlate to installs or use, but it provides some baseline for comparison. Try using Libraries.io to track usage statistics across many popular package managers.If your project is on GitHub, navigate again to the “Traffic” page. You can use the clone graph to see how many times your project has been cloned on a given day, broken down by total clones and unique cloners.If usage is low compared to the number of people discovering your project, there are two issues to consider. Either:  Your project isn’t successfully converting your audience, or  You’re attracting the wrong audienceFor example, if your project lands on the front page of Hacker News, you’ll probably see a spike in discovery (traffic), but a lower conversion rate, because you’re reaching everyone on Hacker News. If your Ruby project is featured at a Ruby conference, however, you’re more likely to see a high conversion rate from a targeted audience.Try to figure out where your audience is coming from and ask others for feedback on your project page to figure out which of these two issues you’re facing.Once you know that people are using your project, you might want to try to figure out what they are doing with it. Are they building on it by forking your code and adding features? Are they using it for science or business?RetentionPeople are finding your project and they’re using it. The next question you’ll want to ask yourself is: are people contributing back to this project?It’s never too early to start thinking about contributors. Without other people pitching in, you risk putting yourself into an unhealthy situation where your project is popular (many people use it) but not supported (not enough maintainer time to meet demand).Retention also requires an inflow of new contributors, as previously active contributors will eventually move on to other things.Examples of community metrics that you may want to regularly track include:  Total contributor count and number of commits per contributor: Tells you how many contributors you have, and who’s more or less active. On GitHub, you can view this under “Insights” -&gt; “Contributors.” Right now, this graph only counts contributors who have committed to the default branch of the repository.      First time, casual, and repeat contributors: Helps you track whether you’re getting new contributors, and whether they come back. (Casual contributors are contributors with a low number of commits. Whether that’s one commit, less than five commits, or something else is up to you.) Without new contributors, your project’s community can become stagnant.        Number of open issues and open pull requests: If these numbers get too high, you might need help with issue triaging and code reviews.        Number of opened issues and opened pull requests: Opened issues means somebody cares enough about your project to open an issue. If that number increases over time, it suggests people are interested in your project.        Types of contributions: For example, commits, fixing typos or bugs, or commenting on an issue.      Open source is more than just code. Successful open source projects include code and documentation contributions together with conversations about these changes.  — @arfon, “The Shape of Open Source”  Maintainer activityFinally, you’ll want to close the loop by making sure your project’s maintainers are able to handle the volume of contributions received. The last question you’ll want to ask yourself is: am I (or are we) responding to our community?Unresponsive maintainers become a bottleneck for open source projects. If someone submits a contribution but never hears back from a maintainer, they may feel discouraged and leave.Research from Mozilla suggests that maintainer responsiveness is a critical factor in encouraging repeat contributions.Consider tracking how long it takes for you (or another maintainer) to respond to contributions, whether an issue or a pull request. Responding doesn’t require taking action. It can be as simple as saying: “Thanks for your submission! I’ll review this within the next week.”You could also measure the time it takes to move between stages in the contribution process, such as:  Average time an issue remains open  Whether issues get closed by PRs  Whether stale issues get closed  Average time to merge a pull requestUse 📊 to learn about peopleUnderstanding metrics will help you build an active, growing open source project. Even if you don’t track every metric on a dashboard, use the framework above to focus your attention on the type of behavior that will help your project thrive.",
    "url": "/metrics/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/metrics/\">\n      Open Source Metrics\n    </a>\n  </h2>\n  <h2 id=\"why-measure-anything\">Why measure anything?</h2>\n\n\n</div>\n"
  },

  
  "/starting-a-project/": {
    "title": "Starting an Open Source Project",
    "content": "The “what” and “why” of open sourceSo you’re thinking about getting started with open source? Congratulations! The world appreciates your contribution. Let’s talk about what open source is and why people do it.What does “open source” mean?When a project is open source, that means anybody can view, use, modify, and distribute your project for any purpose. These permissions are enforced through an open source license.Open source is powerful because it lowers the barriers to adoption, allowing ideas to spread quickly.To understand how it works, imagine your friend is having a potluck, and you bring a cherry pie.  Everybody tries the pie (use)  The pie is a hit! They ask you for the recipe, which you provide (view)  One friend, Alex, who’s a pastry chef, suggests reducing the sugar (modify)  Another friend, Lisa, asks to use it for a dinner next week (distribute)By comparison, a closed source process would be going to a restaurant and ordering a slice of cherry pie. You must pay a fee to eat the pie, and the restaurant probably won’t give you their recipe. If you copied their pie exactly and sold it under your own name, the restaurant could take action against you.Why do people open source their work?    One of the most rewarding experiences I get out of using and collaborating on open source comes from the relationships that I build with other developers facing many of the same problems I am.  — @kentcdodds, “How getting into Open Source has been awesome for me”  There are many reasons why a person or organization would want to open source a project. Some examples include:      Collaboration: Open source projects can accept changes from anybody in the world. Exercism, for example, is a programming exercise platform with over 350 contributors.        Adoption and remixing: Open source projects can be used by anyone for nearly any purpose. People can even use it to build other things. WordPress, for example, started as a fork of an existing project called b2.        Transparency: Anyone can inspect an open source project for errors or inconsistencies. Transparency matters to governments like Bulgaria or the United States, regulated industries like banking or healthcare, and security software like Let’s Encrypt.  Open source isn’t just for software, either. You can open source everything from data sets to books. Check out GitHub Explore for ideas on what else you can open source.Does open source mean “free of charge”?One of open source’s biggest draws is that it does not cost money. “Free of charge”, however, is a byproduct of open source’s overall value.Because an open source license requires that anyone can use, modify, and share your project for nearly any purpose, projects themselves tend to be free of charge. If the project cost money to use, anyone could legally make a copy and use the free version instead.As a result, most open source projects are free, but “free of charge” is not part of the open source definition. There are ways to charge for open source projects indirectly through dual licensing or limited features, while still complying with the official definition of open source.Should I launch my own open source project?The short answer is yes, because no matter the outcome, launching your own project is a great way to learn how open source works.If you’ve never open sourced a project before, you might be nervous about what people will say, or whether anyone will notice at all. If this sounds like you, you’re not alone!Open source work is like any other creative activity, whether it’s writing or painting. It can feel scary to share your work with the world, but the only way to get better is to practice - even if you don’t have an audience.If you’re not yet convinced, take a moment to think about what your goals might be.Setting your goalsGoals can help you figure out what to work on, what to say no to, and where you need help from others. Start by asking yourself,  why am I open sourcing this project?There is no one right answer to this question. You may have multiple goals for a single project, or different projects with different goals.If your only goal is to show off your work, you may not even want contributions, and even say so in your README. On the other hand, if you do want contributors, you’ll invest time into clear documentation and making newcomers feel welcome.    At some point I created a custom UIAlertView that I was using…and I decided to make it open source. So I modified it to be more dynamic and uploaded it to GitHub. I also wrote my first documentation explaining to other developers how to use it on their projects. Probably nobody ever used it because it was a simple project but I was feeling good about my contribution.  — @mavris, “Self-taught Software Developers: Why Open Source is important to us”  As your project grows, your community may need more than just code from you. Responding to issues, reviewing code, and evangelizing your project are all important tasks in an open source project.While the amount of time you spend on non-coding tasks will depend on the size and scope of your project, you should be prepared as a maintainer to address them yourself or find someone to help you.If you’re part of a company open sourcing a project, make sure your project has the internal resources it needs to thrive. You’ll want to identify who’s responsible for maintaining the project after launch, and how you’ll share those tasks with your community.If you need a dedicated budget or staffing for promotion, operations and maintaining the project, start those conversations early.    As you begin to open source the project, it’s important to make sure that your management processes take into consideration the contributions and abilities of the community around your project. Don’t be afraid to involve contributors who are not employed in your business in key aspects of the project — especially if they are frequent contributors.  — @captainsafia, “So you wanna open source a project, eh?”  Contributing to other projectsIf your goal is to learn how to collaborate with others or understand how open source works, consider contributing to an existing project. Start with a project that you already use and love. Contributing to a project can be as simple as fixing typos or updating documentation.If you’re not sure how to get started as a contributor, check out our How to Contribute to Open Source guide.Launching your own open source projectThere is no perfect time to open source your work. You can open source an idea, a work in progress, or after years of being closed source.Generally speaking, you should open source your project when you feel comfortable having others view, and give feedback on, your work.No matter which stage you decide to open source your project, every project should include the following documentation:  Open source license  README  Contributing guidelines  Code of conductAs a maintainer, these components will help you communicate expectations, manage contributions, and protect everyone’s legal rights (including your own). They significantly increase your chances of having a positive experience.If your project is on GitHub, putting these files in your root directory with the recommended filenames will help GitHub recognize and automatically surface them to your readers.Choosing a licenseAn open source license guarantees that others can use, copy, modify, and contribute back to your project without repercussions. It also protects you from sticky legal situations. You must include a license when you launch an open source project.Legal work is no fun. The good news is that you can copy and paste an existing license into your repository. It will only take a minute to protect your hard work.MIT, Apache 2.0, and GPLv3 are the most popular open source licenses, but there are other options to choose from.When you create a new project on GitHub, you are given the option to select a license. Including an open source license will make your GitHub project open source.If you have other questions or concerns around the legal aspects of managing an open source project, we’ve got you covered.Writing a READMEREADMEs do more than explain how to use your project. They also explain why your project matters, and what your users can do with it.In your README, try to answer the following questions:  What does this project do?  Why is this project useful?  How do I get started?  Where can I get more help, if I need it?You can use your README to answer other questions, like how you handle contributions, what the goals of the project are, and information about licenses and attribution. If you don’t want to accept contributions, or your project is not yet ready for production, write this information down.    Better documentation means more users, less support requests, and more contributors. (…) Remember that your readers aren’t you. There are people who might come to a project who have completely different experiences.  — @limedaring, “Writing So Your Words Are Read (video)”  Sometimes, people avoid writing a README because they feel like the project is unfinished, or they don’t want contributions. These are all very good reasons to write one.For more inspiration, try using @18F’s “Making READMEs Readable” or @PurpleBooth’s README template to write a complete README.When you include a README file in the root directory, GitHub will automatically display it on the repository homepage.Writing your contributing guidelinesA CONTRIBUTING file tells your audience how to participate in your project. For example, you might include information on:  How to file a bug report (try using issue and pull request templates)  How to suggest a new feature  How to set up your environment and run testsIn addition to technical details, a CONTRIBUTING file is an opportunity to communicate your expectations for contributions, such as:  The types of contributions you’re looking for  Your roadmap or vision for the project  How contributors should (or should not) get in touch with youUsing a warm, friendly tone and offering specific suggestions for contributions (such as writing documentation, or making a website) can go a long way in making newcomers feel welcomed and excited to participate.For example, Active Admin starts its contributing guide with:  First off, thank you for considering contributing to Active Admin. It’s people like you that make Active Admin such a great tool.In the earliest stages of your project, your CONTRIBUTING file can be simple. You should always explain how to report bugs or file issues, and any technical requirements (like tests) to make a contribution.Over time, you might add other frequently asked questions to your CONTRIBUTING file. Writing down this information means fewer people will ask you the same questions over and over again.For more help with writing your CONTRIBUTING file, check out @nayafia’s contributing guide template or @mozilla’s “How to Build a CONTRIBUTING.md”.Link to your CONTRIBUTING file from your README, so more people see it. If you place the CONTRIBUTING file in your project’s repository, GitHub will automatically link to your file when a contributor creates an issue or opens a pull request.Establishing a code of conduct    We’ve all had experiences where we faced what was probably abuse either as a maintainer trying to explain why something had to be a certain way, or as a user…asking a simple question. (…) A code of conduct becomes an easily referenced and linkable document that indicates that your team takes constructive discourse very seriously.  — @mlynch, “Making Open Source a Happier Place”  Finally, a code of conduct helps set ground rules for behavior for your project’s participants. This is especially valuable if you’re launching an open source project for a community or company. A code of conduct empowers you to facilitate healthy, constructive community behavior, which will reduce your stress as a maintainer.For more information, check out our Code of Conduct guide.In addition to communicating how you expect participants to behave, a code of conduct also tends to describe who these expectations apply to, when they apply, and what to do if a violation occurs.Much like open source licenses, there are also emerging standards for codes of conduct, so you don’t have to write your own. The Contributor Covenant is a drop-in code of conduct that is used by over 40,000 open source projects, including Kubernetes, Rails, and Swift. No matter which text you use, you should be prepared to enforce your code of conduct when necessary.Paste the text directly into a CODE_OF_CONDUCT file in your repository. Keep the file in your project’s root directory so it’s easy to find, and link to it from your README.Naming and branding your projectBranding is more than a flashy logo or catchy project name. It’s about how you talk about your project, and who you reach with your message.Choosing the right namePick a name that is easy to remember and, ideally, gives some idea of what the project does. For example:  Sentry monitors apps for crash reporting  Thin is a fast and simple Ruby web serverIf you’re building upon an existing project, using their name as a prefix can help clarify what your project does (for example, node-fetch brings window.fetch to Node.js).Consider clarity above all. Puns are fun, but remember that some jokes might not translate to other cultures or people with different experiences from you. Some of your potential users might be company employees: you don’t want to make them uncomfortable when they have to explain your project at work!Avoiding name conflictsCheck for open source projects with a similar name, especially if you share the same language or ecosystem. If your name overlaps with a popular existing project, you might confuse your audience.If you want a website, Twitter handle, or other properties to represent your project, make sure you can get the names you want. Ideally, reserve those names now for peace of mind, even if you don’t intend to use them just yet.Make sure that your project’s name doesn’t infringe upon any trademarks. A company might ask you to take down your project later on, or even take legal action against you. It’s just not worth the risk.You can check the WIPO Global Brand Database for trademark conflicts. If you’re at a company, this is one of the things your legal team can help you with.Finally, do a quick Google search for your project name. Will people be able to easily find your project? Does something else appear in the search results that you wouldn’t want them to see?How you write (and code) affects your brand, too!Throughout the life of your project, you’ll do a lot of writing: READMEs, tutorials, community documents, responding to issues, maybe even newsletters and mailing lists.Whether it’s official documentation or a casual email, your writing style is part of your project’s brand. Consider how you might come across to your audience and whether that is the tone you wish to convey.    I tried to be involved with every thread on the mailing list, and showing exemplary behaviour, being nice to people, taking their issues seriously and trying to be helpful overall. After a while, people stuck around not to only ask questions, but to help with the answering as well, and to my complete delight, they mimicked my style.  — @janl on CouchDB, “Sustainable Open Source”  Using warm, inclusive language (such as “them”, even when referring to the single person) can go a long way in making your project feel welcoming to new contributors. Stick to simple language, as many of your readers may not be native English speakers.Beyond how you write words, your coding style may also become part of your project’s brand. Angular and jQuery are two examples of projects with rigorous coding styles and guidelines.It isn’t necessary to write a style guide for your project when you’re just starting out, and you may find that you enjoy incorporating different coding styles into your project anyway. But you should anticipate how your writing and coding style might attract or discourage different types of people. The earliest stages of your project are your opportunity to set the precedent you wish to see.Your pre-launch checklistReady to open source your project? Here’s a checklist to help. Check all the boxes? You’re ready to go! Click “publish” and pat yourself on the back.Documentation        Project has a LICENSE file with an open source license          Project has basic documentation (README, CONTRIBUTING, CODE_OF_CONDUCT)          The name is easy to remember, gives some idea of what the project does, and does not conflict with an existing project or infringe on trademarks          The issue queue is up-to-date, with issues clearly organized and labeled  Code        Project uses consistent code conventions and clear function/method/variable names          The code is clearly commented, documenting intentions and edge cases          There are no sensitive materials in the revision history, issues, or pull requests (for example, passwords or other non-public information)  PeopleIf you’re an individual:      You've talked to the legal department and/or understand the IP and open source policies of your company (if you're an employee somewhere)  If you’re a company or organization:        You've talked to your legal department          You have a marketing plan for announcing and promoting the project          Someone is committed to managing community interactions (responding to issues, reviewing and merging pull requests)          At least two people have administrative access to the project  You did it!Congratulations on open sourcing your first project. No matter the outcome, working in public is a gift to the community. With every commit, comment, and pull request, you’re creating opportunities for yourself and for others to learn and grow.",
    "url": "/starting-a-project/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/starting-a-project/\">\n      Starting an Open Source Project\n    </a>\n  </h2>\n  <h2 id=\"the-what-and-why-of-open-source\">The “what” and “why” of open source</h2>\n\n\n</div>\n"
  },

  
  "/zh-cn/best-practices/": {
    "title": "维护者最佳实践",
    "content": "What does it mean to be a maintainer?如果你维护着一个非常流行的项目，你可能就会意识到自己写代码的时间变少，而花费在回答issue的时间越来越多。在项目的起步阶段，你会不断尝试着实现自己的新想法，也能够基于自己想要的作出决定。随着项目逐渐的开始流行，就会发现你的大部分时间都花在了与用户、贡献者打交道上。维护一个项目需要的不仅仅是写代码的能力。有些时候会有一个你意想不到的的事情要应付，但是这对一个项目的成长也很重要（相对于代码来说），我们收集了一些小技巧来让你的维护工作变得稍轻松些，这些技巧，涉及范围颇广，从写文档到管理社区都有所涉猎。Documenting your processes对于一个项目的维护者来说写文档是最重要的事情之一。文档不仅说清楚了你的想法是什么，而且还帮助别人在问问题之前理解你需要什么和接下在希望做什么。将一些东西写下来，当遇到不符合项目预期的内容时，可以轻松的拒绝。同时，它对于人们的参与和提供帮助提供了指导。最有意思的是，撰写文档的人可能永远也不知道是谁读了他写的文档，或者使用项目。即使你不想长篇大论，对要点略说一二也比啥都不写要好。写下你的项目的发展方向请在项目启动时就写下项目目标，并将之加到 README 文件中， 或者创建一个单独的 VISION 文件，其它还能帮助人们了解这方面的信息如项目管理路线图，最好是也把他们公开。有一个明确的，用文档表达清晰的愿景，能保证项目的走向不会跑偏，同时也能保障因为其他的贡献者增加的奇怪的需求而使项目变质。比如，@lord 发现项目有一个明确的愿景能够帮助他决定哪个 PR 值得花时间。作为一个维护者的新手，他甚至还后悔当他接到第一个关于slate)PR的时候没有坚持项目本身的原则。    我一直都在摸索。我没有努力寻求一个完整的解决方案。与其采用那种半吊子办法，我真希望曾经对某些Issue的提出者说：”我暂时没有时间干这个，但是我会把他放到我的待办事项中”。  — @lord, “开源项目维护者新手的几点技巧”  和大家交流你自己对项目的期望制定规则是很伤脑筋的。有时候你可能觉得你像是在限制别人的行为或者说把好玩的东西都搞没了。制定了规则，然后严格执行，当然啦，好的规则会让维护者更轻松。他们会把你从做自己不愿意做的事情中解脱出来。大多数知道你项目的人对你或者你的处境都是一无所知。他们可能会觉得你做这个项目是有钱拿的，特别是你的项目是他们经常用的而且某种程度上有点依赖的时候。其实你只是在有时候会在项目上花很多时间，但是现在你在忙着安置新工作或者照顾刚出生的儿子。这些都是再正常不过的事情！所以确保让别人也知道这些。如果你维护某个项目是利用空闲时间或者完全自愿的，能花多少时间就花多少时间。而不是你觉得项目需要你花多少时间或者别人想让你花多少时间。这里是一些值得你写进项目里的东西：  怎样的贡献才会被复查和接受(需要测试吗？提Issue有模板吗？)  你本人会接受什么类型的贡献？（你是不是只希望在某些部分的代码上需要别人的帮助？）  在合适的时候跟进项目（比如说 如果你在七天之内没有收到maintainer的回复，而且依旧没有其它任何的响应，那么就直接找Ta。）  你会在这个项目上话多少时间（比如说 “我们每星期只会在这个项目上花5个小时“）Jekyll、CocoaPods、以及 Homebrew 均是为维护者和贡献者提供了很好的基本规则的项目.乃业内典范。保证交流是公开进行的不管是什么时候，保证你的交流是在公共的场所（就是大家都能看到的地方）。如果有人尝试和你私聊，哪怕是讨论一个新的需求或者功能，请礼貌的引导Ta到公共的交流场所，比如邮件列表或者iuuse tracker。如果你和别的维护者面基了，或者在私下做了一个很重要的决定，把这些信息告诉大家，即使只是把你的笔记发上去。这样的话，每个人新加入到你们社区的人和已经呆了多年的人能够了解到的信息是一样的。Learning to say no把所有的事情都写下来，当然，对你执行你制定的规则的时候客观分析实际情况也有帮助。拒绝别人确实不是很好玩，但是也要表现出专业程度，比如使用”你的贡献不符合这个项目的标准”而不是”我不喜欢你的贡献”这样显得粗鲁的语句。作为一个维护者，在很多情况下，你都要拒绝别人：不符合项目规则的PR, 某个人脱离了讨论的重点，给别人做无关紧要的工作等等。保持友好沟通你要学会拒绝的最重要的地方就是Issue和PR请求。作为一个项目的维护者, 你会不可避免的收到你不想接受的建议。可能某个贡献并不在项目的范围或者和你的期望不合。又或者是可能想法很好，但是实现的却很烂。不管是什么原因，在处理这些不符合项目标准的贡献的时候都要婉转。如果你收到了你不想接受的贡献，你的第一反应可能是忽略或者假装没看到。但是这么做会严重伤害到别人而且可能会让你社区里的其他贡献者失去动力。    管理大型开源项目的关键就是保证issue活跃。尽量避免让issue停滞不前。如果你是一个IOS开发者，你会知道提交雷达是多么让人沮丧（我也不知道这是什么意思。。）你可能过了两年之后有人让你兼容一下现在的IOS版本。  — @KrauseFx, “开源社区黑客增长”  别因为自己感到内疚或者想做一个好人就把你不想接受的贡献继续保留。随着时间的流逝，这些你没有回答的issue和PR会让你觉得很不爽。更好的方式是马上关掉你不想接受的贡献。如果你的项目已经保守积压的issue的折磨，@steveklabnik 可以给你点儿建议，如何高效的解决issue。第二点，忽略别人的贡献等于是在社区传递了一个负面的信号。让人感觉提交一个贡献是蛮恐惧的事情，尤其是对于刚加入的新手来说。即使你不接受他们的贡献，告诉他们为什么然后致谢。这会让人觉得更舒服。如果你不想接受某个贡献：  感谢他们 的贡献  解释为什么他们的贡献不符合 项目的需求范围，然后提供清楚的建议以供改善，如果你可以的话。和蔼一点，但同时也要讲原则。  引用相关的文档， 如果你有的话。如果你发现你反复收到你不想接受的贡献，把他们加到文档以免你重复叙述。你不需要用超过1-2两句话来回复。比如，当一个celery的用户报告了一个window相关的错误，@berkerpeksag 是这么回复的如果你感觉拒绝别人很不好意思，也很正常，其实很多人都是这样。就像 @jessfraz 说到的:  我和很多来自诸如Mesos, Kubernetes, Chromium等不同开源项目的维护者交流过，他们都异口同声的觉得做一个维护者最难的就是拒绝你不想要的补丁。对于不想接受别人的贡献这件事不要感到愧疚。如 @shykes所说开源的第一原则就是 “拒绝是暂时的，接受是永远的。” 当然啦，认同别人的热情还是一件好事，拒绝他的贡献和拒绝他这个人是两码事。（要做到对事不对人。）最后，如果一个贡献不是够好，你没任何义务接受它。对那些想对你的项目做贡献的人保持和蔼和积极的态度，但是只能接受那些你确定会让你的项目变得更好的提交。你说拒绝的次数越多，对你来说拒绝别人就越容易。谨记！保持主动要想减少你不想接受的贡献的数量，首先，在你项目的贡献指南中解释如何提交贡献以及怎样的贡献会被接受。如果你收到太多低质量的贡献，让那个贡献者先多做做功课，比如：  填写一个 issue 或者 PR 的模板/清单  在提交PR之前先开一个 issue如果他们不遵从你的规则，马上关掉 issue 并引用你的文档。当然啦，这么搞一开始是不太舒服，但是你主动一点确实对双方都好。它减少了某个人花了太多时间到一个你不想要的 PR 上的可能性。而且让你管理起来更轻松。    理论上，在 CONTRIBUTING.md 文件里面告诉别人在他们开始干活之前如何更清楚的知道的干完之后会不会被接受。  — @MikeMcQuaid, “优雅的关闭 PR “  有时候，当你说不的时候，你潜在的贡献者会感到对你的沮丧或者不爽。如果他们开始找你撕逼了，采取必要的措施以应对局势或者干脆把他们从你的社区开除，如果他们不打算和你保持建设性的合作关系的话。成为导师可能在你的社区里有人不断提交一些不符合项目需求的贡献。对你们双方来说，不停的拒绝他的提交，会令双方都很尴尬。如果你发现有人对你的项目很上心，但是就是需要调教，那就耐心一点。给他解释明白每次它的提交为什么不符合项目需求。尝试着让他先做一些简单一点的事，比如那些标有_“good first issue”_ 标签的issue，以此让他慢慢习惯。如果你有时间的话，考虑教Ta怎么完成第一次贡献，或者在社区找一个人教Ta。Leverage your community你不需要凡事亲力亲为。这就是社区存在的原因！即使你没有一个活跃的贡献者社区，但是如果你有很多用户的话，拉他们来干活儿。分担工作量如果你正在寻找其他人来参与, 从身边的人开始。当你看到新的贡献者不停的提交贡献，通过分配给他们更多任务来表示认可。如果别人愿意的话，记录下别人是怎么成长为领导者的过程。鼓励别人来一起管理项目能很大程度上减轻你的工作量，就像 @lmccart在他的项目上做的那样，p5.js    我曾经说过，”对，每个人都可以参与进来，你不需要有很多编程的经验。”当有申请来参加我们的活动的时候，我就在想，这是真的吗，我说了啥？有将近40个人来了，我虽然不可能和每个人都单独交谈，但是大家一起来了，这说明我说的没错。只要有人知道怎么做了，他们就能教他们的邻居。  —  @lmccart, \"”开源” 意味着什么? p5.js 版”  如果你需要暂时或者永久的离开的项目，请找人来代替你，这并没有什么不好意思。如果别人认同项目的发展方向，给他们提交的权限或者正式把项目所有权转移给他。如果有人fork了你的项目而且在保持活跃的维护中，考虑在你的原始的仓库放上这个fork版本的链接。如果大家都希望你的项目继续的话这不失为一种好办法。@progruim 发现 由于它给他的项目Dokku写一个关于项目发展方向的文档，即使在它离开这个项目后他的那些目标仍然会被实现。  我写了一个wiki来描述我想要啥和为什么。不知道为啥，项目的维护者就开始推动项目朝这个方向发展，这对我来说还是有点惊讶的。他们会丝毫不差的按照我的意愿去做这个项目吗？不总是这样，但是总是会把项目推动到离我的理想状态更近的位置。让别人尝试他们自己想要的解决方案如果有贡献者关于项目有不同的意见，你可以礼貌的鼓励它在他自己fork版本上继续工作。fork一个项目不什么坏事情。能复制并且修改别人的代码是开源项目最大的好处之一。鼓励你的社区成员在他自己fork的仓库上继续工作，这是在不和你的项目冲突的基础上，给实现他们的想法最好的出口。    我迎合80%的用户需求。但是如果你是那20%中的一个，那么fork我的项目吧。我不会介意的！我的公开的项目是用来解决那些最常见的问题的。我尝试着让别人fork我的项目然后在上面拓展得更加简单。  — @geerlingguy, “为何我关闭了 PR”  这对于那些强烈的需要某个你没时间实现的解决方案的用户来说也是一样的。提供API或者自定义的钩子帮助他们更好的实现自己的需求而不需要改动源码。@orta发现鼓励在CocoaPods上使用插件导致了很多有趣的想法的诞生。  一旦一个项目变大之后，维护者对怎么增加新代码变得保守是不可避免的事情。你可能很会拒绝别人的需求，但是很多人提的都是合法的需求。所以，你不得不把你的一个工具变成平台。Bring in the robots就像很多工作别人可以帮你做一样，也有很多工作不需要人来做。因为有机器可以替代人工，尤其是那些重复、无聊的工作，用好它们能够让你的维护生活变得更容易。引进测试和别的检查来改善你的代码质量让你项目自动化的最重要的方法之一就是引进测试。测试能够帮助贡献者自信他们没有弄坏什么。测试也让你复查代码和接受别人的贡献的过程更加容易。你反应的越多，社区参与的就越多。设置自动化的测试让所有新来的贡献者都可用，而且保证你的测试可以很容易在贡献者的本地运行。保证所有的代码贡献者在提交之前都运行你的测试。你还得为所有的提交设置一个基本的标准。如果你添加了测试，确保在 CONTRIBUTING 文件里面解释他们是怎么工作的。    我相信测试对所有的代码都是需要的。如果代码被完整的覆盖了测试，以后就不需要改了。我们只需要在代码崩溃或者需要某个功能的添加代码。不管你在修改什么，测试对于检查那些你可能不小心制造的问题都是必须的。  — @edunham, “Rust 社区的自动化”  用工具来自动化日常的维护工作对于维护一个流行的项目来说，一个好消息是别的维护者也可能遇到过类似的问题而且已经找到一个解决方案。这里有各种各样的工具帮你自动化一部分的维护工作。这里仅列举一些常见的例子：  semantic-release 自动化版本发布  mention-bot 可能的贡献者来帮你复查代码  Danger 帮你自动复查代码对于bug报告和其他常见形式的贡献，Github有Issue 模版和 Pull Request 模版, 你可以用来降低沟通成本。你也可以设置邮件过滤来管理你的邮件提醒。如果你想更加的先进和高效，代码风格指南和linter能让你项目收到的贡献更加规范，而且更容易复查和被接受。当然啦，如果你的标准太复杂了，反倒会增加了贡献的难度。所以保证你只添加那些让每个人工作起来更容易的规则。如果你不确定用什么工具，看一看别的流行项目是怎么做的，特别是和你在一个生态系统的。比如，其他的Node模块的贡献流程是怎么样的？用相似的工具和方法，能够让你项目的贡献流程对于开发者来说是很熟悉的。不干了也没关系开源项目曾经让你开心，但可能现在开始让你不开心了。可能当你想到你的项目的时候感觉到”亚历山大”。而同时，issue和PR又纷至沓来。疲倦在开源工作工作中是一个常见的问题，特别是在维护者中间。作为一个维护者，你做的开心对项目的生存来说是一个没有商量余地的条件。虽然你不需要跟谁请假，但是也不要拖到自己疲倦不堪的时候才去度假。@brettcannon，一个python的核心开发者，决定在14年的义务劳动之后休一个月的假就像其他工作一样，有规律的休息会让你对工作保持舒适愉快的心情。    我是WP-CLI的维护者，我发现我需要首先让自己开心，在开源项目和其他事情之间设定清楚的界限。我发现最好的平衡点就是每周在日常的工作安排中花2-5小时在这上面。这会让我从感觉太累到保持持续的激情。因为我给我需要解决的issue表上了优先级，从而我能够在我认为重要的事情上有所进展。  — @danielbachhuber, “我的悼文，你现在是一个非常流行的项目的维护者”  有时候，当你感觉大家都离不开你的时候，请假去休息是一件蛮困难的事情。甚至你自己会因为离开而感到愧疚。在你离开项目的时候尽可能的在用户和社区中间寻求支持，如果你找到支持你的人，还是休息吧。在你不工作的时候还是要保持和别人交流，这样人们不会因为你的失联而感到奇怪。休假不仅适用于度假。如果你周末不想做开源项目的工作了，或者在本该工作的时候不想干活了，和别人说，这样他们知道什么时候不该打扰你。It’s okay to hit pause维护一个大型项目时，相比早期的增长阶段，是需要更多的不一样的技能，作为一个维护者，你会将自己的领导力和个人能力提高一个层次，而这是很少人能体会的到的。但是与此同时，要挑战管理项目，以及设定清晰的界限。只做你感到舒服的事情，能够让你保持开心，活力，高产的状态。",
    "url": "/zh-cn/best-practices/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/zh-cn/best-practices/\">\n      维护者最佳实践\n    </a>\n  </h2>\n  <h2 id=\"what-does-it-mean-to-be-a-maintainer\">What does it mean to be a maintainer?</h2>\n\n\n</div>\n"
  },

  
  "/zh-cn/building-community/": {
    "title": "打造受欢迎的社区",
    "content": "Setting your project up for success现在的你，已经启动了属于自己的项目，而且正在传播它，更重要的是现在已经有人将之下载到本地进行观摩。这真是令人振奋！那么你现在要做的就是，怎么能够让这些有兴趣的人们坚持下去，持续跟进项目。一个受欢迎的社区对于项目的未来至关重要，如果你的项目是刚刚开始收到他人的首次贡献，那么你需要给贡献者们一次愉悦的体验，以鼓励他们进一步的继续参与。让大家感到受欢迎可以通过被@MikeMcQuaid称之为贡献者漏斗的方法思考项目的社区。当建立了自己的开源社区，你需要考虑如何让那些处在漏斗上方的人（潜在用户）转移到漏斗下方（活跃的维护者）。目标是减少贡献者们在每个阶段所遇到的摩擦。当人们能够轻易的取得成绩时，他们就会乐意去做更多事。从你的文档开始：  让大家很容易上手。 一份友好的 README以及清晰的代码示例将让大家很容易的上手。  清楚的解释如何做贡献，使用你的CONTRIBUTING file以及持续更新issues。好的文档能够邀请他人参与你们项目的互动。最终，一些人会开一个issue或者pull request。将这些互动视为机会，将他们转移到漏斗的下方。  当一些人选择了你们的项目，请对他们表示感谢！ 仅仅只是一次消极的经历就足以让一些人再也不想回来。  及时回应。 如果你们一个月都没有回答他们的问题，他们可能早已忘记了你们的项目。  对你以后接受的所有贡献者持开放态度。 很多贡献者是从一份bug报告或者小的修复开始的。这里有很多为项目做贡献的方式。让大家选择他们喜欢的方式。  如果你不赞成一个贡献， 首先你需要对他们的想法表示感谢，同时 解释为什么它不适合项目，如果有必要的话你可以给出相关的文档链接。    为开源做贡献对一些人来说很简单，但对另外一些人可能就不是这样了。有很多人因为没有做正确的事而害怕叫喊，或者只是不适合。（。。。）通过允许贡献者参与一些对技术要求比底的工作（文档，web content markdown，etc），可以极大的减少你对这些情况的关注。  — @mikeal, “现代开源项目下如何增长贡献者”  多数开源贡献者是”临时贡献者”，因为他们只是偶尔参与项目贡献。一位临时贡献者可能没有充足的时间全程跟踪你的项目，所以你的工作是能让他们很轻松地参与贡献。鼓励其他的贡献者也是对项目的一种投资。当你们授权大量的粉丝做他们感兴趣的工作时，压力就会少很多。记录一切    你是否参加过一个（技术）活动，你不认识在场的人，但是似乎每个人站在一个小组里像老朋友一样聊天？（。。。）现在想象下你想为一个开源项目做贡献，但是你不知道为什么或者这个是如何发生的。  — @janl, “让开源可持续发展”  当你开始一个新项目，你会觉得保持工作的私有性是正常的。但是开源项目开始于你在公共平台记录自己的工作进程。当你把事情记录下来，会有更多的人能够按照预定的方式参与到每一个过程中。你可能会得到意想不到的帮助。书写东西不仅仅只是技术文档。任何时刻，你们有写一些东西或者私自讨论项目的冲动，请询问自己是否能将之公开。保持项目透明的项目路线：你们期待什么类型的贡献者，如何审查贡献，或者你们为什么做某些决定。如果你注意到有多个用户遇到过同样的问题，那么你应该将答案记录在 README 中。对于经常遇到的问题，你们可以考虑发布你们的笔记或者相关的issue。在这种情况下得到的反馈常常会出乎意料。记录一切也适用于你自身的工作。如果你正在进行大量的更新工作，请将其放入pull request并标记为正在进行（WIP）。这样，可以让其他人感觉参与过早期工作。积极回应一旦你推广项目，人们将会给你们反馈。他们可能会问项目是如何工作的，或者参与项目初期需要你的帮助。当有人列出一条issue，提交一个pull request，或者询问项目的有关问题时，你们应该尽量回答他们。当你们快速地做出回应时，人们将感觉到他们参与了对话，以及他们将会更热情地参与。如果你无法及时审查请求，请尽早确认，这样会有助于提高参与度。这里是@tdreyno在Middleman上所回应的一个pull request：一份Mozilla研究发现 如果贡献者在48小时内收到代码审查，他们会有很大的回头率，且极有可能会再次贡献。与项目有关的话题也可能发生在互联网的其它地方，例如Stack Overflow，Twitter，或者Reddit。你可以在像这样的一些网站设置通知，这样当有人提及项目时，可以即时的收到提醒。为你们的社区提供一个聚会的场所有两个理由可以解释为什么要给社区提供一个聚会的场所。第一个理由是为了贡献者。线下聚会可以帮助人们相互认识。因为有着共同兴趣的人会想要一个可以聊天的地方。同时当信息是公开的而且是适宜的时候，任何人可以阅读过去的档案以至于能够快速的追赶以及参与。第二个理由是为了社区本身。如果社区没有提供一个公共的场所来谈论项目，他们可能会直接与你联系。刚开始时，回复私有来信可能对你来说很轻松。但是经过一段时间后，尤其是如果项目变得流行的时候，就会感到疲于应付。不要私下和人们谈论你们的项目，而是直接指明他们去指定的公共渠道。公共交流和指明人们开一条issue一样简单，而不是直接发送电子邮件或者在博客上发表评论。你也可以为了方便人们谈论项目设置一个邮件列表，或者创建一个Twitter账号，Slack，IRC频道。或者尝试上述的所有方式。Kubernetes kops 每隔一周抽出办公时间帮助社区成员：  Kops每隔一周都会留出时间为社区提供帮助和指导。Kops维护者已经同意留出时间专门与新手一起工作，帮助PRs，以及讨论新特性。公开交流需要特别注意的事项：1）有关安全方面的issues 2）敏感的行为准则。应该为大家提供一个私下报告这些issue的方式。若不想使用自己的个人邮箱，那么就创建一个公用的邮箱。Growing your community社区拥有强大的能量。这种能量可能是正面的也可能是负面的，这一切都取决于你如何驾驭它。随着项目社区的成长，要想办法让之成为建设性的力量，而不是具有破坏性的。Don’t tolerate bad actors一些流行的项目将不可避免地会吸引到一些破坏它们的人。这些人可能会从一些没必要的争论开始，对一些细枝末节进行纠缠不清，甚或用语言伤及他人。对于这类人，必须采取零容忍的政策。一旦犹豫不决，那么这些消极的人会给社区的其他人带来不愉快的感觉。那时就会出现劣币驱逐良币的现象。    事实上是，拥有一个支持性社区才是项目成功的关键。如果没有来自我的同事，互联网上一些友好的陌生人，以及聊天渠道IRC的帮助，我不可能做好这些工作。（。。。）不要退而求其次。不要满足于混蛋。  — @karissa, “如何运营一个 FOSS 项目”  对项目的微不足道的问题进行定期辩论会分散别人的注意力，包括你自己，要将精力几种在重要的任务上，新人如果看见这样的情景，他们可能不会加入到项目中来。当发现社区中有消极的行为时，要即时、公然的指出来。特别说明的是，要用坚定的语气解释他们的行为为什么是不可接受的。如果这种问题继续发生，你有必要要求他们离开。你的行为准则是为这些情景准备的建设性指南。知道贡献者在哪里随着项目的成长，好的文档会变得愈加重要。临时贡献者或路人是不可能一下子就对项目非常熟悉，一份好的文档，能够很快找到他们需要的。在 CONTRIBUTING 文件里，需要明确告诉新来的贡献者该如何开始。而且若是可能为了想要达到这个目的，还需要准备一个专门的部分。在issue列表中，缺陷的标签需要做到适合不同类型的贡献者：例如，“仅供入门者”, “优质Bug首秀”, 或者 “文档”. 这些标签能够帮助新人快速浏览issues以及开始。最后，撰写让人赏心悦目的文档，进一步让人感到愉悦和舒服。你不可能做到与项目中的绝大多数人产生互动，你们可能没有收到一些贡献，因为有些人感到害怕或者不知道该从何处开始，有时候即使是几个字也能阻止一些人沮丧地离开你们的项目。例如，这里是Rubinius如何开始它的贡献指南：  我们想感谢你们使用Rubinius。这个项目是一个充满爱的工作，我们希望所有用户查找bugs，取得性能上的提升，以及帮助完善文档。每一个贡献都是有意义的，所以感谢你们的参与。话虽如此，但我们还是要求你们遵守一些指南，这样我们就能够找到你们的issue。Share ownership of your project    社区的领导者们有着不一样的意见，而这也是所有健康社区能够成长的原因之所在！终究你会明白，粗暴鲁莽的做法不能得到大家的认同，谦虚低调的做法更容易让大家接受，才是王道。  — @sarahsharp, “是什么成就一个好的社区？”  当大家觉得自己就是项目的主人时，他们就会非常乐意为项目做贡献。但这并不意味着要去改变项目的愿景，又或者接受不想要的贡献。但是社区越信任他们，他们就会越忠实。要尝试去尽快的找到让人们觉得社区就是自己的路径，这里有一些经验和大家分享：  不要亲自去修复简单（非关键）的缺陷。 相反，将这些缺陷作为招募新贡献者的工具，或者指导想要参与贡献的人。开始时可能效果不是很理想，但经过一段时间你们会得到想要的结果。例如，@michaeljoseph要求一位贡献者提交一个pull request在一个Cookiecutter issue的下面，而不是自己修复它。      在项目中添加一个贡献者或者作者文件 用于记录每一个参与贡献的人。        如果社区有了一定的规模，那么 发送一封信或者发表一篇博客 感谢贡献者们。Rust的Rust周报和Hoodie的Shoutouts就是两个非常好的范例。        给每个贡献者提交的通道。@felixge发现这样会使大家越发乐意斟酌他们的补丁，以及他甚至发现，在他没有工作的一段时间，项目依然有新的维护者进来。        如果项目是托管在GitHub上，那么 将项目从你们的个人账号转移到一个组织，以及添加至少一个备份管理员。组织能让与其他人一起工作在同一个项目在变得更加容易。  事实上很多项目只有一个或者两个做大量工作的维护者。随着项目以及社区越来越大，就会有更多的人参与进来。虽然并不是一直都有人在回答问题，但是你可以去增加一些信号，以让他人有能够接触的机会，越是尽早开始，越是能够获得帮助。    你们最大的兴趣是招募喜欢你们项目以及能够做你们不能做的事的贡献者。你喜欢编码，但不喜欢回答issues？那么让社区中能做这件事的人去做。  — @gr2m, “打造受欢迎的社区”  Resolving conflicts在项目的早期，做决定是件蛮容易的事。几乎是想做什么就可以做什么。随着项目的越加流行，会有更多的人对社区的决策开始感兴趣。即使社区没有大量的贡献者，如果项目拥有很多用户，就会发现大家的重点在决策上或者增加他们的issues。在大多数情况下，如果你们培养了一个友好，颇受尊重的社区并公开记录你的过程，社区应该能够找到解决方案。但也有时候会遇到难以解决麻烦。建立友好的氛围当社区正在讨论一个很难的issue时，气氛会很激烈。人们可能会为此变得愤怒或者沮丧，甚至会遭到直接的人身攻击。作为一名维护者的工作是不要让这种情况出现。即使这些你对话题有很强烈的观点，也要尽量站在一个主持者或者推动者的位置，而不是参与争吵以及推动自己的观点。如果有人不友好或者垄断话题，那么立即采取行动，以保持有礼貌和丰富的讨论。    作为一名维护者，尊重你们的贡献者非常重要。他们经常处理一些你们描述亲切的事情。  — @kennethreitz, “保持和善，要么滚蛋”  一些人希望得到指导。撰写一个优势的示例。当然仍然可以表达失望、不高兴或者忧虑，但得心平气和。保持你们的酷并不容易，但是展示领导力能促进社区健康的发展。互联网感谢你们。将你们的README视为最高法则README 不仅仅是一组指令。它也是一个谈论目标、产品愿景和路线的地方。如果人们过分专注于讨论特定功能的优点，它可能有助于重新审视您的README，并谈论项目的更高的愿景。关注README也会使对话变得个人化，所以可以进行建设性的讨论。专注过程，而不是结果一些项目用投票的方式做重要决定。虽然看上去是明智的，投票强调的是得到一个”答案”，而不是倾听以及解决每个人的顾虑。投票会变成政治，社区成员在做感兴趣的事或者表决一个明确的方法时会感到压力。不是每个人都参与了投票，可能在你们的社区中保持沉默的人占了多数，或者用户不知道投票这件事正在发生。有时候，投票是必要的手段。尽你们所能强调“寻求共识”而不是共识本身。在寻求共识的过程中，社区成员讨论主要问题，直到他们感到他们的意见已经得到充分的表达。当仅遗留下一些无关紧要的问题时，社区需要向前迈进。”寻求共识”不能确保社区能得到一个完美的答案。而是侧重聆听和讨论。  Atom Issues不存在投票系统的部分原因是因为Atom团队在所有情况下都不会遵循投票系统。有时我们必须选择我们认为是对的事，即使它不流行。（。。。）我能通过社区的反馈知道我能够提供什么以及做什么样的工作。  — @lee-dohm on Atom 决策流程  即使不确定是否采用寻求共识的方式，作为维护者，让大家知道他们正在受到关注。让其他人知道，以及承诺解决他们的问题，这在很大程度上减少了敏感情况的发生。然后，就去坚决的执行。不要为了获得决议而急于做出决定。在做一个决议之前请确保每个人已经知道以及所有的信息以及公开。将对话的重点聚焦于行动讨论很重要，但是富有成效和没有效果的对话是有很大区别的。鼓励讨论，只要它正积极地朝着解决问题的方向进行着。如果对话已经无法再进行下去，只有很少的人在参与或者大家正在讨论无关紧要的问题，这时候就该结束对话了。允许这些对话进行下去不仅对解决问题没有帮助，而且不利于社区的健康发展。它释放了这样一个信号，表示允许或甚至鼓励这种类型的对话，它可能阻止人们提高或者解决未来的问题。当你们或者其他人每提出一个观点时，请自问：”这如何使我们更接近一个决议？”如果对话开始有解散的征兆，问团队：”我们下一步该做什么?”才能重新对话。如果一个对话没有清晰的方向，没有明确的措施可以采取，或者合适的措施已经被使用，那么关掉issue并解释为什么关掉它。    指导一件事朝着正确的方向发展是一门艺术。它对阻止人们浪费时间或者要求他们发表有建设性的看法没有作用。（。。。）反而，你们必须为接下来的进展给出条件：给大家一个路线，跟随一个可以得到你们想要的结果的途径，这样就不像是些无用的口头行为。  — @kfogel, 打造开源软件  挑战你们的智慧上下文很重要。考虑谁参与讨论，以及他们如何代表社区的其他人。社区中的每个人都为这个问题而烦恼，或者参与讨论了吗？或者只是一部分人感到困惑吗？不要仅关心活跃的声音，也请不要忘记考虑社区中保持沉默的人。如果这个问题不代表社区的更广泛的需求，你们可能要承认只是少数人的担心。如果这是一个反复出现的issue，没有一个清晰的解决方案，那么指向他们以前讨论的话题。找出社区中的决策者通过一个态度端正和目标清晰的对话，很多困难都是可以解决的。即使在富有成效的对话中，对于如何进行的意见也可能存在差异。在这些情况下，确定一个人或一组人，可以作为决策者。决策者可以是项目的主要维护者，或者是大家投票选出的一个小团体。理想情况下，在使用GOVERNANCE文件之前，其实已经确定了决策者和与之相关的事宜。使用决策者应该是你们最后才能采取的手段。分离issues是一个你们社区成长和学习的机会。利用这些机会并精诚合作，尽量找出问题的解决方案。Community is the ❤️ of open source健康，蓬勃的社区每周都会为开源付出大量辛勤的劳动。许多贡献者指出其他人在开源工作或不在开源工作的原因。通过学习如何建设性地利用这股力量，你们会帮助他人有一个难忘的开源体验。",
    "url": "/zh-cn/building-community/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/zh-cn/building-community/\">\n      打造受欢迎的社区\n    </a>\n  </h2>\n  <h2 id=\"setting-your-project-up-for-success\">Setting your project up for success</h2>\n\n\n</div>\n"
  },

  
  "/zh-cn/code-of-conduct/": {
    "title": "行为准则",
    "content": "Why do I need a code of conduct?行为守则是一份确立项目参与者行为规范的文件。采用和执行行为守则可以帮助你们的社区营造积极的氛围。行为守则不仅帮助保护你们的参与者，同时还有你们自己。如果你们维护一个项目，随着时间的推移，可能会发现其他参与者懒散的态度会让你们疲惫或对工作不满意。一份行为守则可以帮助你们促进健康，有建设性的社区行为。积极主动减少你们或其他人在你们的项目中变得疲劳的可能性，并帮助你们在有人做出你们不同意的事情时采取行动。Establishing a code of conduct尽可能早地建立行为守则，当你们第一次创建项目的时候。此外，说出你们的要求。行为守则的描述遵循如下几点：  行为守则在哪里有效 (只在issues以及pull requests，或者社区活动？)  行为守则适用于谁 (社区成员以及维护者，那赞助商呢？)  如果有人违反了行为守则会怎样？  大家如何举报违规无论你们在哪里，请使用已有的行为守则。贡献者盟约是一个被超过40，000个开源项目（包括Kubernetes, Rails和Swift）所使用的行为守则。Django行为守则和Citizen行为守则都是非常好的行为守则。请将CODE_OF_CONDUCT文件放在你们项目的根目录，并在README中附上其链接，这样对你们的社区是可见的。Deciding how you’ll enforce your code of conduct  一份行为守则没有（或者不能）执行会比没有行为守则更糟糕。它释放这样一个信息：行为守则或者尊重在你们的社区并不重要。  — Ada Initiative  你们应该解释如何执行行为守则在违规发生之前。有几点理由说明为什么这么做：      必要的时候，它表示你们处事认真谨慎。        你们的社区会因为投诉确实可以得到回复而更加放心。        如果他们发现自己因为违规而被调查时，你们能确保社区的审查流程是公平透明的。  你们可以给大家一个私有的渠道（如email地址）以便大家报告违规行为以及解释谁收到了这一的报告。它可以是维护者，一组维护者或行为守则工作组。请不要忘记了有人可能想要报告某些人违规接受了这些报告。在这样的情况下，也给他们举报那些人的机会。例如，@ctb和@mr-c 在他们的项目上解释， khmer：  对于滥用现象，扰乱或者其他不可接受的行为都可以向khmer-project@idyll.org（仅由C. Titus Brown和Michael R. Crusoe处理）发送邮件。要报告涉及其中任何一个的问题，请电邮Judi Brown Clarke，Ph.D. BEACON行动进化研究中心的多元化主任，NSF科学技术中心。为了获得灵感，可以查阅Django的执行手册（你们是否需要如此详细的手册，这取决于你们的项目）。Enforcing your code of conduct有时，尽管你们尽了最大的努力，仍然会有人违反守则。当这样的情况发生时，有几种方法来解决消极或有害的行为。搜集有关违规的信息认真对待社区中每个成员的想法。如果你们收到有人违规的报告，请认真对待并调查此事，即使它不符合你们自己的经验。这样做可以向你们的社区表面，你们珍视他们的观点和信任他们的判断。有的社区成员可能是让大家一直不舒服的惯犯，或者他们只是说了或做了一次。这都需要依据实际情况进行处理。在你们做出回应之前，请认真思考发生了什么事。通过阅读他们过去的评论和对话可以更好地理解他们为什么要那样做。尽量收集其他人对他们行为的看法。  不要陷入争论。在你们处理完手头上的事情之前，不要侧重于处理别人的行为。专注于你们需要什么。  — Stephanie Zvan, “So You’ve Got Yourself a Policy. Now What?”  采取适当的行动当搜集和处理足够的信息后，你们需要决定做什么。当你们在考虑下一步的时候，请牢记你们的目的是营造一个安全，尊重和协作的社区氛围。不仅要考虑如何处理有问题的情况，还要考虑们的反应将如何影响你们社区的其他行为和期望。当有人报告违规时，处理它是你们的工作，而不是他们的。有时，报告者透露他们的信息会给他们的职业生涯，声誉和人生安全带来很大的风险。迫使报告者面对骚扰者会将他们置于妥协的位置。除非报告者有特别的要求，你们应该直接和有问题的人沟通。这里有些方法帮助你们回应违规行为：      向相关人员发出公开警告以及解释他们的行为产生了怎样的负面影响，最好在发生问题的地方。在可能的情况下，公开沟通会向社区的其他人传达你们认真对待行为守则。要友善，但坚定的沟通。        私下接触相关人员向他们解释他们的行为对其他人产生了怎样的负面影响。如果相关情况涉及到个人敏感信息，你们可能会使用私有通信方式。如果你们和一些人私下沟通，对于首先报告这个情况的CC来说是个好主意，因为他们知道你们采取了行动。在征求他们的意见之前，请向报告人征求同意。  有时，一个解决方案不能达到目的。有关的人可能在面对或者不改变他们的行为时变得气势汹汹或敌对。在这种情况下，你会想到考虑采用强制措施。例如：      暂停有关人员在项目中的工作，通过暂时禁止参与项目的任何方面执行        永久禁止有关人员加入项目  对于禁止成员的做法，你们应该非常谨慎，只有在没有其他解决方案的情况下才能使用。维护者的责任和义务行为守则不是可以任意执行的法律。你们是行为守则的执行者，同时你们的责任是遵守行为守则确立的规矩。作为维护者，你们可以为社区指定准则，同时你们可以根据行为守则执行这些准则。这意味着你们需要认真处理违规行为。报告者对他们的投诉进行了彻底和认真地审查。如果你们确定他们报告的行为没有违规，你们需要他们进行沟通并解释你们为什么不进行处理。他们会怎样做，取决于他们：容忍他们认为有问题的行为，或者停止参与社区。如果报告的行为没有_技术上_的违规，这可能表面你们的社区依然存在问题，同时你们应该调查潜在的问题以及采取相应的行动。这可能包括修改你们的行为守则，以澄清可接受的行为和/或与行为被举报的人交谈，并告诉他们，虽然他们没有违反行为守则，但是他们在期望和确定的边缘另其他参与者感到不舒服。最后，作为维护者，你们给可接受的行为建立和执行标准。你们有能力塑造项目社区的价值观，以及参与者希望你们能 公平公正地执行这些价值观。鼓励你们希望看见的行为 🌎当你们的社区变得似乎敌对或者不受欢迎时，即使是一个大家能容忍的个人行为，也会让你们失去很多贡献者，你们可能再也遇不到其中的一些人。虽然执行或者采用行为守则很难，但是营造一个受欢迎的环境将帮助你们社区成长。",
    "url": "/zh-cn/code-of-conduct/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/zh-cn/code-of-conduct/\">\n      行为准则\n    </a>\n  </h2>\n  <h2 id=\"why-do-i-need-a-code-of-conduct\">Why do I need a code of conduct?</h2>\n\n\n</div>\n"
  },

  
  "/zh-cn/finding-users/": {
    "title": "为项目寻找适合的用户",
    "content": "Spreading the word还没有规定说应该怎么去倡导刚创建的开源项目。但没有任何理由说必须默默无闻的在开源项目上工作。相反，如果你向有更多的人发现和使用你的开源项目，你就应该让所有人知道你所努力的成果！Figure out your message在你开始推广你的项目之前，你应该能够解释你的项目是做什么的，为什么大家需要他?是什么让你的项目变得不同或者有趣，在自己心中问这些问题会让你更容易说服别人。牢记一件事情，别人之所以使用你的项目，甚至是为你的项目做贡献，是因为你的项目解决了他们的问题。所以你要找出他们需要什么，然后把他当成你项目的卖点或者说价值所在。举个例子，@robb用代码实例来清晰的阐述为什么他的项目Cartography是有用的。如果你想深入了解如何挖掘项目的”卖点”，看一下Mozilla的“Personas and Pathways”，练习如何建立用户的形象。Help people find and follow your project  你最好有一个唯一的”主页”链接用来推广，引导人们关注你的项目。你不需要找一个炫酷的模板或者域名，但是你的项目确实需要一个入口。  — Peter Cooper &amp; Robert Nyman, “How to Spread the Word About Your Code”  通过引导他们到一个唯一的地址来帮助人们发现和记住你的项目。要有一个推广的主阵地。一个Twitter账号，Github链接，或者IRC频道是引导人们查看你们项目的一个简单的方式。这些方式也给你日益增长的社区一个讨论的好地方。如果你目前还不想给你的项目搞这么多乱七八糟的东西，而且还要在有机会的时候推广你的Twitter账户和Github账户。举个例子，如果你某一个讨论会或者活动上发言要保证在你的简历或者幻灯片上包含这些信息。只有这样人们才会知道怎么找到你或者关注你的工作。    我之前犯过的一个错误就是没有给项目开一个Twitter账户。Twitter是一个让人们知晓项目进展的好渠道，也可以让人们持续的接触到你的项目。  — @nathanmarz, “History of Apache Storm and Lessons Learned”  考虑给你的项目做一个网站一个网站可以让你的项目更加友好，而且更加容易浏览，更重要的是附上清晰的文档和教程。这也是象征着你的项目还是活跃的，这会让你的用户使用你项目的时候感觉更放心。可以用一些例子告诉人们如何使用的项目。@adrianholovaty, Django的协作者说，我们给Django做的网站可以说是”在早期开发Django的时候做的最好的一件事情了”。如果你的项目是托管在GitHub上的，你可以用GitHub Pages简单的创建一个网站。Yeoman, Vagrant, and Middleman 是一些优秀的内容详尽的网站的例子现在你的项目有了”卖点”，和让人们很容易发现你项目的渠道，接下来我们谈谈如何和你的用户交流吧！Go where your project’s audience is (online)网上拓展是分享和快速宣传项目的一个好方法。借助一些网上的渠道，你有可能找到一大批受众。利用好已有的线上社区和平台去找你的受众。如果你的开源项目是一个软件项目，你可能会在Stack Overflow, reddit, Hacker News, 或者Quora。找到你觉得人们会最有可能从你的项目中受益或者对你项目感兴趣的渠道。    每个程序都会有那么一些方法只有一部分人才会用到，所以不要想着去打扰每一个人，把你的力气用在可能会从你项目受益的社区就好。  — @pazdera, “Marketing for open source projects”  来看看下面的一些方法吧，也许推广你的项目的时候用得着。  快找找有没有相关的开源项目和社区。有时候，你不需要直接的推广你的项目。如果你的项目对使用Python的数据科学家来说是无可挑剔的，那么就去找Python数据科学的社区。等他们知道你的项目之后，很自然的就会谈论然后分享你的工作成果。  如果你项目尝试解决某些问题，那么找到会遇到这些问题的人。想象你的项目受众会在哪些论坛，然后搜索这些论坛，回答他们的问题，然后找一个合适的实际，向他们建议使用你的项目来作为一种解决方案。  寻求反馈。给一个可能会用到你项目的人介绍你自己和你做的工作。对哪些人会从你的项目受益要很明确。尝试完善一下下面这句话：”我觉得我的项目能够帮助A，那些尝试做B的人”。听取和回复别人的反馈，而不是简单的推广。一般来说，在你索取什么回报之前先把精力放在帮助别人上。因为在网上推广一个项目对任何人都是一个不难的事情，所以有很多人和坐着一样的事。告诉人们你是谁，而不是你想要什么，这样才能从众多推广者中脱颖而出。如果没有人对你的推广感兴趣，不要灰心！大部分的项目的开展都是一个要花费数月和数年的反复过程。如果你第一次没收到反应，尝试换一种策略，或者找办法给别人的项目做做贡献。这都是些需要时间和奉献精神的事情。Go where your project’s audience is (offline)线下活动是一个推广项目流行的方式。这是一个接触某个忠实听众和建立深层次的联系的好方式，特别是如果你对到场的开发者感兴趣的话。如果你还是个公中演讲的新手，从寻找一个和你项目使用的语言或者生态系统相关的当地的聚会开始吧。    我去Pycon的时候非常紧张。我要发表一个演讲，在那儿我就认识几个人，还在那儿呆了整个周。但是其实我不应该焦虑的。Pycon真是太他妈吊了！每个人都是超级友好外向，以至于我没有找到时间和人们讲话。  — @jhamrick, “How I learned to Stop Worrying and Love PyCon”  如果你从来没在公共场合讲过话，感觉紧张那就太正常啦！记住你的听众就在哪儿，因为他们都是真正的想听你介绍你的项目。当你在写你的演讲稿的时候，把重点放在你的听众会感兴趣而且能获取价值的事情上。保证你的语言要友好和和蔼可亲。笑一笑，深呼吸，幽默一点儿。    当你开始写你的演讲稿的时候，不管你的主题是什么，如果你能把你的演讲当成是给别人讲故事的话，效果会更更好。  — Lena Reinhard, “How to Prepare and Write a Tech Conference Talk”  等你准备好了，考虑一下在某个会议上发言的时候推广你的项目研讨会可以帮助你接触更多人，有时候是来自全世界各地的人。    我非常认真的给JSConf的人写了一封信，然后求他们给我一点时间让我JSConf上展示我的项目。同时我又非常担心，这个项目我做了六个月，要是大家不认可怎么办。那时候我就一直在想，我的天，我他妈在这里是干吗？  — @ry, “History of Node.js” (video)  Build a reputation除了上面提到的策略之外，邀请人们分享和支持你的项目的最好办法就是分享和支持他们的项目。帮助新手，分享资源，给别人的项目认真的做贡献会帮助你建立起良好的声誉。然后他们就很有可能知道你的项目而且更有可能关注和分享你在做的事情。有时候，这些关系还会进一步发展成更广阔的生态系统中的官方合作伙伴（意思即使你有可能成为那些有名社区的成员）    urllib3之所以是现在最流行的Python第三方库的唯一原因就是大家都需要他。(待修改)  — @shazow, “How to make your open source project thrive”  种一棵树最好的时候是十年前，其次是现在。所以啥时候开始建立你的声望都不晚。即使是你早就已经建立了自己的项目，还是要继续找办法帮助别人。建立用户群没有一蹴而就的方法。获取别人的新人和尊重需要时间，同样，建立声望的过程也永远不会停止。    PhantomJS公开第一个版本的时候实在2011年初。我也就是用一些常规的方法来推广：发Twitter，写博客告诉别人可以用它来做什么，在各种各样的聚会上我都提到过它。当2014年他已经广为人知的时候。我才开始做关于它的演讲。  — @ariya, “Maintainer Stories”  Keep at it!有时候，让人么注意你的开源项目会话费很多事件。但是关系！现在很多流行的项目都是花了很多年才有今天的活跃度。把重点放在建立声望上而不是企图一夜成名。耐心一点，一如既往的和那些可能会从中受益的人们分享你的项目。",
    "url": "/zh-cn/finding-users/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/zh-cn/finding-users/\">\n      为项目寻找适合的用户\n    </a>\n  </h2>\n  <h2 id=\"spreading-the-word\">Spreading the word</h2>\n\n\n</div>\n"
  },

  
  "/zh-cn/getting-paid/": {
    "title": "通过为开源工作获得报酬",
    "content": "Why some people seek financial support很多开源的工作都是来自志愿者的辛勤付出。例如，有些人在使用项目的过程中遇到了问题，然后快速的修复了；也有些人是利用他们的业余时间在开源项目中需求挑战。  我尝试着寻找让人爱不释手的编程项目，从而是我的周末或圣诞节也能保持状态。(…)我拥有一台家用电脑，手头也并不十分宽裕。在思考了一阵子之后，我决定写一新的交互式的编程语言，（…)后来我将这门语言叫做Python。  — @gvanrossum, “Python 编程”  人们从事开源相关的工作，却没有得到报酬，这事一点都不奇怪，让我们来看看缘由：  他们本来就有一份自己热爱的全职工作, 这可以让他们在没有后顾之忧的情况下利用业余空闲时间来为开源做贡献。  他们热衷于沉浸在开源的思考中  又或者是创造逃避环境，只是不想在他们的项目中获得金钱上的回报。  他们能够从开源的贡献中获得其它好处， 比如收获名誉、投资，又或者是学习到新的技能，又或者是能够感觉到和社区很接近。    对于一些情况，金钱上的赞助会增加责任的感觉，（…）这点对于我们来说很重要，尤其是一个全球性的社区，我们生活在一个快节奏的世界，只是想说明”不是现在，我觉得去做一些完全不同的事”。  — @alloy, “为什么我们不接受捐赠”  但是，很多时候，尤其是正在进行的或者是需要花费大量时间的付出时，能够取得报酬是人们积极参与开源的唯一理由，无论是项目需求还是个人原因。维护颇流行的项目是一项很重要的责任，需要在每周花10～20小时，而不是每个月的几个小时。    询问任何一位开源项目的维护著，他们都会告诉你关于管理一个项目需要花费大量时间的真相。你拥有客户，你的为他们修复问题，你创建新的功能。这些都需要真正的花时间去做的事情。  — @ashedryden, “无偿劳动的伦理和开源软件社区”  有偿工作也使人们从不同的各行各业做出有意义的贡献。有些人无法承受为开源项目做没有金钱回报的工作，他们自身的情况，如当前的财务收入、债务、或者来自家庭等其它的照顾义务。这也就意外着这个世界再也无法看到那些拥有天分但是有心无力的人们的贡献了。这是一个伦理上的问题，正如 @ashedryden 在 无偿劳动的伦理和开源软件社区 一文中所描述的，因此开源的很多工作是由那些已经在生活上取得成就的人们所贡献的，通过志愿的贡献进一步让他们获得了更加丰富的回报，而那些无法承受时间的人们错失了这样的机会，这就导致了开源社区越发的缺乏多样性。     开源软件为技术领域贡献了巨大的好处，其实，更准确的说是所有的行业。(…) 然而，如果仅仅是靠人们自身的痴迷和兴趣所致，那么很可能就没有开源的今天。  — @isaacs, “金钱与开源”  如果你在寻找金钱上的支持，可以考虑两条路径。你可以作为贡献者来将你的时间作为资金，或者是找一家能够为项目提供资金的组织。Funding your own time在今天，有很多人在开源中获得了报酬，无论是兼职或全职。最为常见的做法就是，有些老板愿意为你付出的时间和工作成果掏腰包。如果你的老板使用到了相应的项目，那么人们找到对应的开源工作就顺理成章，当然这需要你有足够的能力来担当。也有的情况是老板没有使用到相应的开源项目，但是用到了诸如Python之类的开源编程语言，那么能够维护流行的开源编程语言项目可以帮助老板吸引到相应的开发者。又或者都不是，那老板也可以获得对开发者友好的口碑。    就像很多开源项目的故事一样，我花了大量的时间来维护项目。当我第一次开始为开源做事情的时候，我在公司待到很晚才回家。（…)然后我就和老板谈，就开源的任务当作本来的工作来做。  — @hzoo, “一名维护者的故事”  如果你现在还没有为开源项目做工作，但是你希望你现在所做得成绩开源出来，那么你可以和你的老板讲，奉劝他将内部的软件开源。很多公司都在开发开源项目，从而能够打造自己的品牌，以及希望雇佣到高质量的人才。@hueniverse ，举例来说，有充足的证据证明 沃尔玛对开源的投资是合理的。 @jamesgpearce 同样，脸谱网的开源项目让它的招聘显得与众不同 :  开源能够与我们Hacker文化密切配合，也能够和我们的组织融洽。我们询问员工：”在Facebook真的那么的在意开源软件？” 超过2/3的人的回答是”yes”。一半的人表示，该计划对他们为我们工作的决定作出了积极的贡献。这可不是一个戏谑的数字，我们希望继续保持这样。如果你所在的公司不赞同这么做，没关系，重要的是保持社区和企业活动之间的界限清晰。你要告诉老板，开源的维持是由全球各地的人所贡献，要比任何一个公司或某一地域都大的多。老板会自己作出权衡的。    获得开源的工作是一个难得的机会，而你不应该放弃对这个过程的热情。公司应该为你的激情付相应的报酬。  — @jessfraz, “Blurred Lines”  如果你实在无法在当前的雇主下开展相关开源的工作，那么是该考虑换老板的时候，应到找个支持想开源作贡献的老板！寻找那些致力于开源工作的公司。比如：  Ghost  就是一家围绕很多开源项目的好公司  Rackspace 甚至为其员工提供了贡献开源守则那些大公司发起的项目，如 Go 或 React，均希望雇佣到优秀的工程师来为他们工作。当然最终还是要看你自身的条件而定，你甚至可以利用你的开源项目来独立的进行融资。这边就有几个案例：  @gaearon 通过 Patreon crowdfunding campaign为他的项目 Redux成功的融到了资金。  @andrewgodwin 通过 Kickstarter campaign 为Django schema 迁移拿到了资金Finding funding for your project除了针对个人贡献者的建议之外，还有一些项目可以从公司、独立投资方、以及其它的资金处来获得进一步的工作。机构资金可能用于支付当前的贡献者，涵盖运行项目的成本（如托管费用）或投资于新功能或想法。一些获得组织资助的项目案例：  webpack,  通过 OpenCollective 从公司和个人来筹集资金  Vue, 由 @yyx990803 创建，通过 Patreon获得资助  Ruby Together, 由 @indirect 创建的非盈利组织 ，为诸如 bundler、RubyGems、以及其它的一些 Ruby 的基础设施项目提供资金支持尽管开源日渐的流行，但是为项目寻找资金仍然是处于试验中。目前所收集到的包括：  通过大力宣传活动或募捐，为您的工作筹集资金 这策略在你拥有足够的粉丝，或者是已经社区声誉良好的情况下，又或者是项目非常的受欢迎，等情况下有效。  接受基金巨头的资助 一些软件基金会和公司为开源的相关工作提供很好的机会，如Python 软件基金会, Mozilla 基金会、以及Stripe.  获得公司或独立投资商的赞助 通过软件基金会，或者是干脆 创业 来支撑项目。更多的案例和细节， @nayafia 专门写过一个指南 ，专门针对的就是如何为开源工作获得报酬。不同类型的资助需要不同的技能，所以仔细的掂量下资格，然后找个最适合自己的方式。Building a case for financial support无论你的项目是新的创意，还是已经运行多年，你都需要为你的资助者满意，并提出有效而合理的案例。不管是你自己寻找相应的工作，还是为项目融资，你都应该尝试回答下面的问题。影响为什么说这个项目有实际用处？你的用户或潜在的用户会喜欢它？5年之后它会是什么样子？牵引尝试着去收集一些和你项目休戚相关的证据，比如指标、有趣的事情、还是其他人的推荐。是否有其它公司或者是业内意见领袖正在使用你的项目？如果没有的话，是不是应该去找相应的人去推荐下？充分利用资助者的价值资助者，无论他是雇佣你的老板，还是一家获得授权的基金会，你都有机会和他们频繁的进行接触。 他们为什么会放弃其它机会而去支持你的项目？他们个人有何好处？利用风投您将如何用拟议的资金完成什么？专注于项目里程碑或成果，而不是支付工资。你将以何种方式接受资助资助者是否有关于宣传的额外需求？例如，你可能需要您可能需要成为非盈利组织或拥有非营利性财政赞助商。又或者是资助者必须给到个人而不是一个组织。这些不同的需求会因为不同的资助者而异，所以请事先做好准备。    多年以来，我们一直都是网站友好图标资源的领先者，社区超过2千万人，并为7千万网站提供资源，其中包括 Whitehouse.gov。 (…) 3年前我们发布了Font Awesome 的第4个版本。Web技术从那时起改变了更多事情，而且坦率的说Font Awesome 都有点过时。 (…) 这也是我们刚刚发布 FontAwesome 5的原因之一，我们模块化和重写了 CSS，并从上到下重新设计了每一个图标。我们积极的探讨更好的设计、更好的一致性、以及更好的可读性。  — @davegandy, Font Awesome Kickstarter 众筹视频  Experiment and don’t give up赚更多的钱不是件容易的事情，无论你是在开源项目，亦或是在非盈利组织，又或者是软件的创业公司，但是无论在哪里，挣更多钱的秘密就是更多的创造力。当确定了你想如何获得报酬的时候，请继续你的研究，将自己放在投资人的角度来看问题，可以帮助你更好的构建一个更加令人信服的赚钱之道。",
    "url": "/zh-cn/getting-paid/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/zh-cn/getting-paid/\">\n      通过为开源工作获得报酬\n    </a>\n  </h2>\n  <h2 id=\"why-some-people-seek-financial-support\">Why some people seek financial support</h2>\n\n\n</div>\n"
  },

  
  "/zh-cn/how-to-contribute/": {
    "title": "如何为开源做贡献",
    "content": "Why contribute to open source?    在 [自由代码] 下工作，让我学习到了职业生涯中非常重要的技能，无论是大学还是实际的工作，我认为从开源项目中得到的收获的远大於我的贡献！  — @errietta, “我为何是如此的热衷于为开源软件贡献力量”  为开源贡献力量，得到的回报就是能够学习到很多、受教很多、且能够锻炼任何你能够想到的经验。为什么会有人为开源做贡献？这可能是很多人都不明白的地方，这里不妨列出一些！巩固现有技能无论是撰写代码、设计用户界面、图形设计、撰写文档、亦或是组织活动，假如你有实践的愿望，你总能在开源项目中找到自己的位置。遇见那些和你”臭味相投”的人开源项目一般都会有一个和谐、热心的社区，以让大家团结一致。实际上，开源界经常发生这样的情形，很多人的深厚友谊都是通过共同参与开源所建立起来的，至于具体的方式，可能是在一次技术研讨会上相谈甚欢，也可能是一直在聊天室中探讨问题。寻找导师，并且尝试帮助他人和他人共同在一个共享的项目下工作，这意味着需要向他人解释清楚自己是如何做的，同理，也需要向他人求助，询问别人是如何做的。相互学习和彼此教学对于每位参与者都能满载而归。在公众间建立你的声誉（职业口碑）根据开源的定义，你在开源下所有的工作都是公开的，这也就意味着开源项目是一个很好展示你实力的地方。学习领导和管理的艺术开源为实践领导力和管理技能提供了很好的机会，比如解决冲突、组织团队、工作的优先级排列。鼓励作出改变，哪怕改变是很微小的在开源的世界里，作出贡献的不一定非得是花了很长时间拥有大量经验的人。你是否遇到过浏览某些网站发现有拼写错误，希望有人能修改它？其实，在开源的项目中，你只需要做就可以了。没有那么多的顾忌，开源让人们在很舒服的状态做事，而这才是这个世界应有的体验。What it means to contribute如果你是一名开源界的新手，可能会对贡献的流程心生畏惧。比如：该如何找到正确的项目？不懂编码又想参与怎么办？万一做错事情了怎么办？其实没有关系的啦！条条大路通罗马，开源项目有太多的路径可以参与！以下是一些实用的技巧，帮助你快速的获得经验。你不具备编码的能力对于为开源做贡献常见的误解就是：为开源做贡献必须得提交代码。事实上，代码固然重要，但是项目中不需编码的重要部分经常被忽视。你若做了这部分，对于项目来说可是莫大的贡献，而这根本就不需要什么撰写代码！    我被大家所熟知是因为为 CocoaPods 做了一些事, 其实大伙并不知道我实际并没有为 CocoaPods本身做了什么，我大多数的工作是诸如撰写文档、品牌宣传之类的。  — @orta, “默认迁移到开源软件”  即使你是一位开发者，非代码的贡献对于项目来说也是举足轻重的，尤其是对于社区的其他成员来说。用心维系这些关系能够让你有工作到项目其它部分的机会。    我第一次接触Python开发团队（简称 python-dev)是在 2002年6月17日，当时我是向其邮件列表发送了一份邮件，是关于请求通过我的补丁的。我很快就又发现了开源的bug，于是决定开始为小组收集邮件摘要，然后他们给了我一个澄清问题的理由，但是更加重要的是，我能够捕获到某人指出需要修复的问题。  — @brettcannon, “维护者的故事”  是否热衷于规划事件？  为项目组织研讨会或线下分享，一如 @fzamperin 为 NodeSchool 所做的那样  为项目组织大型会议（假如它有的话）  帮助社区成员寻找合适的技术会议，且帮助有实力的成员提交演讲的拟稿是否偏向于设计？  重新布置布局以提高项目的可用性  进行用户研究以重新组织和完善项目的导航或菜单  整理一个风格指南，以帮助项目有一致的视觉设计  创建t恤的艺术或一个新的标志，就像 hapi.js 的贡献者那样你是否热衷于写作？  撰写和改进项目的文档  能够以实例来展示项目该如何使用的  为项目撰写新闻稿，或者到邮件列表高调布道  为项目撰写教程， 一如 pypa 的贡献者所做的  翻译项目的文档为本土语言    说真心话， [文档] 是非常重要的. 目前Babel的文档已经很棒了，这也是其杀手锏的特性之一。当然，还有一些章节需要大家的完善，即使是随便在哪儿增加一个段落都很感激。  — @kittens, “贡献者召集令”  你喜欢组织活动吗？  链接重复的问题，并建议新的问题标签，使事物井井有条  通过开放的问题，并建议关闭旧的，就像 @nzakas 为 eslint 做的  把最近开放的问题阐述清晰，以推动讨论享受编码的乐趣？  找到一个开放的问题并解决它，就像 @dianjin 为 Leaflet 做的  想一想你是否可以帮忙写一个新的功能  自动化项目设置  改进工具和测试热衷于帮助他人？  回答关于项目的问题，例如在 Stack Overflow（像 Postgres 的这个示例）或者 reddit 上  为人们解答公开的问题  帮助缓和讨论板或对话渠道在编码方面是否喜欢帮助他人？  为他人的提交审核代码  为如何利用项目撰写教程  为其他贡献者做导师， 正如 @ereichert 为 @bronzdoc 所做的那样，哦，是 Rust 项目其实不必一定是软件项目！尽管人们一提起”开源”二字，默认就是指开源软件，其实不尽然，开源可以是任何事情的修饰，而不仅仅是指软件而言的。比如图书、食谱、列表、以及任何可以开源的项目类。举例来说：  @sindresorhus 创建了 “惊奇” 列表  @h5bp 维护了针对前端开发者的面试题  @stuartlynn 和 @nicole-a-tesla 制作了收集关于海雀的有趣的事实尽管你是一名软件开发者，也可以去撰写一些文档去帮助新的入门者。其实项目中那些看起来令人生畏的项目并不是写代码，做开发者总得挑战自己，其实在做得过程中可以增强信心和获得全新的体验。Orienting yourself to a new project    如果你跟着了一条issue，还发现了令人感到困惑的事情，这很正常，不是你一个人这样。这些工具需要大量的隐式的知识，但是总会有人带着你熟悉这些，当然你要找他们问对的问题。  — @shaunagm, “如何为开源做贡献”  为开源做贡献，除了单词拼写错误之外，大多数时候就像是走在陌生人中间，浑身上下不适。这就像人们已经在西边讨论的非常深入了，你突然开始讲东，肯定会让人感到不舒服。与其盲目的在项目中游荡，不如静下心来学习规则。这样反而会让你的想法被注意到，也会有人听到你的声音。分析感兴趣的开源项目每一个开源社区都是不一样的。在某一个开源项目扎根多年，这意味着你只是对这一个开源项目无比的熟悉。若是切换到不同的项目，可能会发现完全是另外一回事，所谓的使用词汇、习惯用语、沟通方式都发生了变化。然而，很多的开源项目还是遵循类似的组织结构的。理解不同的社区角色和全部的流程，可以很好的帮助你快速的切入新的项目。一个典型的开源项目均会有如下类型的人：  作者: 项目的创始人或创始组织  归属者: 代码仓库或组织的管理员（不一定和作者是同一个人）  维护者: 贡献者，负责项目的未来走向和组织的管理（他们通常也是项目的作者或归属者。）  贡献者: 只要是为项目做出了贡献，就算。  社区成员: 那些实用项目的人们。他们或许是积极的讨论者，又或者是为项目的方向提出意见的人。一个较大的项目，可能下面还会细分子社区，或者是针对不同的任务分成不同的小组，比如工具小组、分流、社区事务、以及活动组织等。径直到项目到web站点，找到”团队”页面，或者是查看治理文档，从而获得类似到信息。靠谱的开源项目，一般都会有一个文档的，这些文档文件通常会在代码仓库的顶级目录列出。  许可协议: 根据开源软件的定义，每一个开源项目必须是有开源许可协议的. 可以这么认为：假如说某个项目源码开放，但是没有任何的许可协议，那么它就不能叫做开源。  README:  README 是一个介绍性的说明文件，对初次光临社区对人们表示欢迎，它通常会解释项目有何用处，为何发起，以及如何快速入门等。  贡献:  READMES 帮助人们来认识项目，贡献这个文件则是帮助对项目如何做贡献。它解释了目前项目需要什么样类型对贡献者，社区对流程是啥样的。并非所有的项目都会有这个文件，它某种程度上也是展示项目对于贡献者的友好程度。  行为准则: 顾名思义，即是一些参与社区时的一些礼仪、说话方式、行为等，帮助形成一种友好的氛围，不是所有的项目都会撰写行为准则文件，它某种程度上也是展示项目对于贡献者的友好程度。  其它文档: 有些项目也许还有其它文档，例如教程、导游，或者是治理规则，这在大型项目中常见。此外，开源项目还会利用如下一些工具来进行组织讨论，阅读这些归档对于理解社区的想法、是如何工作的有非常大的作用。  问题追踪: 这里是人们讨论项目相关问题的地方。  Pull requests: 审核代码、以及相关的问题讨论。  论坛或邮件列表: 一些项目会实用会话式的主题（例如 “How do I…“ 或 “What do you think about…“ 来替代Bug报告或特性请求）。然而有一些项目关于讨论全部实用问题追踪。  即时在线聊天: 有一些项目会实用聊天频道（诸如 Slack 或 IRC），从而能够随意的谈话、协作和快速交流。Finding a project to contribute to你读到这里，说明已经对于一个开源项目如何运作的有了清晰的认识，是该找一个合适的项目做贡献的时候了！假如你之前从来都没有为开源做过贡献的话，那么请记住来自美国总统约翰 F.肯尼迪的这段话：不要问你的国家能为你做什么，要问你能为国家做什么。开源项目的方方面面都需要贡献者，你先不要通盘考虑该往哪里贡献，或者是它将如何看。相反，从你已经使用到的或者打算用到项目开启贡献之路，在你积极的贡献过程中，项目也会反馈给你，让你更好的定位自己。一旦进入某项目，不论何时，你都要听从自己的直觉，做你认为更好或者不同的事情。开源并不是高级俱乐部；它就是由你这样的人所浇铸和打造。“开源”只是针对这个世界的需要修复的问题的一个梦幻术语罢了。你或许在查看 README的时候，发现了损坏的链接，又或者拼写错误。又或者是你是一名新手，使用的过程中发现了问题，又或者是某问题应该在文档中注明。请不要坐视不理，径直绕开，或者是请求他人修复，伸出你的援助之手，解决这些你能看到的问题。而这正是开源的精髓之所在！  28% 的随意贡献 就是说明了文档的开源，诸如拼写错误，段落语句调整、或者是翻译。你也可以利用如下列出的资源来找到合适的新项目：  GitHub 探索  Open Source Friday  First Timers Only  你的第一个 PR  CodeTriage  24 Pull Requests  Up For Grabs  像忍者一样贡献A checklist before you contribute当你找到了你打算贡献的项目时，在进一步行动之前，作一个快速的扫描工作，以确保项目是否接受贡献的。否则，你煞费苦心的工作可能没有任何的回报。这是一个简易的检查表，用来评估一个项目是否适合新的贡献者。符合开源的定义      有许可协议吗？通常情况下，会在根目录有一个叫做 LICENSE 的文件。  项目被接收的提交活跃度在主干上确认提交的活跃度。在GitHub上托管的开源项目，你可以在仓库主页上看到这些信息。      最后一次提交是在什么时候？        项目目前有多少贡献者？        人们提交的频繁吗？ (在 GitHub，可以在顶栏里点击\"commits\"来展现。）  接下来，就是看项目的 issue 数量。        目前有多少个还处于开放状态的 issue？          项目的维护者对于处于开放状态的issue响应是否迅速？          是否有讨论很活跃的issue？          issue 均是近期产生的吗？          有没有关闭的issue？ (在 GitHub, 点击 \"closed\" 标签就可以看到所有已经关闭的issue。)  同样再来看看 PR的情形。        现下有多少处于开放状态的PR？          当提交了PR后，维护者响应是否迅速？          是否有活跃讨论的 PR？          均是近期的RP吗？          最近有多少PR合并？ (在 GitHub, 点击 RP页面的 \"closed\" 的标签页来查看已经关闭的标签页。)  项目的受欢迎程度一个项目的友好程度和受欢迎意味着更能吸引新的贡献者。        在issue的问题中，维护者的回答是否非常有帮助？          人们在issue的讨论中、在线聊天室、论坛是否很友好？          PR是否被review？          维护者是否对做贡献的人们道声\"谢谢\"？      当你看到一个很长的对话时，来自核心开发者的零星的响应排在列表的后面。你就得考虑，他们在作建设性的总结？是否保持风度的情况下做出最后的决定？如果你看到的是更多的口水仗，而且还在继续，这通常意味着社区的能量重心已经不在开发上了。  — @kfogel, 开源软件生产力  How to submit a contribution你已经找到了你喜爱的项目，也已准备好贡献了，迫不及待、跃跃欲试了。好吧！以下就是带领你如何以正确的姿势作贡献。有效沟通无论你处于什么样的目的：仅仅是一次性的贡献，亦或是永久性的加入社区，都的和他人进行沟通和交往，这是你要在开源圈发展必须修炼的技能。    [作为一名新手,] 我很快的就意识到，我若是要关闭一条issue时，我不得不问更多的问题。我浏览了代码库，一旦我觉得有什么问题的时候，我就得需要更多的指点，瞧！ 在我得到所有的所需要的信息后，我就可以解决这个问题！  — @shubheksha, 一名菜鸟进入开源世界的坎坷之旅  在你开启一个isse或PR之前，或者是在聊天室问问题之前，请牢记下面所列出的几点建议，会让你的工作更加的高效。给出上下文 以便于让其他人能够快速的理解。比方说你运行程序时遇到一个错误，要解释你是如何做的，并描述如何才能再现错误现象。又比方说你是提交一个新的想法，要解释你为什么这么想，对于项目有用处吗（不仅仅是只有你！）  😇 “当我做 Y 的时候 X 不能工作”  😢 “X 出问题! 请修复它。”在进一步行动前，做好准备工作。 不知道没关系，但是要展现你尝试过、努力过。在寻求帮助之前，请确认阅读了项目的 README、文档、问题（开放的和关闭的）、邮件列表，并搜索了网络。当你表现出很强烈的求知欲的时候，人们是非常欣赏这点的，会很乐意的帮助你。  😇 “我不确定 X 是如何实现的，我查阅了相关的帮助文档，然而毫无所获。”  😢 “我该怎么做 X ?”保持请求内容短小而直接。 正如发送一份邮件，每一次的贡献，无论是多么的简单，都是需要他人去查阅的。很多项目都是请求的人多，提供帮助的人少。相信我，保持简洁，你能得到他人帮助的机会会大大的增加。  😇 “我很乐意写 API 的教程。”  😢 ” 有一天我驾驶汽车行驶在高速公路上，在某个加油站加油的时候，突发奇想，我们应该这么做，不过在我进一步解释之前，我先和大家展示一下。。。”让所有的沟通都是在公开场合下进行。 哪怕是很不起眼的小事，也不要去给维护者发私信，除非是你要分享一些敏感信息（诸如安全问题或严重的过失）。你若能够保持谈话是公开的，很多人可以你们交换的意见中学习和受益。  😇 (评论) “@维护者 你好！我们该如何处理这个PR？”  😢 (邮件) “你好，非常抱歉给发信，但是我实在很希望你能看一下我提交的PR。”大胆的提问（但是要谨慎！）。 每个人参与社区，开始的时候都是新手，哪怕是非常有经验的贡献者也一样，在刚进入一个新的项目的时候，也是新手。出于同样的原因,甚至长期维护人员并不总是熟悉一个项目的每一部分。给他们同样的耐心,你也会得到同样的回报。  😇 “感谢查看了这个错误，我按照您的建议做了，这是输出结果。”  😢 “你为什么不修复我的问题？这难道不是你的项目吗？”尊重社区的决定。 你的想法可能会和社区的优先级、愿景等有差异，他们可能对于你的想法提供了反馈和最后的决定的理由，这时你应该去积极的讨论，并寻求妥协的办法，维护者必须慎重的考虑你的想法。但是如果你实在是不能同意社区的做法，你可以坚持自己！保持自己的分支，或者另起炉灶。  😇 “你不能支持我的用例，我蛮失望，但是你的解释仅仅是对一小部分用户起作用，我理解是为什么。感谢你的耐心倾听。”  😢 “你为什么不支持我的用例？这是不可接受的！”以上几点，要铭记在心。 开源是由来自世界各地的人们共同协作实现的。面临的问题是跨语言、跨文化、不同的地理为止、不同的时区，另外，撰写文字的沟通更是难上加难，无法传达语气和情绪。请让这些会话都充满善意吧！在以下情形中请保持礼貌：推动一个想法、请求更多的上下文、进一步澄清你的立场。既然你在互联网找到了自己的所需，那么请尝试让它变得更好！收集上下文在正式开始之前，做一些快速的检查项，以确保你的想法是没有被讨论过的。遍历项目的 README、问题（开放的和关闭的都算）、邮件列表、Stack Overflow。毋需去花好几个小时去全部折腾一遍，但是使用几个关键的词汇来搜索一下是必要的。如果你没有找到和你想法一样的内容，你就可以继续了。如果项目是在 GitHub上的话，你可以通过开启一个issue或PR：  Issues 开启一次对话或讨论  Pull requests 请求接受自己的解决方法  少量的沟通， 诸如澄清或how-to的问题，尝试到 Stack Overflow 、IRC、Slack或其它聊天频道。在你创建issue和PR之前，请检查项目的贡献者文档（文件名通常叫做 CONTRIBUTING，或者就直接包含在README中），找一些你需要的较具体的东西，例如，他们会要求你遵循某个模版，或者是要求你使用某个测试。如果你做的是一个非常实际的贡献，在正式开启之前，先创建一个issue。监视项目是很有帮助的（在GitHub，点击 “Watch”，所有的对话都会通知到你），要让社区的成员们知道你要做的工作，免得你做了之后，再让他们知道，他们不同意，就浪费了。    你能够从单个的项目学习到 很多 ，只要你踊跃的去使用，在GitHub上密切观察项目，并阅读每一个 issue 和 PR。  — @gaearon 参与项目  创建 issue你应该在遇到下列情况下，去创建一个 issue：  报告你自己无法解决的错误  讨论一个高级主题或想法(例如. 社区、远景、政策等)  期望实现某新的特性，或者其它项目的想法在issue的沟通中几点实用的技巧:  如果你刚好看到一个开放的issue，恰是你打算解决的， 添加评论，告诉他人你将负责这个。这样的话，可以避免他人重复劳动。  如果说某个issue已经开放很久了， 这可能是已经有人正在解决中，又或者是早已经解决过了，所以也请添加评论，在打算开启工作之前，最好是确认一下。  如果你创建了一issue，但是没多久自己解决了， 也要添加评论，让其他人知道，然后关闭该issue。记录本身就是为社区的贡献。创建 pull request在下面的情形时，请你务必使用PR：  提交补丁 (例如，纠正拼写错误、损坏的链接、或者是其它较明显的错误）  开始一项别人请求的任务，或者是过去在issue中早就讨论过的一个 PR 并不代表着工作已经完成。它通常是尽早的开启一个PR，是为了其他人可以观看或者给作者反馈意见。只需要在子标题标记为”WIP”（正在进行中）。作者可以在后面添加很多评论。如果说项目是托管在 GitHub上的，以下是我们总结出的提交RP的建议：  Fork 代码仓库 并克隆到本地，在本地的仓库配置”上游”为远端仓库。这样你可以在提交你的PR时保持和”上游”同步，会减少很多解决冲突的时间。(更多关于同步的说明，请参考这里.)  创建一个分支 用于自己编辑。  参考任何相关的issue 或者在你的RP中支持文档(比如. “Closes #37.”)  包含之前和之后的快照 如果你的改动是包含了不同的 HTML/CSS。在你的PR中拖拉相应的图片。  测试你的改动！ 若测试用例存在的话，跑一遍，以覆盖你的更改，若没有的话，则创建相应的用例。无论测试是否存在，一定要确保你的改动不会破坏掉现有的项目。  和项目现有的风格保持一致 尽你最大的努力，这也就是意味着在使用缩进、分号、以及注释很可能和你自己的风格大相径庭，但是为了节省维护者的精力，以及未来他人更好的理解和维护，还请你容忍一下。如果这是你第一次提交PR。可以浏览PR制造的文档，这是 @kentcdodds 专门为初次创建PR的人写的公开的资料。What happens after you submit a contribution很不错，你做到了！恭贺你成为开源贡献者。我们希望这是一个良好的开端。在你提交了贡献之后，下面几种情形中的某种是可能发生的：😭 没有人响应你。希望你确认在开始工作之前检查过了项目的活跃度，不过即使检查过了，也不保证一个活跃的项目，没有人理会你的贡献也是很正常的。如果过去了一周，依旧没有人响应，请心平气和的在后面跟帖，询求他人帮助你审核下。如果你熟悉某个人可以审核你的贡献，你可以使用@+名字，直接提醒他一下。千万不要 私下里去联系他人；一定要记住，开源项目所有的沟通都应该是公开的。如果你做了所有该做的事情，还是没有人理你，那就是真的没有人对你的贡献做出响应。这可能感觉上不太好受，但是千万不要灰心。每个人都会遇到这样的情况。其实有太多种原因没有人响应你的提交了，包括很多个人情形都是不在你控制范围的。再接再厉，换一种方法去提交，或者换一个项目。这年头，很多社区成员都在积极的参与和响应他人，都在抢夺优秀的人才，若没有人搭理你，你换地方是没有任何不对的地方的。🚧 其他人的要求你对自己的提交做出变更。对于自己的提交作出变更这件事非常的普遍，可能是你获得了反馈，也可能是变更了代码。当有人提出变更时，请表现出大度的地方，要及时响应。他们花时间审核了你的提交，要尊重他们。开启了PR，然后一走了之，是一种恶习。如果你不知道如何修改，请花时间深入研究问题的所在，如果还是没有想到好的办法，那么是该向他人求助的时候了。如果你因为没有时间而无法继续在此issue继续工作（举例来说，如果对话已经过去了一个月了，没有任何的回复和进度，环境肯定变得不一样了），那么请向维护者告知你无法在及时的响应了，肯定有人非常乐意接替你的工作的。👎 你的贡献没有获得通过。你的提交最后可能没有被接受。真心希望你没有在此作出过多的努力。如果你不确定为什么没有被接收的话，这正是一个很好的询问维护者反馈和澄清的机会。最终，无论如何，你都要对他们的决定表示尊重。不要去做过多无谓的争论或者是充满敌意的谩骂。如果你坚持自己，你可以随意的fork项目，按照自己的思路发展出分支来。🎉 你的贡献被接收。太棒了！你已经成功的做到了，为开源做贡献也不过如此！You did it!你刚刚完成了自己的开源贡献处女秀，接下来，你可能打算寻找另外的方法来做贡献，希望本文给你提供了灵感和实践。即使是你的贡献没有被采纳或接收，也不要有失风度，请对帮助过你的维护者表示感谢！开源就是由你这样的人所铸造：开启一个issue，在提交PR，评论、讨论、收集反馈，直到被接收。就是这么简单。",
    "url": "/zh-cn/how-to-contribute/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/zh-cn/how-to-contribute/\">\n      如何为开源做贡献\n    </a>\n  </h2>\n  <h2 id=\"why-contribute-to-open-source\">Why contribute to open source?</h2>\n\n\n</div>\n"
  },

  
  "/zh-cn/leadership-and-governance/": {
    "title": "领导力和治理",
    "content": "Understanding governance for your growing project当项目开始有条不紊的进行，人员也开始稳定，那么你就应该开始社区的治理了。对于社区的治理，你或许有一些疑问，诸如如何将常规项目的贡献者纳入你的工作流？如何才能判断应该赋予谁提交的权限？又或者是如何解决社区的债务？如果你对这些有疑问的话，我们这里会尽力帮你解决。What are examples of formal roles used in open source projects?很多项目针对贡献者角色和身份均遵循相似的结构。这些角色实际上意味着什么完全取决于你。我们这里所列举的，相信你是非常熟悉的了：  维护者  贡献者  修订者对于某些项目来说， “维护者” 就是唯一拥有提交权限的人。然而在其它的一些项目中， they’re simply the people who are listed in the README as maintainers.作为一名维护者，不一定非得一定要为项目撰写代码。Ta有可能是项目的布道师，为项目的宣传做了很多的工作，又或者是撰写文档让更多的人参与进来。不管他们每天做什么，维护者就是那些对项目方向负责的人，并致力于项目的改进。作为 “贡献者” 可以是任何人 ，只要Ta提出issue或PR 就叫做贡献者，那些为项目作出有价值的都算（无论是分类问题，编写代码还是组织会议），又或者是将他们的PR合并进主干的（或许这个定义是最接近所谓的贡献者的）。    [对于 Node.js 来说] 无论是在issue中提交评论，还是提交代码，任何人都是项目社区的成员。只要能够看到他们，就意味着他们已经实现了跨越，从路人成为一个用户，成为一个贡献者。  — @mikeal, “开源的健康衡量”  术语 “修订者” 可能用于区分其他形式的贡献的提交访问，这是一种特定类型的责任。其实你可以根据自己喜欢的方式来定义项目的角色，考虑使用更广泛的定义 来鼓励更多的形式的贡献。无论技术技能如何，您都可以使用领导角色来正式识别为您的项目做出突出贡献的人员。    你们或许知道我是 Django 的”创始人”…其实真相是在有人雇佣了我之后一年才真正的做出来。(…) 人们猜测我的成功是因为我的编程技能够牛…但事实上我的编程水平只是一般般而已。  — @jacobian, “PyCon 2015 Keynote” (视频)  How do I formalize these leadership roles?将领导力角色正规化，可以帮助人们找到归属感，且可以让其它社区成员明白应该找谁能够获得帮助。对于一个较小的项目来讲，指定领导者，只需要在 README 或 CONTRIBUTORS 文本文件中写上他们的名字即可。对于稍大型点的项目，如果你已经拥有了网页的话，那么请创建一个团队的页面，或者创建一个团队领导的页面。举例来说， PostgreSQL 就拥有一个很全面地团队页面 ，而且每位贡献者都拥有简短的介绍。如果你的项目拥有非常活跃的贡献者社区，你或许会专门建立一个维护者的”核心团队”，甚至是根据不同的话题所有者成立子的委员会（例如，安全，问题筛选，或者是社区准则）。让人们自行组织、且能够让志愿者自行找到自己喜欢的角色，而不是去分配他们。  [我们] 为核心团队设立多个”子团队”。每个子团队都会专门的聚焦于某个特定的领域，举例来说，语言设计或程序库(…) 为了确保全局的协调和健壮，会将整体的项目设置为同一个愿景，每个子团队是由核心团队的一员。  — “Rust 治理 RFC”  领导者团队或许要创建一个指定的频道（如IRC），又或者是参与项目的日常讨论（如Gitter或Google Hangout）。你需要将这些会议可以公开访问，以便让人们方便倾听。举例来说， Cucumber-ruby就会每周开一次会议，每次持续几小时.一旦你建立了领导力角色，一定不要忘记撰写文档，告诉人们如何成为领导者！要为如何成为一名维护者或加入到项目的子委员会创建一个清晰的流程，并将之写入 GOVERNANCE.md 文件。诸如Vossibility 这样的工具，可以帮助你追踪谁是（或不是）项目的贡献者。为这些信息作说明，以避免社区出现维护者作出私自的决定。另外，如果你的项目在托管在GitHub上，考虑将你的项目从个人账户迁移到某个组织，而且要为组织增加额外的一个备份的管理员。GitHub 上的组织 能够让权限管理和多仓库管理更加的轻松，而且可通过 共享所有权来保护你的项目。When should I give someone commit access?有的人认为项目应该对所有人都开放提交访问，从而让任何人都可以做出贡献。理由是这样做的话，会让人们感到拥有这个项目，进而达到鼓励的目的。换句话说，尤其是针对那些大型的、更加复杂的项目，你或许只是会给那些证明自己有能力提交代码的人赋予权限。这个没有一个确切的衡量标准，做你认为正确的就好了，或者是最让项目成员感到舒服的方式。假如项目是托管在GitHub上，可以使用受保护的分支来管理那些可以提交特定的分支情况。    无论什么时候，都会有人向你发送pull request，所以将你的项目开放提交访问。这看起来是有些不够明智，使用此策略能让你释放GitHub的真正威力。(…)一旦人们拥有了提交访问权,他们不再担心他们的补丁可能不会被合并…..这会让他们做的更多。  — @felixge, “The Pull Request Hack”  What are some of the common governance structures for open source projects?关于开源项目有三类通用的相关治理结构。      BDFL: BDFL 是 “仁慈的独裁者生活” 的缩写. 在此结构下，有一个人（通常是项目的最初的作者）拥有项目中所有的最后决定权。Python 就是一个非常经典的例子。较小的项目可能默认就是 BDFL 结构，因为他一般就是一到两位维护者。若是公司组织的项目也极有可能会采用BDFL结构。        精英制: (注: 术语 “精英制” 对于一些社群可能具有消极的含义，其拥有较复杂的社会和政治的历史.) 在精英制下，活跃的项目贡献者（他们用行动证明自己是”精英”）给一个正式的决策作用，决定通常会基于纯粹的投票一致性。精英制的概念首次由Apache Foundation提出；所有的Apache 项目 都是基于精英制的。贡献者只能代表自己是独立的个体，不可以是公司。        自由贡献: 在自由贡献的模式下，做最多工作的人通常被认为是最具影响力的，但是是基于当前的工作，而不是历史的共享。项目的重大决策是基于寻求共识的过程（对不同的声音要讨论）而不是纯粹的投票，尽可能的努力的去囊括多的社区观点。较流行的使用自由贡献模式的项目有Node.js 和 Rust。  应该选择哪一种模式了呢？由你自己来做决定！每个模式都有优点，也有缺点。虽然上面的描述乍一看，这三种模式有着很大的不同，其实不然，它们还是有着共同点的。如果你对上述三种模式有兴趣，可以采用下面的模版：  BDFL 模式模版  精英模式模版  Node.js 的自由贡献规则Do I need governance docs when I launch my project?其实没有什么合适的时间来撰写项目的治理，但是可以根据社区的动态来进行恰当的定义。开源治理最好的也是最难的部分是有社区本身来塑造！在项目的治理中，一些早期的文档将会不可避免的，然而也不必太强求，写下你所能够想到的。举例来说，你可以将某些预期的行为定义清楚，贡献的流程是如何的，或者项目是如何启动的，等等。如果你自己是公司所启动开源的一部分，在启动之前，应该做一些讨论，如公司将会如何维护项目，随着项目的发展，决策该如何定夺。你可以会公开的解释一下，贵公司将如何参与（或不参与）该项目。    我们在GitHub上赋予一些小的团队来管理项目，实际上这些人都是在Facebook工作的，比如，React就是由React的工程师来掌管运行的。  — @caabernathy, “Facebook内部员工如何看待开源”  What happens if corporate employees start submitting contributions?成功的开源项目，会有很多的用户和公司使用，而且有一些公司的主要收入和项目是绑在一起的。举例来说，某公司在其商业产品或服务中使用了开源项目的代码作为其一个组件。一个项目越是被广泛的使用，有相关背景的专业人士的需求就会上升，你或许就是其中之一，那么就顺势成为继续为开源项目做事，还有一定的报酬。将商业的活动视为正常不过的事情很重要，它也只是代码的开发方法之一。为开发者付费不应该被特殊的对待，好像代码必须是无偿开发的才行；每个贡献都必须有技术的衡量标准来进行评估。人们应该在这些商业的活动中感到非常的自在，而且针对特定的增强或功能项讨论时也应是坦荡的、自然的。“商业” 是完全和”开源”相容的。”商业”仅仅是意味着某些地方有钱的参与 —— 就是说软件被用于了商业行为，也就是说项目被采用获得了认可。（当开源软件被用于非开源产品的一个部分时，这个整体的产品仍然是”专有的”软件，因为开源，它可以用于商业或非商业的目的。）和这个世界上很多的其它商业产品一样，商业能够激励开发者去积极的贡献于项目，通过他们靠谱的提交贡献。显而易见的是，一位因花了自己的时间和精力的开发者获得报酬，理应比没有获得报酬的更具持久性，当然，这对于某些圣徒是不成立的，或者这么说吧，报酬是能体现一个贡献度的众多衡量因素的其中之一。所以将你的项目讨论聚焦于贡献上，不要让人们分散精力去思考或做其它的事情。Do I need a legal entity to support my project?除非你特别的有钱，其实你根本没有必要为开源项目而专门搞一个法律实体来支持。举例来说，假如你打算创办自己的商业公司，（假如是在美国的话）你需要成立一家集团公司或有限责任公司。如果你只是为你的开源项目做一些合约的工作，你可以以投资人的身份接受钱财，或者成立一家有限责任公司（如果是在美国的话）。如果你打算让自己的开源项目接受捐赠的话，你可以创建一个捐赠按钮（使用PayPal或Stripe，举例来说），但是你要知道，这些钱并非是免税的，除非你是认证过的非盈利性组织（在美国的话，诸如501c3）。很多项目都不愿意成立非盈利组织那么麻烦，所以他们会以赞助商的身份寻找一个非营利性组织。财政资助代表你接受捐款,通常以换取一定比例的捐赠。针对开源项目接受财政资助的非营利性组织有很多，如Software Freedom Conservancy, Apache 基金会, Eclipse 基金会, Linux 基金会 and Open Collective 等等。    我们的目标是提供基础设施，让社区能够自我持续发展下去，每个人——贡献者、支持者、赞助商———所共同营造的环境，也让每个人得到实实在在的利益。  — @piamancini, “超越 charity 框架”  如果你的项目是和某特定的语言或生态系统紧密相连的，那么你可以直接在相关的软件基金会下工作。例如，Python 软件基金会 就帮衬着项目 PyPI，这是一块优秀的Python包管理器，又比如Node.js 基金会 支撑着 Express.js，一款基于Node的框架。",
    "url": "/zh-cn/leadership-and-governance/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/zh-cn/leadership-and-governance/\">\n      领导力和治理\n    </a>\n  </h2>\n  <h2 id=\"understanding-governance-for-your-growing-project\">Understanding governance for your growing project</h2>\n\n\n</div>\n"
  },

  
  "/zh-cn/legal/": {
    "title": "开源的法律保护",
    "content": "Understanding the legal implications of open source向世界分享你们具有创造性的工作，这是一个多么令人激动和有价值的经历。这也意味着你们必须担心一堆你们不清楚的法律问题。幸运的是，你们不必从头开始。我们已经涵盖了你们的法律需求。（在你们行动前，请确定阅读了我们的免责声明。）Why do people care so much about the legal side of open source?很高兴你们提问！当你们行创造性工作（例如写作，图形或代码）时，默认情况下该作品属于专有版权（copyright）。也就是说，法律承认你们是你们作品的作者，他人在没有经得你们同意的情况下不能使用你们的工作。一般来说，这意味着没有人可以在没有你们授权的情况下使用，复制，分发或者修改你们的工作。然而，开源有着不一样的情况。因为作者希望他人使用，修改以及分享他们的工作。但因为法律默认依然是专有版权（copyright），所以你们需要一个明确说明这些权限的协议。如果你们不应用开源许可协议，那么对你们项目做出贡献的人也都将成为其工作的专属版权（copyright）所有者。这意味着没有人（也包括你们）可以使用，复制，分发后者修改他们的贡献，最后，你们的项目可能具有你们不知道的许可证要求的依赖关系。你们的项目社区，或者你们的雇主政策也可能要求你们使用特定的开源许可协议。Are public GitHub projects open source?当你们在GitHub上创建一个新项目 时，你们可以选择将仓库设置成private或者public。Making your GitHub project public is not the same as licensing your project. Public projects are covered by GitHub’s Terms of Service, which allows others to view and fork your project, but your work otherwise comes with no permissions.让你们的GitHub项目公开与许可你们的项目是不同的。公开项目是由GitHub的服务条款保护，它允许他人浏览以及fork你们的项目，但是没有权限参与你们的工作。如果你们想让他人使用，复制，修改你们的项目，或者参与贡献你们的项目，那么你们的项目就需要包含一个开源许可协议。例如，即使你们的项目是公开的，但没有你们的授权，一些人是不能合法在他们的代码中使用你们GitHub项目中的任何部分。Just give me the TL;DR on what I need to protect my project.你们很幸运，开源许可协议已经标准化了同时使用简单。你们可以直接复制粘贴一个已经存在的许可协议到你们的项目里。MIT，Apache 2.0和GPLv3都是非常流行的开源许可协议，但是也有其它选择。你们可以在choosealicense.com上找到这些许可协议的全部文本，同时说明了如何使用他们。当你们在GitHub上创建了一个新项目，你们会被要求添加一个许可协议。    一个标准化的许可协议可以作为没有法律培训的人员的代理，以准确地知道他们可以和不能用软件做什么。除非绝对要求，否则应避免使用定制，修改或非标准术语，这将成为他人使用代码的障碍。  — @benbalter, “Everything a government attorney needs to know about open source software licensing”  Which open source license is appropriate for my project?如果你们是小白，那么使用MIT License，不容易出错。它很短，很容易理解，并允许任何人做任何事情，只要他们保留许可证的副本，包括你们的版权声明。如果你们需要，您们能够根据不同的许可协议发布项目。然而，为项目选择合适的开源许可协议这取决于你们。你们的项目非常可能有（或将有）依赖。例如，如果你们开源了一个Node.js的项目，你们将可能使用来自npm（Node Package Manager）的库。你们依赖的这些库都有它们自己的开源许可协议。如果他们的许可协议”允许”（对使用，修改和分享给予公共权限，而对有关项目的许可协议没有要求），这样你们就可以使用任何你们想要的许可协议。共同允许许可协议包括MIT，Apache 2.0，ISC和BSD。另一方面，如果你们的依赖中有一个的许可协议是”强硬的copyleft”（他们也给同样的允许，但条件是有关项目得使用同样的许可协议），那么你们的项目将使用与之相同的许可协议。copyleft许可协议包括GPLv2，GPLv3和AGPLv3。你们也会想到考虑希望你们的社区使用以及贡献你们的项目：  你们是否想让你们的项目成为其它项目的依赖？在你们的相关社区最好尽可能使用最流行的许可协议。例如，MIT是npm libraries使用的最流行的许可协议。  你们的项目是否想吸引大企业？大型企业可能需要所有贡献者的明确专利许可。在这种情况下，Apache 2.0适合你们。  你们的项目是否想吸引不愿自己的贡献用于其它同类型软件的贡献者？GPLv3和AGPLv3适合你们。你们的公司可能为自己的项目准备了特定的许可协议。例如，它可能需要许可许可证，以便公司可以在公司的闭源产品中使用你们的项目。或者你们的公司要求强大的copyleft许可协议同时要求贡献者赞成，这样项目只属于你们公司，没有人能在有关的软件中使用你们的项目。或者你们的公司可能有与标准，社会责任或透明度相关的某些需求，其中任何一个都可能需要特定的许可策略。与你们公司的法律部门谈谈。当你们在GitHub上创建了一个新项目，它给你们提供了选择许可协议的机会。包括上面提到的可以使你们的GitHub项目开源的许可协议。如果你们想要了解其他选择，可以通过查阅choosealicense.com找到适合你们项目（即使它不是软件）的许可协议。What if I want to change the license of my project?大多数项目绝不需要更换许可协议。但是情况偶尔有变。例如，随着你们项目的壮大，它添加了新的依赖或用户，或者你们的公司改变了策略，或者其他的要求要更换不同的许可协议。如果你们在开始项目的时候没有添加许可协议，那么再添加一个许可协议和更换许可协议是一样的效果。当你们要添加或者更换项目的许可协议时，需要考虑以下三件事：这件事很复杂。确定许可协议的兼容性和合规行，以及谁拥有版权，这会非常快速地变得复杂和混乱。为新的发布和贡献选择一个新的且合适的许可协议与重新许可已存在的贡献是不同的。一旦你们有任何想改变许可协议的想法，请首先让法律团队知道。即使你们已经或者能获得可以更换许可协议的权限，请考虑者会给项目的其他用户和贡献者带来怎样的影响。将更换许可协议视为”管理事件”，只有通过与项目的利益相关者进行明确的沟通和咨询，才更有可能顺利进行。请谨记，从一开始就为你们的选择和使用合适的许可协议。你们的项目已经有了许可协议。如果项目的现有许可证与您要更改的许可证兼容，则可以开始使用新许可证。这是因为如果A许可协议与B许可协议兼容，你们将遵守A的条款，同时遵守B的条款（但不一定反之亦然）。因此，如果你们目前正在使用许可型的许可协议（例如MIT），则可以更改为具有更多条件的许可协议，只要你们保留MIT许可协议的副本和任何相关的版权声明（即继续遵守MIT许可协议的最低条件）。如果你们现在的许可协议不是许可型的（例如，copyleft或者你们还没有许可协议）以及你们不是版权的唯一所有者，那么你们不能将许可协议改为MIT。基本上，只要是使用的许可型的许可协议，版权所有者能事先更换许可协议。你们的项目已经有版权所有者。如果你们是你们项目的唯一贡献者，然后你们或者你们的公司是项目版权的唯一所有者。你们可以添加或更换任何你们或者你们公司心仪的许可协议。不然你们需要取得其他版权所有者的同意。他们是谁？他们是已经参与你们项目提交的人。但有些情况是项目版权掌握在这些人的雇主手中。在某些情况下，人们只是做了_微小的_贡献，但没有硬性规定，在一些行代码下的贡献不受版权保护。对与这样的情况该怎么办？对于一个相对较小以及年轻的项目来说，取得所有贡献者对更换许可协议的同意是可行的。。但对于大项目和老项目来说，你们必须寻求很多贡献者以及他们继承者的共识。Mozilla花费了多年重新授权Firefox，Thunderbird和相关软件。或者，你们可以让贡献者事先同意（通过额外的贡献者协议 - 见下文）在某些条件下更改某些许可协议，这些更改将超过现有的开源许可协议。这会改变许可协议改的复杂性。如果在执行许可协议更改时，你们仍然想要和项目利益相关者进行沟通，你们需要从你们律师那得到更多帮助。Does my project need an additional contributor agreement?可能不要。对于大多数的开源项目，一个开源许可协议可作用与所有贡献者和用户。贡献者协议会给维护者带来额外的管理工作。这些协议增加了多少工作得取决去项目和实施。简单的协议可能要求贡献者确认和点击，在项目的开源许可协议下他们有权利贡献。更复杂的协议可能需要法律的审查和贡献者的雇主的签字。此外，贡献者协议有时被认为对项目社区不友好。他们也增加了人们参与社区的障碍。      我们已经删除了Node.js的CLA。这样做降低了Node.js贡献者的参与门槛，从而吸引更多的贡献者。  — @bcantrill, “Broadening Node.js Contributions”  一些情况下你们可能想要为你们的项目考虑一个额外的贡献协议：  你们的律师想要所有的贡献者明确接受贡献者条款，或者因为他们觉得只有开源许可协议还远远不够。如果这是唯一的问题，那么有肯定项目开源许可协议的贡献者协议就足够了。jQuery个人贡献者许可协议就是一个很好的轻量级的个人贡献者协议。对于一些项目来说，Developer Certificate of Origin是一个很好的先择。  你们的项目使用的开放源许可协议不包括明确的专利授权（如MIT），你们需要所有贡献者的专利授权，这些可能适合用于你们公司的专利组合或者项目的其他贡献者和用户。Apache 个人贡献者许可协议是一种常用的附加贡献者协议，其具有与Apache许可2.0中的专利许可相同的专利许可。  如果你们的项目使用的是copyleft许可协议，但你们也需要分发项目的专有版本。那你们需要每个贡献者分配版权给你们或者授予你们许可权。MongoDB贡献者协议就是这中类型的。  你们认为你们的项目在其有效期内需要更换许可协议，以及事先得到贡献者的同意。如果您们实需要在您的项目中使用额外的贡献者协议，请考虑使用诸如CLA助手之类的集成，以最大限度地减少贡献者的分心。What does my company’s legal team need to know?作为一名公司的雇员，如果你们在发布一个开源项目，你们首先需要让法律团队知道。即使只是一个个人项目，请考虑让他们知道。你们可能和公司有一个”员工知识产权协议”，这给了公司一些对你们项目的控制权，特别是当项目和公司的业务有着很多的联系或者你们使用公司的资源发展项目。你们的公司_应该_很容易给们许可，也许已经通过一个员工友好的知识产权协议或公司政策。如果不是这样，你么可以谈判（例如，解释你们的项目为公司的专业学习和发展目标服务），或者你们在找到一个更好的公司前停止你们项目的工作。如果你们的开源项目是为了你们的公司，者绝对需要让他们知道。根据公司的业务需求和专业知识，你们的法律团队可能已经制定了有关开放源代码许可协议（以及可能还有其他贡献者协议）的政策，以确保您的项目符合其依赖关系的许可协议。如果不是这样，你们和他们很幸运！你们的法律团队应该渴望与你们合作，把这个东西搞清楚。你们需要思考这些事：      第三方资源：你们的项目有其他人创建的依赖或者使用他人的代码？如果这些事开源项目，你们需要遵守第三方资源的开源许可协议。首先，选择与第三方资源的开放源许可协议一起使用的许可协议（见上文）。如果你们的项目修改或者发布第三方开源资源，那么你们法律团队还想知道你们符合第三方开源许可协议的其他条件，例如保留版权声明。如果你们使用了其他没有开源许可协议的代码，那么你们可能会要求第三方资源的维护者添加一个开源许可协议，要是你们得不到许可，你们只能停止使用他们的代码。        商业机密：请考虑项目中是否有公司不想对外公开的东西。如果是这样的话，你们只能开源项目的一部分，得保护好公司的商业机密。        专利：你们公司是否申请了与你们项目有关的专利？如果开源源代码，这会对公司的专利进行公开披露。可悲的是，你们可能被要求等待（或者公司会重新思考应用程序）。如果你们期望从拥有大量专利组合的公司的员工那里得到贡献，们的法律团队可能希望你们使用来自贡献者的明确专利授权的许可协议（例如Apache 2.0或GPLv3）或其他贡献者协议（见上文）。        商标：认真检查你们的项目名没有与已经存在的商标冲突。如果你们将自己公司的商标用于项目，请检查它有没有造成冲突。FOSSmarks是在自由和开源项目的背景下理解商标的实用指南。        隐私：你们的项目是否收集了用户数据并存储到公司的服务器？你们的法律团队可以帮助你们遵守公司政策和外部法规。  如果你们发布了公司的第一开源项目，为了能通过，以上这些绰绰有余（不要担心，大多数项目不会引起重大关注）。长期来说，们的法律团队可以做更多的事情，以帮助公司从开源中获得更多，并保持安全：  员工贡献策略：考虑制定一个公司策略，指明你们的员工如何为开源项目贡献。明确的政策将减少你们员工的迷惑，并帮助他们为公司的最佳利益向开源项目做贡献，无论是作为他们工作的一部分还是在自由时间。Rackspace的Model IP和开源贡献策略就是很好的示例。    放弃与补丁相关的只是产权以构建员工知识库和信誉。它表明，公司关心员工的发展，以及让员工有种被赋权和自主的感觉。所有这些好处还导致更高的士气和更好地保留员工。  — @vanl, “A Model IP and Open Source Contribution Policy”    发布什么：（几乎） 所有？如果你们的法律团队了解并投资于你们公司的开源策略，他们将是你们最好的帮助，而不是阻碍你们的努力。  合规性：即使你们公司没有发布任何开源项目，他们也会使用别人的开源软件。意识和过程可以避免麻烦，产品延迟发布和诉讼。  组织必须具有适合[“允许”和”copyleft”]类别的许可协议和合规性策略。首先，记录适用于你们所使用的开源软件的许可条款（包括子组件和依赖项）。  — Heather Meeker, “Open Source Software: Compliance Basics And Best Practices”        专利：你们的公司可能希望加入开放发明网络，一个共享的专利防御池，以保护成员使用主要开源项目，或探索其他替代专利许可。        管理：特别是当如果将项目转移到公司以外的法律实体是有意义的。  ",
    "url": "/zh-cn/legal/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/zh-cn/legal/\">\n      开源的法律保护\n    </a>\n  </h2>\n  <h2 id=\"understanding-the-legal-implications-of-open-source\">Understanding the legal implications of open source</h2>\n\n\n</div>\n"
  },

  
  "/zh-cn/metrics/": {
    "title": "开源衡量标准",
    "content": "Why measure anything?数据，只有在充满智慧的运用它，才能发挥出其应有的功效。这不，作为一名开源项目的维护者，以可以利用数据来助自己一臂之力。当获取到很多的信息之后，就可以做很多事，比如：  理解用户对一个新功能是怎么反应的  搞清楚新用户是从哪里来的  鉴别，并且决定是否支持一个跑偏的使用场景或者功能  量化你项目的流行程度  知道你的项目是怎样被别人使用的  通过赞助商或者赞赏挣点小钱举个例子，Homebrew 就利用谷歌数据分析，来帮助他们对工作进行了优先级的区分：  Homebrew 是免费的，完全由志愿者在业余时间维护。所以，我们没有资源去做详细的Hemobrew用户调查从而决定如何更好的设计未来的新功能以及对当前的工作分出优先级。匿名的聚合用户数据分析让我们基于用户如何，何地，何时使用Homebrew来优先考虑某些补丁和功能。流行程度并不能代表一切。每个人都是因为不同的原因参与到开源项目中来，如果你做项目维护者的原因是展示你的工作成果，公开你的代码，或者只是为了好玩，那么度量标准可能对你来说就不是那么的重要。如果你想对自己的项目有一个深层次的了解，那么请继续阅读下文介绍的分析项目活跃度的方法。Discovery在有人能够使用或者回馈你的项目之前，他们得知道是否有这样的项目存在，问问你自己：人们都在寻找这样项目吗？如果你的项目是托管在Github, 你可以访问 获取诸如多少人访问过你的项目，他们从哪里得知的之类的信息。在你的项目主页，点击”Graphs”, 然后”Traffic”。在这个页面，你可以看到:      总浏览量: 项目被查看了多少次        总独立访问者: 多少人查看了你项目        关联网站: 访问者从哪里来的。这个数据能帮助你搞清楚哪里可以接触到你的受众和你为推广做出的努力是不是有效的。        受欢迎的内容: 访问者都查看了你项目的那些内容，按照页面访问量和独立访客数。  GitHub stars 可以提供一个基本的衡量流行度的标准。然而GitHub 点赞数并不和下载量、使用量直接挂钩，但是他可以告诉你有多少人在关注你的项目。你也许想要在特定的地方跟踪可发现的内容: 举个例子，Google PageRank，会跟踪来自你项目网站的流量，或者跟踪来自其他开源项目或者网站的流量。Usage人们在这个广袤而且疯狂的我们称之为互联网的地方，竟然找你了你的项目。理想情况下，当他们看到你的项目的时候，他们会情不自禁的做点什么。第二个问题你要问自己的是：人们在使用你的项目吗？如果你使用一个包管理器，比如说npm或者RubyGems.org，来发布你的项目，你就可以跟踪到下载量。每个包管理工具可能会对下载量有着大同小异的定义，而且下载量并不直接和安装、使用有关，但是它提供了一个基本的比较标准。尝试使用Libraries.io 来跟踪很多流行包管理工具的使用数据。如果你的项目是托管在Github上，再一次切换到”Traffic” 页面，你可以用clone graph看看你的项目在一个给定的日期被克隆了多少次，按照独立克隆者的总克隆数排序。如果使用项目的数量低于发现项目的数量的话，那么就有两个问题值得考虑。他们是：  你的项目没有成功的转化你的受众，或者  你吸引了错误的受众举个例子，如果你的项目占据了Hacker News的头版头条，你可能会看到一个流量的高峰，但是与此同时，转化率会比较低，因为Hacker News上所有人都看见了你的项目。如果你的Ruby项目是在Ruby研讨会上宣传的，那么，更有可能从目标受众群体中获得较高的转化率。努力找出你的受众是从哪里来的，然后在你的项目主页寻求他们的反馈，看看是上述两种情况的哪一种。一旦知道了都是有那些人在使用你的项目的话，接下来就是看看他们会做些什么，他们是否基于源代码开始构建？为项目增加新的特性？他们将项目用于科研？还是业务？Retention人们找到了你的项目，而且已经在使用了。那么接下来你要问自己的问题就是：人们有对这个项目做贡献吗?不管什么时候考虑贡献者这个问题都不能算早。没有大众的参与，你就可能会把自己置于一个尴尬的境地，那就是你的项目虽然很 流行（很多人用）但是并不被 支持（维护者没有足够的时间来满足用户的需求）。保持项目的进展需要贡献者的流动（意思是有进有出）因为之前很活跃的贡献者也可能会去干别的事情。可能会经常用的衡量社区的指标包括：  贡献者的总数和每个贡献者的提交次数： 有多少贡献者，哪些是活跃的，哪些是不活跃。github上，你可以在”Graphs” -&gt; “Contributors”面板查看这些信息。目前，这个图标只计算了那些往仓库默认分支推送的贡献者。      第一次，偶尔为之的，和持续的贡献者： 帮助检测是否有新的贡献者，以及他们是不是会再来。（偶尔的贡献者是那些提交的次数很少的人，当然啦，这个数目是多少取决于你，比如说五次。）如果没有新的贡献者，你的项目就会停滞不前。        打开的issue的数目和PR的数目： 如果这些数目太高，就意味着你可能需要有人帮你给issue分类以及做代码审查。        所有的打开过的issue和PR： 一个issue被人提出说明你的项目对他来说比较重要。如果这个数目随着时间在增长，这就意味着人们对你的项目感兴趣。        不同种类的贡献者： 比如说，提交代码，修复笔误或者bug，或者在issue下面评论。    开源远远不止代码，成功的开源项目包括代码、文档，以及它们在演进过程中的所有讨论。  — @arfon, “开源的形态”Maintainer activity最后，你还需要确定一件事，那就是维护者有足够的能力和时间处理社区的贡献。最后一个问题你要问自己的是：我是不是对社区有足够的时间和精力来响应？没有责任心的维护者绝对是开源项目的灾难。想象一下就知道，假如一位贡献者提交了代码或其他贡献，但从来没有得到过维护者的回应，Ta 100% 会感到灰心，并最终选择离开。来自Mozilla的研究 说： 维护者的响应是鼓励更多贡献者中非常重要的一环。考虑记录一下你或者其他的项目维护者对一次贡献（issue或者PR）响应的时间，响应并不需要花多少精力。哪怕只是说一句：”谢谢你的贡献，我下周会查看的。”你也可以测量一在一个贡献被处理的过程中状态变化的时间。比如：  一个issue保持打开状态的时间（也就代表一个问题保持没有被解决状态的时间）。  一个issue是否因为一个PR得到了解决。  陈旧的iuuse是否被关闭了（被解决的问题应该关闭）。  合并一个PR的时间。Use 📊 to learn about people理解一些细节能够帮助你建设活跃的、成长的开源项目。哪怕是你无法追踪每一个细节，通过使用上述的框架，将能够让你集中精力到该用力的地方，进而助项目成功！",
    "url": "/zh-cn/metrics/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/zh-cn/metrics/\">\n      开源衡量标准\n    </a>\n  </h2>\n  <h2 id=\"why-measure-anything\">Why measure anything?</h2>\n\n\n</div>\n"
  },

  
  "/zh-cn/starting-a-project/": {
    "title": "开启一个开源项目",
    "content": "The “what” and “why” of open source所以你在考虑开始参与开源？恭喜！世界赞赏你的贡献。让我们来谈谈开源是什么，以及人们这样做。“开源”是什么意思？当一个项目被开源，这意味着任何人都可以出于任何目的查看，使用，修改和分发你的项目。 这些权限通过开源许可强制实施。开源是强大的，因为它降低了事物被采纳的障碍，允许想法迅速传播。要了解它的工作原理，想象你的朋友组织了一场聚餐，而你带去了一个樱桃派。  每个人都尝了那个派（使用)  派的味道棒极了！大家请你分享它的配方（view）  一个叫 Alex 的朋友是个糕点师，他建议少放点糖（modify）  一个叫 Lisa 的朋友想要用它作为下周的晚餐（distribute）相比之下，一个闭源过程就像去一家餐厅订购一个樱桃派。你必须为了吃饼支付费用，餐厅恐怕不会给你他们的食谱。如果你准确地复制了他们的馅饼，并以你自己的名义出售，餐厅可以对你采取措施。人们为什么把他们的作品开源？  我从开源使用和协作中获得的最有价值的经验之一，就是在我面临许多与其他开发人员相同问题的过程中所建立的联系。      — @kentcdodds, “参与开源对我来说太棒了”  个人或组织为何想要开源一个项目，有各种各样的的原因，例如：      协作： 开源项目可以接受世界各地人们的修改。 例如 Exercism 就是一个拥有350多个贡献者的练习平台。        采用和重组： 任何人几乎可以出于任何目的使用开源项目。人们甚至可以使用它来构建其他东西。例如，WordPress 就是派生自一个名为 b2 的现有项目。        透明度： 任何人都可以检查开源项目是否有错误或不一致。 透明度对保加利亚 或美国等政府，银行或医疗保健等受监管行业以及 Let’s Encrypt 等安全软件都很重要。  开源并不仅仅限于软件。您可以开源任何事物，从数据集到书本。查看 GitHub Explore 开找找有什么是你可以开源的。开源是指”免费”吗？开源最大的吸引之一是它不花钱。 但是，”免费”只是开源的总体价值的一个副产品。因为开源许可证要求任何人可以几乎出于任何目使用，修改和共享您的项目，项目本身往往是免费的。 如果该项目花钱使用，任何人也都可以合法地复制和使用免费版本。因此，大多数开源项目是免费的，但”免费”不是开源定义的一部分。 有些方法可以通过双重许可或有限功能间接地为开源项目收费，同时仍然遵守开源的官方定义。Should I launch my own open source project?简单来说，答案是肯定的，因为无论结果如何，启动您自己的项目来了解开源的工作原理是一个好方法。如果你从来没有创建过一个项目，你可能会担心人们会说什么，或者是否有人会注意到。 如果这听起来像你现在的状态，别担心，你并不孤独！开源工作就像任何其他充满创意的活动，无论是写作还是绘画。 向世界分享你的作品会让你提心吊胆，但唯有练习能够让你的感觉变好的方法 - 即使你没有观众。如果你还不确信，请花一点时间思考你的目标可能是什么。设置你的目标目标可以帮助你弄清该做什么，不应该说什么，以及你在哪方面需要其他人的帮助。 首先问自己，我是为什么开源这个项目？这个问题没有标准答案。 对于一个项目你可以有多个目标，或者具有不同目标的不同项目。如果你唯一的目标是炫耀你的工作，你甚至可能不需要他人的贡献，甚至在你的 README 中说明这点。但另一方面，如果你需要贡献者，你会投入时间来使文档清晰，好让新的参与者感到欢迎。  在某些时候，我创建了一个自己正在使用的自定义 UIAlertView，我决定将它开源。所以我修改它使其更有活力，并把它上传到了 GitHub。我还写了我的第一个文档，解释给其他开发人员如何在他们的项目中使用它。很可能没有人会去使用它，因为它是一个简单的项目，但我的贡献让我感觉很好。  — @mavris, “自学的软件开发者：为什么开源对我们那么重要”  随着你的项目增长，你的社区可能不仅需要你的代码。回应问题，审查代码和传播你的项目都会成为开源项目中的重要任务。而你在非编码的任务上花费的时间将取决于项目的大小和范围，你应该准备好作为维护者来自己解决或找人帮助你。如果你是公司开源项目的一部分， 确保你的项目有它需要茁壮成长的内部资源。 你需要确定谁在启动后负责维护项目，以及如何与你的社区共享这些任务。如果你需要专门的预算或人员来促进，操作和维护项目，请尽早提出。  当你开始开源一个项目时，确保您的管理流程考虑到您项目周围社区的贡献和能力很重要。不要害怕让那些没有在你的企业中受雇的贡献者参与项目的关键部分 - 尤其如果他们是频繁的贡献者的话。  — @captainsafia, “所以你想开源一个项目，是吗？”  加入其他项目如果你的目标是学习如何与他人合作或了解开源的工作方式，请考虑为现有项目做出贡献。从你已经使用并喜欢的项目开始。像修复拼写错误或更新文档简单的事也能为项目做出贡献。如果你不知道如何开始作为贡献者，请查看我们的如何贡献开源指南。Launching your own open source project即使你没有很好的时间来开源你的工作。你也可以开源一个想法，正在进行中的工作，或是关闭了多年的源码。一般来说，如果你乐意于他人对你工作的查看和反馈，你就应该开源你的项目。无论您决定开展项目的哪个阶段，每个项目都应包括以下文档：  Open source license  README  Contributing guidelines  Code of conduct作为维护者，这些组件将帮助你交流你的期望，管理贡献并保护每个人的合法权益（也包括您自己的）。他们能够大大增加你积极体验的机会。如果您的项目在 GitHub 上，则将这些文件放在您的根目录中，并使用推荐的文件名将有助于 GitHub 识别并自动将其显示给读者。选择一个许可证 (license)开源许可证保证其他人可以使用，复制，修改和贡献给您的项目，而不会产生不良后果。 它也可以保护您免受繁琐的法律影响。启动开源项目时，请务必包含许可证。法律工作是非常无趣的。但好消息是，您可以将现有许可证复制并粘贴到存储库中。只需要花这么一点时间，就能保护你的辛苦工作。MIT, Apache 2.0,  和 GPLv3 都是非常流行的开源许可证， 但你可以选择其他选项.当你在GitHub上创建新项目时，你可以选择许可证。包括开源许可证将使你的GitHub项目成为开源。如果您在管理开放源码项目的法律方面有其他问题或疑虑，我们已经在这里介绍了。Writing a README自述文件不仅仅是用于说明如何使用你的项目。他们还可以解释你的项目为什么重要，以及它可以为你的用户做什么。在您的自述文件中，尝试回答以下问题：  这个项目做什么？  为什么这个项目有用？  如何开始？  如果需要，我可以在哪里获得更多的帮助？您可以使用自己的README回答其他问题，例如处理贡献，项目的目标以及许可证和归属信息。 如果您不想接受他人的贡献，或者您的项目尚未准备好作为产品提供使用，请将这些信息写下来。  更好的文档意味着更多的用户，更少的求助和更多的贡献者，等等。要记住你的读者不是你自己。来到项目中的每个人可能有着截然不同的经历。  — @limedaring, “这样写给他人看（视频）”  有时，人们会因为觉得项目未完成而不愿意撰写 README，或者他们不希望做出贡献。这些都是写一个 README 的很好的理由。想要获得更多灵感，请尝试使用 @18F 的 “让 README 可读” 或者 @PurpleBooth 的 README 模板 来撰写一个完整的 README。当你在根目录中包含一个 README 文件时，GitHub 会自动将其显示在存储库的主页上。Writing your contributing guidelines贡献文件 (CONTRIBUTING file) 告诉你的受众如何参与你的项目. 例如，你可以包括一下信息:  如何提交错误报告（尝试使用issue 和 pull request 模板）  如何建议一个新功能  如何配置你的环境和运行测试除了技术细节， 贡献文件也是一个供你传达对贡献期待的机会， 例如：  你在寻求的贡献类型  你项目的路线图或者版本  贡献者应该（或者不应该）如何与你取得联系温柔友好的逾期和向贡献者们提供具体的建议（例如写文档或者搭建一个网页）能够有效地使新人感到受欢迎并乐于参与其中。例如，Active Admin 以这样的方式开始它的贡献指南：  首先， 非常感谢你考虑为 Active Admin 贡献帮助。正式你这样的人们使得 Active Admin 成为了如此优秀的工具。在你项目开始的初期，你的贡献文件可以很简单。你应该经常解释如何提交错误和文件问题，以及关于如何作出贡献的技术问题（例如测试）。随着时间的推移，你硬弓增加其他常见问题到你的贡献文件中去。写下这些信息意味着问你相同问题的人会越来越少。想要获得更多有关编写贡献文件的方式，请查阅 @nayafia 的 贡献指南模板 或者 @mozilla 的 “如何构建 CONTRIBUTION.md”。来你的 README 中链接你的 CONTRIBUTING，这样更多人就能看到他。如果你在你的项目中放入了 CONTRIBUTING 文件，当一个贡献者创建 issue 或者开启一个 pull request 时，GitHub 会自动链接你的文件。建立行为规范    我们都有过这样的关于重复劳动的经验，无论是维护者试着解释为什么某些事物必须通过某种明确的方式执行，或者是用户…提出一个简单的问题。行为规范成为一个便利的参考和可链接的文档标明你的团队会认真对待具有建设性的讨论。  — @mlynch, “让开源成为一个有趣的地方”  最后，行为规范有助于为你项目的参与者车里行为规则。这在你为社区或者项目推出一个开源项目的时候尤为有价值。一份行为帮助你促进健康，有建设性的社区行为，这也会减轻你作为维护者的压力。更多信息，请参见 行为规范指导。除了传达你期待参与者如何行动，行为规范也倾向于描述这些期待针对谁，适用于何时，以及对于违规行为的处理方法。就像开源许可证一样，有现成的行为规范，所以你不必自己编写。贡献者公约是一个行之有效的行为规范，已经被用在超过4000个开源项目，包括 Kubernetes，Rails，以及 Swift。无论你使用哪一种，你都应该准备好在必要时执行行为规范。将文本直接粘贴到项目存储库中的 CODE_OF_CONDUCT 文件中。将文件保存在项目的根目录中，以便轻松找到，并从 README 中链接到它。Naming and branding your project品牌不仅是一个华丽的logo或者易记的项目名。它还关于你如何谈论你的项目，以及你想把信息传递给谁。选择正确的名字选择一个容易记住，有创意，能表达项目用意的名字。例如：  Sentry 监控应用程序的崩溃报告  Thin 是一个简单快速的Ruby web服务器。如果你的项目是基于一个已存在的项目创建，那么使用他们的名字作为你项目名的前缀会帮助你阐述你项目的用途。 (例如 node-fetch将window.fetch 添加到了 Node.js)。考虑阐明所有。押韵虽然有趣，但是记住玩笑不可能转变成其它的文化，或者他人与你有不同的经历。你的一些潜在用户可能是公司员工，你不能让他们在工作中很难解释你的项目！Avoiding name conflicts查看是否有同名的开源项目，尤其是你分享的是同样的语言或者生态系统。如果你的名字与一个已存在的知名的项目有冲突，你会让你的粉丝感到困惑。如果你想要一个网站，Twitter账号或者其他特性来展示你的项目，先确保你能得到你想要的名字。理想情况下，为了美好的未来现在保留这些名字，即使你现在不想用他们。确保你的项目名没有侵权。如果有侵权，可能会有公司要求你的项目下架，或者对你采取法律措施。这样得不偿失。你可以查阅WIPO全球品牌数据库避免商标冲突。如果你是在公司工作，法律团队会帮你做这件事。最后，去谷歌搜索你的项目名。大家会很容易地找到你的项目吗？在搜索结果礼是否有你不想让大家看到的东西？你的写作（和代码）如何影响你的品牌在项目的整个生命周期中，你需要做很多文字工作：READMEs，教程，社区文档，回复issues，甚至肯能要处理很多来信和邮件。是否是官方文档或者一封普通的邮件，你的书写风格都是你项目品牌的一部分。考虑你可能会拥有粉丝，以及这是你想传达的声音。    我尝试处理每一个细节，包括：处理邮件，展示示例，友好待人，认真处理大家的issues以及试图帮助到大家。经过一段时间后，大家可能不再是只问问题，还会帮助我解决其他人的疑问以及给我喜悦，他们模仿我的风格。  — @janl on CouchDB, “Sustainable Open Source”  使用热情，通俗易懂的语言（如”他们”，即使是指一个人）能够让新来的贡献者感觉项目非常欢迎他们。使用简单的语言，因为你的读者可能英语不是很好。除了书写风格外，你的编码风格也是你项目品牌的一部分。 Angular 和 jQuery是两个项目代码风格严谨的示例和指南。当你的项目才开始时，没有必要为项目编写一份风格指南。你可能会发现你喜欢将不同的编码风格融入到项目。但是你应该想到你的书写和编码风格会吸引或者拒绝不同类型的人。项目的早期是你建立你希望看见的先例的机会。Your pre-launch checklist准备好开源你的项目了吗？有一份帮助检查清单。检查所有内容？你准备开始吧！ 点击 “publish” 以及拍下自己的后背。文档        需要为项目指定一个开源协议          项目要有基础文档 (README, CONTRIBUTING, CODE_OF_CONDUCT)          易记的项目名，指出项目是做什么的，不能和已存在的项目冲突或者商标侵权          最新的issue队列，组织和标记清除的issues  代码        项目使用一致的代码风格和明确的功能/方法/可用的名字          注释清晰的代码，记录意图和边缘案例          在修改历史，issues或者 pull requests 中没有敏感的信息 (例如 密码或者其他不能公开的信息)  人如果你是代表个人：      你已经告诉了你的法律部门，以及/或者理解了你公司（如果你是某一家公司的员工）的开源政策和IP  如果你有一家公司或者组织：        你已经告诉了你的法律部门          你有一个宣布和促进项目的营销计划          一些人被允许管理社区互动（回复issues，检查和合并pull requests）          至少有两人管理访问项目  You did it!恭喜你开源了你的首个项目。不论结果如何，对开源社区都是一份礼物。随着每次commit,comment和pull request，你正在为自己或者他人创造学习和成长的机会。",
    "url": "/zh-cn/starting-a-project/",
    "html": "<div class=\"border-top pt-4 my-4\">\n  <h2>\n    <a href=\"/zh-cn/starting-a-project/\">\n      开启一个开源项目\n    </a>\n  </h2>\n  <h2 id=\"the-what-and-why-of-open-source\">The “what” and “why” of open source</h2>\n\n\n</div>\n"
  }

};

// Initialize lunr
var idx = lunr(function () {
  this.ref('url');
  this.field('title', { boost: 10 });
  this.field('content');
});

// Add content to index
for(var id in store) {
  idx.add(store[id]);
}

onmessage = function (e) {
  var results = idx.search(e.data).map(function(result) {
    return store[result.ref].html;
  });
  postMessage(results);
}
